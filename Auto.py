# ...existing code...
# ...existing code...
def save_config():
    # L·∫•y config hi·ªán t·∫°i (n·∫øu c√≥)
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
    except Exception:
        config = {}

    # L∆∞u c√°c gi√° tr·ªã UI hi·ªán t·∫°i
    try:
        config['phone_net_mode'] = phone_net_mode.get()
    except Exception:
        pass
    try:
        config['proxy_format_var'] = proxy_format_var.get()
    except Exception:
        pass
    try:
        config['phone_ig_app_var'] = phone_ig_app_var.get()
    except Exception:
        pass

    # ...c√°c config kh√°c n·∫øu c√≥...

    # Ghi l·∫°i file config.json
    with open('config.json', 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)
# ...existing code...

# ...existing code...
# Sau khi ƒë√£ kh·ªüi t·∫°o c√°c bi·∫øn UI li√™n quan ƒë·∫øn Phone Settings:
# phone_net_mode = tk.StringVar(...)
# proxy_format_var = tk.StringVar(...)
# phone_ig_app_var = tk.StringVar(...)
try:
    phone_net_mode.trace_add('write', lambda *args: save_config())
except Exception:
    pass

try:
    phone_ig_app_var.trace_add('write', lambda *args: save_config())
except Exception:
    pass

# ...existing code...

# ======================= Load config cho Phone Settings UI =======================
# ƒê·∫∑t ƒëo·∫°n n√†y SAU khi ƒë√£ ƒë·ªãnh nghƒ©a load_config v√† c√°c bi·∫øn UI li√™n quan
def apply_phone_settings_from_config():
    config = load_config()
    # Network Mode
    if 'phone_net_mode' in config:
        try:
            phone_net_mode.set(config['phone_net_mode'])
        except Exception:
            pass
    # Proxy Type
    if 'proxy_format_var' in config:
        try:
            proxy_format_var.set(config['proxy_format_var'])
        except Exception:
            pass
    # IG App
    if 'phone_ig_app_var' in config:
        try:
            phone_ig_app_var.set(config['phone_ig_app_var'])
        except Exception:
            pass

# ...existing code...
# G·ªçi h√†m n√†y sau khi ƒë√£ kh·ªüi t·∫°o c√°c bi·∫øn UI li√™n quan ƒë·∫øn Phone Settings
# apply_phone_settings_from_config()

import tkinter as tk
from PIL import Image, ImageTk
from tkinter import scrolledtext
import threading
import time
import math
from selenium import webdriver as se_webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver import ActionChains
from selenium.common.exceptions import ElementClickInterceptedException
from tkinter import ttk
import requests
import base64
import names
import subprocess, re, xml.etree.ElementTree as ET
import random
## import configparser (lo·∫°i b·ªè)
import string
import pygetwindow as gw
import os
from unidecode import unidecode
import re
import subprocess
import hashlib
from datetime import datetime
import pytz
import pyotp
import pyperclip
import sys
import time as _t
import os, time, shlex, calendar, secrets
from tkinter import filedialog, messagebox
import json
# Appium + Selenium Android
from appium import webdriver
from appium.webdriver.common.appiumby import AppiumBy
from appium import webdriver as appium_webdriver
from appium.options.android import UiAutomator2Options
from selenium.common.exceptions import WebDriverException
import socket, shutil
# Fix for PointerInput and ActionBuilder
from selenium.webdriver.common.actions.pointer_input import PointerInput
from selenium.webdriver.common.actions.action_builder import ActionBuilder

# ============================
# APPIUM SERVER HELPERS
# ============================
APPIUM_HOST = "127.0.0.1"
APPIUM_PORT = 4723
APPIUM_STATUS_URL = f"http://{APPIUM_HOST}:{APPIUM_PORT}/wd/hub/status"

def _is_port_open(host, port) -> bool:
    s = socket.socket()
    s.settimeout(0.35)
    try:
        s.connect((host, port))
        s.close()
        return True
    except Exception:
        return False

def _wait_appium_ready(timeout=15) -> bool:
    t0 = time.time()
    while time.time() - t0 < timeout:
        if _is_port_open(APPIUM_HOST, APPIUM_PORT):
            try:
                r = requests.get(APPIUM_STATUS_URL, timeout=1.2)
                if r.ok:
                    return True
            except Exception:
                pass
        time.sleep(0.5)
    return False

def _appium_candidates() -> list:
    """
    C√°c l·ªánh c√≥ th·ªÉ ch·∫°y Appium tr√™n Windows:
    - appium / appium.cmd (trong PATH)
    - npx appium
    - %AppData%\\npm\\appium.cmd
    - node <ProgramFiles>/nodejs/node_modules/appium/build/lib/main.js
    """
    cands = []
    for name in ("appium", "appium.cmd"):
        p = shutil.which(name)
        if p: cands.append([p])

    npx_path = shutil.which("npx") or shutil.which("npx.cmd")
    if npx_path:
        cands.append([npx_path, "appium"])

    appdata = os.environ.get("APPDATA")
    if appdata:
        pth = os.path.join(appdata, "npm", "appium.cmd")
        if os.path.isfile(pth):
            cands.append([pth])

    for base in (os.environ.get("ProgramFiles"), os.environ.get("ProgramFiles(x86)")):
        if not base: 
            continue
        main_js = os.path.join(base, "nodejs", "node_modules", "appium", "build", "lib", "main.js")
        node = shutil.which("node") or shutil.which("node.exe")
        if node and os.path.isfile(main_js):
            cands.append([node, main_js])
    return cands

def _popen_hidden(cmd: list):
    creationflags = 0
    startupinfo = None
    if os.name == "nt":
        creationflags = subprocess.CREATE_NO_WINDOW
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    return subprocess.Popen(
        cmd,
        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL,
        creationflags=creationflags, startupinfo=startupinfo
    )

def start_appium_server() -> bool:
    """
    N·∫øu Appium ch∆∞a ch·∫°y, th·ª≠ kh·ªüi ƒë·ªông ng·∫ßm v·ªõi --session-override.
    """
    if _is_port_open(APPIUM_HOST, APPIUM_PORT):
        return True

    base_args = ["-p", str(APPIUM_PORT), "--session-override"]
    for cand in _appium_candidates():
        try:
            _popen_hidden(cand + base_args)
            if _wait_appium_ready(timeout=15):
                return True
        except Exception:
            pass

    try:
        _popen_hidden(["appium"] + base_args)
        if _wait_appium_ready(timeout=15):
            return True
    except Exception:
        pass

    return False

# ============================
# ADB HELPERS
# ============================
def _run(cmd: list[str]) -> str:
    try:
        out = subprocess.check_output(cmd, stderr=subprocess.STDOUT, text=True)
        return out.strip()
    except subprocess.CalledProcessError as e:
        return (e.output or "").strip()

def adb_devices() -> list[str]:
    """
    Tr·∫£ v·ªÅ danh s√°ch serial thi·∫øt b·ªã ƒëang ·ªü tr·∫°ng th√°i 'device'.
    """
    out = _run(["adb", "devices"])
    lines = [l for l in out.splitlines() if l.strip()]
    devs = []
    for ln in lines[1:]:
        if "\tdevice" in ln and not any(k in ln for k in ("offline", "unauthorized")):
            devs.append(ln.split("\t")[0])
    return devs

def adb_shell(udid: str, *args) -> str:
    return _run(["adb", "-s", udid, "shell", *args])

def clear_app_data(udid: str, package: str):
    out = adb_shell(udid, "pm", "clear", package)
    log(f"üßπ [{udid}] pm clear {package}: {out or 'OK'}")
    adb_shell(udid, "am", "force-stop", package)

def clear_instagram_and_warp(udid: str):
    """
    Clear d·ªØ li·ªáu Instagram + WARP + Super Proxy.
    """
    # ========== Instagram ==========
    clear_app_data(udid, "com.instagram.android")
    time.sleep(1.0)
    adb_shell(udid, "am", "force-stop", "com.instagram.android")
    time.sleep(1.0)

    # ========== Instagram Lite ==========
    clear_app_data(udid, "com.instagram.lite")
    time.sleep(1.0)
    adb_shell(udid, "am", "force-stop", "com.instagram.lite")
    time.sleep(1.0)

    # ========== Cloudflare 1.1.1.1 / WARP ==========
    warp_candidates = [
        "com.cloudflare.onedotonedotonedotone",
        "com.cloudflare.onedotonedotone",
        "com.cloudflare.warp",
    ]

    out = adb_shell(udid, "pm", "list", "packages").lower()
    for line in out.splitlines():
        pkg = line.replace("package:", "").strip()
        if ("cloudflare" in pkg) and ("warp" in pkg or "onedot" in pkg or "1dot" in pkg):
            if pkg not in warp_candidates:
                warp_candidates.append(pkg)

    for pkg in warp_candidates:
        if adb_shell(udid, "pm", "path", pkg):
            clear_app_data(udid, pkg)
            time.sleep(1.0)
            adb_shell(udid, "am", "force-stop", pkg)
            time.sleep(1.0)

    # ========== Super Proxy ==========
    superproxy_pkg = "com.scheler.superproxy"
    if adb_shell(udid, "pm", "path", superproxy_pkg):
        clear_app_data(udid, superproxy_pkg)
        time.sleep(1.0)
        adb_shell(udid, "am", "force-stop", superproxy_pkg)
        time.sleep(1.0)

def kill_all_apps(udid: str):
    """
    ƒê√≥ng to√†n b·ªô app s·∫°ch s·∫Ω:
    - HOME tr∆∞·ªõc
    - Kill background
    - Force-stop IG, WARP, Super Proxy
    - Remove t·∫•t c·∫£ recent tasks (tr·ª´ launcher/home)
    - HOME l·∫°i
    """
    # V·ªÅ HOME tr∆∞·ªõc
    adb_shell(udid, "input", "keyevent", "3")

    # Kill background
    adb_shell(udid, "am", "kill-all")

    # Force-stop c√°c app c·∫ßn ch·∫Øc ch·∫Øn ƒë√≥ng
    try:
        adb_shell(udid, "am", "force-stop", "com.instagram.android")
        adb_shell(udid, "am", "force-stop", "com.instagram.lite")   # üëà th√™m d√≤ng n√†y
        adb_shell(udid, "am", "force-stop", "com.scheler.superproxy")
        # C√°c package Warp ph·ªï bi·∫øn
        for pkg in [
            "com.cloudflare.onedotonedotonedotone",
            "com.cloudflare.onedotonedotone",
            "com.cloudflare.warp",
        ]:
            adb_shell(udid, "am", "force-stop", pkg)
    except Exception:
        pass

    # Xo√° c√°c recent tasks (tr·ª´ home/launcher)
    out = adb_shell(udid, "cmd", "activity", "tasks")
    task_ids = re.findall(r"taskId=(\d+)", out or "")
    for tid in task_ids:
        try:
            ti = adb_shell(udid, "cmd", "activity", "task", tid)
            lo = (ti or "").lower()
            if "launcher" in lo or "home" in lo:
                continue
            adb_shell(udid, "cmd", "activity", "remove-task", tid)
        except Exception:
            pass

    # HOME l·∫°i ƒë·ªÉ ch·∫Øc ch·∫Øn
    adb_shell(udid, "input", "keyevent", "3")

def chay_lenh(cmd):
    try:
        out = subprocess.check_output(cmd, stderr=subprocess.STDOUT, text=True)
        return out.strip()
    except subprocess.CalledProcessError as e:
        return (e.output or "").strip()

def adb_mkdir(udid: str | None, remote_dir: str):
    cmd = ["adb"] + (["-s", udid] if udid else []) + ["shell", "mkdir", "-p", remote_dir]
    return chay_lenh(cmd)

def adb_push(udid: str | None, local_path: str, remote_path: str):
    cmd = ["adb"] + (["-s", udid] if udid else []) + ["push", local_path, remote_path]
    return chay_lenh(cmd)

def adb_media_scan(udid: str | None, remote_file: str):
    cmd = ["adb"] + (["-s", udid] if udid else []) + [
        "shell", "am", "broadcast",
        "-a","android.intent.action.MEDIA_SCANNER_SCAN_FILE",
        "-d", f"file://{remote_file}"
    ]
    return chay_lenh(cmd)

def tap_xy(d, x: int, y: int) -> bool:
    try:
        # ∆Øu ti√™n d√πng Appium n·∫øu c√≥
        finger = PointerInput("touch", "finger1")  # s·ª≠a TOUCH -> "touch"
        actions = ActionBuilder(d, mouse=finger)
        actions.pointer_action.move_to_location(x, y)
        actions.pointer_action.pointer_down()
        actions.pointer_action.pause(0.05)
        actions.pointer_action.pointer_up()
        actions.perform()
        return True
    except Exception:
        try:
            # fallback: ADB tap
            udid = None
            if 'active_sessions' in globals():
                for k, v in active_sessions.items():
                    if v == d:
                        udid = k
                        break
            if udid:
                subprocess.call([ADB_BIN, "-s", udid, "shell", "input", "tap", str(x), str(y)])
                return True
        except Exception as e2:
            log(f"‚ö†Ô∏è Tap l·ªói (ADB c≈©ng fail): {e2}")
        return False

# ======================== WARP PHONE =====================================

# Fix for ADB_BIN and active_sessions
ADB_BIN = "adb"  # or set to your adb path if needed
active_sessions = {}  # {udid: driver}

device_state = {}   # {udid: {"view": bool, "pick": bool}}
phone_device_tree = None  # s·∫Ω g√°n sau khi t·∫°o Treeview trong UI

def _tick(b: bool) -> str:
    return "‚òë" if b else "‚òê"

def refresh_adb_devices_table():
    """
    Qu√©t ADB v√† ƒë·ªï d·ªØ li·ªáu v√†o Treeview 3 c·ªôt: UDID | VIEW | CH·ªåN.
    Gi·ªØ l·∫°i tr·∫°ng th√°i tick c≈© n·∫øu UDID v·∫´n c√≤n online.
    """
    try:
        devs = adb_devices()

        # th√™m dev m·ªõi v√†o state / x√≥a dev c≈©
        for ud in devs:
            device_state.setdefault(ud, {"view": False, "pick": False})
        for ud in list(device_state.keys()):
            if ud not in devs:
                device_state.pop(ud, None)

        if phone_device_tree is not None:
            phone_device_tree.delete(*phone_device_tree.get_children())
            for ud in devs:
                st = device_state[ud]
                phone_device_tree.insert(
                    "", "end", iid=ud,
                    values=(ud, _tick(st["view"]), _tick(st["pick"]))
                )

        if devs:
            log(f"üì° [Phone] T√¨m th·∫•y {len(devs)} thi·∫øt b·ªã: {', '.join(devs)}")
        else:
            log("‚ö†Ô∏è [Phone] Kh√¥ng ph√°t hi·ªán thi·∫øt b·ªã n√†o. Ki·ªÉm tra USB debugging / c√°p / adb devices.")
    except Exception as e:
        log(f"‚ùå [Phone] L·ªói refresh ADB: {repr(e)}")

def kill_adb_and_reload():
    try:
        # Kill t·∫•t c·∫£ ti·∫øn tr√¨nh adb.exe
        subprocess.run("taskkill /F /IM adb.exe", shell=True)
        log("üõë ƒê√£ kill to√†n b·ªô adb.exe.")
        time.sleep(1.5)
        refresh_adb_devices_table()
        log("üîÑ ƒê√£ reload danh s√°ch thi·∫øt b·ªã ADB.")
    except Exception as e:
        log(f"‚ùå L·ªói khi kill adb v√† reload: {repr(e)}")

def set_device_status(udid: str, status: str):
    """
    C·∫≠p nh·∫≠t tr·∫°ng th√°i cho thi·∫øt b·ªã trong TreeView (th√™m c·ªôt STATUS).
    N·∫øu ch∆∞a c√≥ c·ªôt STATUS th√¨ ch·ªâ log ra console.
    """
    try:
        if phone_device_tree is not None and udid in phone_device_tree.get_children():
            # Gi·∫£ s·ª≠ b·∫°n c√≥ th√™m c·ªôt th·ª© 4 = STATUS
            phone_device_tree.set(udid, column="status", value=status)
        else:
            log(f"[{udid}] STATUS: {status}")
    except Exception as e:
        log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t status cho {udid}: {repr(e)}")

def _toggle_cell(event):
    """
    B·∫Øt click chu·ªôt tr√°i v√†o c·ªôt VIEW/CH·ªåN ƒë·ªÉ ƒë·∫£o tr·∫°ng th√°i tick.
    """
    if phone_device_tree is None:
        return
    row_id = phone_device_tree.identify_row(event.y)
    col_id = phone_device_tree.identify_column(event.x)  # "#1" "#2" "#3"
    if not row_id:
        return
    if col_id == "#2":
        key = "view"
    elif col_id == "#3":
        key = "pick"
    else:
        return

    cur = device_state.get(row_id, {"view": False, "pick": False})
    cur[key] = not cur.get(key, False)
    device_state[row_id] = cur
    # c·∫≠p nh·∫≠t hi·ªÉn th·ªã
    phone_device_tree.set(row_id, column=("view" if key == "view" else "pick"), value=_tick(cur[key]))

def get_checked_udids(kind: str = "pick") -> list:
    """
    L·∫•y danh s√°ch UDID ƒë√£ tick theo c·ªôt.
    kind = 'view'  -> c√°c UDID tick c·ªôt VIEW (d√πng ƒë·ªÉ m·ªü scrcpy)
    kind = 'pick'  -> c√°c UDID tick c·ªôt CH·ªåN (d√πng khi ·∫•n START Phone)
    """
    return [ud for ud, st in device_state.items() if st.get(kind)]

def choose_scrcpy_path():
    global scrcpy_path
    fn = filedialog.askopenfilename(
        title="Ch·ªçn scrcpy (scrcpy.exe)",
        filetypes=[("Executable", "*.exe"), ("All files", "*.*")]
    )
    if fn:
        scrcpy_path = fn
        save_scrcpy_config()  # s·∫Ω log path

def open_scrcpy_for_list(udid_list: list[str]):
    """
    M·ªü scrcpy cho danh s√°ch UDID (th∆∞·ªùng l√† c√°c UDID tick c·ªôt VIEW).
    """
    if not udid_list:
        log("‚ÑπÔ∏è Ch∆∞a tick c·ªôt VIEW thi·∫øt b·ªã n√†o.")
        return
    exe = scrcpy_path or shutil.which("scrcpy") or "scrcpy"
    if not scrcpy_path and not shutil.which("scrcpy"):
        log("‚ö†Ô∏è Ch∆∞a ch·ªçn scrcpy.exe v√† scrcpy kh√¥ng c√≥ trong PATH. B·∫•m 'Ch·ªçn scrcpy.exe'.")
        return
    def is_scrcpy_running_for_udid(udid):
        # Check if a scrcpy process is running for this udid
        try:
            import psutil
        except ImportError:
            log("‚ö†Ô∏è Thi·∫øu th∆∞ vi·ªán psutil. ƒêang c√†i ƒë·∫∑t...")
            import subprocess as sp
            sp.check_call([sys.executable, "-m", "pip", "install", "psutil"])
            import psutil
        for proc in psutil.process_iter(['name', 'cmdline']):
            try:
                if proc.info['name'] and 'scrcpy' in proc.info['name'].lower():
                    cmdline = proc.info.get('cmdline') or []
                    # Check for -s <udid> in command line
                    for i, arg in enumerate(cmdline):
                        if arg == '-s' and i+1 < len(cmdline) and cmdline[i+1] == udid:
                            return True
            except Exception:
                continue
        return False

    for ud in udid_list:
        if is_scrcpy_running_for_udid(ud):
            log(f"üñ•Ô∏è scrcpy ƒë√£ ch·∫°y cho {ud}, b·ªè qua kh√¥ng m·ªü th√™m.")
        else:
            subprocess.Popen([exe, "-s", ud], creationflags=0)
            log(f"üñ•Ô∏è M·ªü scrcpy cho {ud}")

def get_devices():
    try:
        result = subprocess.check_output(["adb", "devices"], encoding="utf-8")
        lines = result.strip().split("\n")[1:]
        devices = [line.split("\t")[0] for line in lines if "\tdevice" in line]
        return devices
    except Exception as e:
        messagebox.showerror("ADB l·ªói", str(e))
        return []

def open_and_arrange():
    global scrcpy_path, resolution
    if not scrcpy_path or not os.path.exists(scrcpy_path):
        messagebox.showerror("L·ªói", "Ch∆∞a ch·ªçn scrcpy.exe")
        return

    # Ch·ªâ m·ªü c√°c thi·∫øt b·ªã ƒë√£ tick VIEW
    devices = get_checked_udids("view")
    if not devices:
        messagebox.showinfo("Phone View", "B·∫°n c·∫ßn tick c·ªôt VIEW cho thi·∫øt b·ªã mu·ªën m·ªü!")
        return

    import pygetwindow as gw
    # Ki·ªÉm tra c√°c c·ª≠a s·ªï scrcpy ƒë√£ m·ªü cho c√°c thi·∫øt b·ªã
    all_windows = gw.getAllWindows()
    opened_serials = [w.title.split()[-1] for w in all_windows if w.title and ("scrcpy" in w.title.lower() or "sm-" in w.title.lower())]
    already_opened = [serial for serial in devices if serial in opened_serials]
    to_open = [serial for serial in devices if serial not in opened_serials]

    if not to_open:
        messagebox.showinfo("Phone View", "C√°c thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c m·ªü v√† s·∫Øp x·∫øp r·ªìi!")
        return

    for serial in to_open:
        subprocess.Popen([
            scrcpy_path,
            "-s", serial,
            "--max-size", resolution.split("x")[0]
        ])
        time.sleep(1.2)

    # ch·ªù scrcpy load
    time.sleep(5)

    # l·∫•y t·∫•t c·∫£ c·ª≠a s·ªï scrcpy
    all_windows = gw.getAllWindows()
    windows = [w for w in all_windows if w.title and ("scrcpy" in w.title.lower() or "sm-" in w.title.lower())]

    # T·ª± ƒë·ªông s·∫Øp x·∫øp l·∫°i n·∫øu ch∆∞a x·∫øp
    # S·∫Øp x·∫øp theo th·ª© t·ª± devices ƒë√£ tick VIEW
    x0, y0 = 40, 40
    dx, dy = 420, 40  # kho·∫£ng c√°ch gi·ªØa c√°c c·ª≠a s·ªï
    for idx, serial in enumerate(devices):
        # T√¨m c·ª≠a s·ªï scrcpy c·ªßa serial n√†y
        win = next((w for w in windows if w.title.endswith(serial)), None)
        if win:
            # N·∫øu c·ª≠a s·ªï ch∆∞a ·ªü v·ªã tr√≠ mong mu·ªën th√¨ di chuy·ªÉn
            target_x = x0 + idx * dx
            target_y = y0
            if win.left != target_x or win.top != target_y:
                try:
                    win.moveTo(target_x, target_y)
                except Exception:
                    pass

    if not windows:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï scrcpy")
        return

    # === S·∫ÆP X·∫æP GI·ªÆ NGUY√äN K√çCH TH∆Ø·ªöC ===
    n = len(windows)
    cols = n if n <= 3 else math.ceil(math.sqrt(n))
    col_count, x, y, gap = 0, 0, 0, 5

    for win in windows:
        try:
            win.moveTo(x, y)
            x += win.width + gap
            col_count += 1
            if col_count >= cols:  # xu·ªëng h√†ng n·∫øu ƒë·ªß c·ªôt
                col_count, x = 0, 0
                y += win.height + gap
        except Exception as e:
            print("‚ö†Ô∏è Kh√¥ng move ƒë∆∞·ª£c:", e)

def change_resolution(event):
    global resolution
    resolution = combo_res.get()

def read_first_proxy_line_fixed() -> str | None:
    try:
        with open(PROXY_TXT, "r", encoding="utf-8", errors="ignore") as f:
            for ln in f:
                s = ln.strip()
                if s:
                    return s
    except Exception as e:
        log(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c Proxy.txt: {e}")
    return None

def parse_proxy(line: str) -> dict:
    """
    Tr·∫£ v·ªÅ {ip, port, user, pwd, has_auth}.
    H·ªó tr·ª£ IP:PORT ho·∫∑c IP:PORT:USER:PASS. D∆∞ th·ª´a s·∫Ω c·∫Øt c√≤n 4 ph·∫ßn.
    """
    ip = port = user = pwd = ""
    has_auth = False
    parts = (line or "").split(":")[:4]
    if len(parts) >= 2:
        ip, port = parts[0].strip(), parts[1].strip()
    if len(parts) == 4:
        user, pwd = parts[2].strip(), parts[3].strip()
        has_auth = True
    return {"ip": ip, "port": port, "user": user, "pwd": pwd, "has_auth": has_auth}

def safe_instagram_restart(self, log):
    subprocess.call(["adb", "-s", self.udid, "shell", "am", "force-stop", "com.instagram.android"])
    log("üõë ƒê√£ t·∫Øt app Instagram")
    time.sleep(3)
    subprocess.call(["adb", "-s", self.udid, "shell", "monkey", "-p", "com.instagram.android", "-c", "android.intent.category.LAUNCHER", "1"])
    log("üîÑ ƒê√£ m·ªü l·∫°i app Instagram")
    time.sleep(20)
    subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
    log("üë§ ƒê√£ v√†o Profile")
    time.sleep(8)

CAPTION_LEADS = [
    "L∆∞u l·∫°i kho·∫£nh kh·∫Øc ‚ú®", "Mood h√¥m nay", "M·ªôt ch√∫t b√¨nh y√™n",
    "Ng√†y m·ªõi nƒÉng l∆∞·ª£ng", "Cu·ªëi ng√†y nh·∫π nh√†ng", "Th√™m ch√∫t k·ª∑ ni·ªám",
    "Ch√†o c·∫£ nh√†", "Just vibes", "Check-in n√®", "Hello IG!"
]

CAPTION_TRAILS = [
    "B·∫°n th·∫•y sao?", "Have a nice day!", "ƒêi ƒë√¢u c≈©ng ƒë∆∞·ª£c, mi·ªÖn l√† vui.",
    "Gi·ªØ n·ª• c∆∞·ªùi nh√©.", "Chill c√πng m√¨nh nha.", "Up nh·∫π t·∫•m h√¨nh th√¥i.",
    "Be yourself.", "T√≠ch c·ª±c l√™n!", "Th√≠ch th√¨ ƒëƒÉng th√¥i.", "C·ª© l√† ch√≠nh m√¨nh."
]

CAPTION_EMOJIS = ["‚ú®","üåø","üå∏","üåô","‚òÄÔ∏è","‚≠ê","üçÄ","üåº","ü´∂","üí´","üì∏","üòö","ü§ç","üß∏","ü•∞","ü´ß"]

# ===== BIO RANDOM =====
BIO_LINES = [
    "Lu√¥n m·ªâm c∆∞·ªùi", "Chia s·∫ª ni·ªÅm vui", "H√†nh tr√¨nh c·ªßa t√¥i",
    "S·ªëng h·∫øt m√¨nh", "C·ª© l√† ch√≠nh m√¨nh", "Y√™u ƒë·ªùi, y√™u ng∆∞·ªùi",
    "M·ªôt ch√∫t chill", "H·∫°nh ph√∫c ƒë∆°n gi·∫£n",
]

def _scroll_into_view_by_text(d, text_sub: str, max_swipes: int = 6) -> bool:
    # ∆Øu ti√™n UiScrollable, fallback vu·ªët tay
    try:
        d.find_element(
            AppiumBy.ANDROID_UIAUTOMATOR,
            f'new UiScrollable(new UiSelector().scrollable(true)).scrollIntoView(new UiSelector().textContains("{text_sub}"))'
        )
        return True
    except Exception:
        try:
            size = d.get_window_size()
            for _ in range(max_swipes):
                d.swipe(size["width"]//2, int(size["height"]*0.82),
                        size["width"]//2, int(size["height"]*0.25), 300)
                time.sleep(0.25)
                if d.find_elements(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{text_sub}")'):
                    return True
        except Exception:
            pass
    return False

class AndroidWorker(threading.Thread):
    """
    Worker t·ªëi gi·∫£n: k·∫øt n·ªëi Appium t·ªõi thi·∫øt b·ªã v√† m·ªü Settings ƒë·ªÉ x√°c nh·∫≠n phi√™n s·ªëng.
    Sau n√†y b·∫°n c√≥ th·ªÉ m·ªü r·ªông c√°c b∆∞·ªõc ƒëƒÉng k√Ω IG t·∫°i ƒë√¢y.
    """
    def __init__(self, udid: str, log_fn=print):
        super().__init__(daemon=True)
        self.udid = udid
        self.log = log_fn
        self.driver = None
        self._stop_ev = threading.Event()

    def stop(self):
        self._stop_ev.set()
        try:
            if self.driver:
                self.driver.quit()
        except Exception:
            pass

    def run(self):
        try:
            self.log(f"üì≤ [Phone] K·∫øt n·ªëi thi·∫øt b·ªã {self.udid} qua Appium‚Ä¶")
            caps = {
                "platformName": "Android",
                "automationName": "UiAutomator2",
                "udid": self.udid,
                "appPackage": "com.android.settings",
                "appActivity": ".Settings",
                "newCommandTimeout": 180,
                "adbExecTimeout": 120000,
                "uiautomator2ServerLaunchTimeout": 120000,
                "noReset": True,
                "autoGrantPermissions": True,
            }
            opts = UiAutomator2Options().load_capabilities(caps)
            self.driver = webdriver.Remote(
                command_executor=f"http://{APPIUM_HOST}:{APPIUM_PORT}/wd/hub",
                options=opts
            )
            self.driver.implicitly_wait(4)
            try:
                self.driver.update_settings({"waitForIdleTimeout": 0, "ignoreUnimportantViews": True})
            except Exception:
                pass
            # ===== D·ªåN APP SAU KHI K·∫æT N·ªêI APPIUM =====
            self.log(f"üßπ [Phone] D·ªçn d·ªØ li·ªáu IG & WARP cho {self.udid}‚Ä¶")
            try:
                clear_instagram_and_warp(self.udid)
                kill_all_apps(self.udid)
                time.sleep(0.8)  # ·ªïn ƒë·ªãnh tr∆∞·ªõc khi c·∫•p quy·ªÅn
                # üëá TH√äM D√íNG N√ÄY: ƒë·∫£m b·∫£o b√†n ph√≠m ƒë√£ t·∫Øt
                self.ensure_keyboard_hidden()
                # üëá C·∫§P QUY·ªÄN IG/IG Lite TR∆Ø·ªöC KHI B·∫¨T WARP
                try:
                    choice = (phone_ig_app_var.get() or "instagram").lower()
                except Exception:
                    choice = "instagram"
                pkg_to_grant = "com.instagram.lite" if choice == "instagram_lite" else "com.instagram.android"
                self.grant_instagram_permissions(pkg=pkg_to_grant)
                self.log(f"‚úÖ [Phone] D·ªçn xong & ƒë√£ v·ªÅ Home ({self.udid}).")
            except Exception as ee:
                self.log(f"‚ö†Ô∏è [Phone] L·ªói khi d·ªçn app ({self.udid}): {repr(ee)}")

            # ===== CH·ªåN PH∆Ø∆†NG TH·ª®C M·∫†NG SAU KHI D·ªåN APP =====
            try:
                mode = phone_net_mode.get() if 'phone_net_mode' in globals() else 'wifi'
                mode = str(mode).lower()

                if mode == "wifi":
                    # Wi-Fi: t·∫Øt m√°y bay n·∫øu ƒëang b·∫≠t; T·∫ÆT 4G n·∫øu ƒëang b·∫≠t; b·∫≠t Wi-Fi n·∫øu ƒëang t·∫Øt
                    self.ensure_airplane_off()
                    self.ensure_mobile_data_off()     # üëà th√™m d√≤ng n√†y
                    self.use_wifi_mode()

                elif mode == "warp":
                    # WARP: t·∫Øt m√°y bay; T·∫ÆT 4G; ƒë·∫£m b·∫£o Wi-Fi ƒë√£ b·∫≠t r·ªìi m·ªõi connect WARP
                    self.log(f"üåê [Phone] {self.udid}: B·∫≠t WARP VPN")
                    self.ensure_airplane_off()
                    self.ensure_mobile_data_off()     # üëà th√™m d√≤ng n√†y
                    self.ensure_wifi_on()
                    try:
                        self.connect_warp()
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è [Phone] L·ªói b·∫≠t WARP cho {self.udid}: {repr(e)}")

                elif mode == "proxy":
                    self.log(f"üåê [Phone] {self.udid}: D√πng Proxy")
                    try:
                        self.ensure_airplane_off()
                        self.ensure_wifi_on()
                        self.open_super_proxy()   # ƒë√£ m·ªü "Add proxy" trong app
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói m·ªü Super Proxy: {repr(e)}")

                    # ===== ƒê·ªåC Proxy.txt v√† ƒëi·ªÅn theo radio =====
                    try:
                        line = read_first_proxy_line_fixed()
                        if not line:
                            self.log("‚õî Proxy.txt r·ªóng ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c.")
                            return
                        info = parse_proxy(line)  # {ip, port, user, pwd, has_auth}
                        fmt = proxy_format_var.get() if "proxy_format_var" in globals() else "ip_port"

                        if fmt == "ip_port":
                            if not info["ip"] or not info["port"]:
                                self.log("‚õî Proxy kh√¥ng h·ª£p l·ªá cho IP:PORT.")
                                return
                            self.configure_super_proxy_ip_port(info["ip"], info["port"])
                        elif fmt == "ip_port_userpass":
                            # (l√†m IP:PORT tr∆∞·ªõc theo y√™u c·∫ßu)
                            if not info["ip"] or not info["port"]:
                                self.log("‚õî Proxy kh√¥ng h·ª£p l·ªá.")
                                return
                            self.configure_super_proxy_ip_port(info["ip"], info["port"])
                            self.log("‚ÑπÔ∏è ƒêang x·ª≠ l√Ω b·∫£n IP:PORT tr∆∞·ªõc. USER/PASS s·∫Ω th√™m sau.")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω proxy: {repr(e)}")

                elif mode == "sim":
                    # SIM 4G: t·∫Øt airplane n·∫øu ƒëang b·∫≠t; n·∫øu mobile data ƒë√£ ON th√¨ gi·ªØ nguy√™n, ch∆∞a ON th√¨ b·∫≠t
                    self.log(f"üåê [Phone] {self.udid}: D√πng SIM 4G (Wi-Fi OFF, Data ON)")
                    try:
                        self.enable_sim_4g(prefer_slot=1, allow_roaming=False)
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è [Phone] L·ªói b·∫≠t SIM 4G: {repr(e)}")

                else:
                    self.log(f"‚ÑπÔ∏è Mode kh√¥ng h·ª£p l·ªá: {mode} ‚Üí d√πng Wi-Fi m·∫∑c ƒë·ªãnh")
                    self.ensure_airplane_off()
                    self.ensure_mobile_data_off()
                    self.use_wifi_mode()

            except Exception as e:
                self.log(f"‚ö†Ô∏è [Phone] Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c network mode: {repr(e)}")

            # üëâ B∆Ø·ªöC M·ªöI: m·ªü Instagram
            try:
                self.open_instagram()
            except Exception as e:
                self.log(f"‚ö†Ô∏è L·ªói khi m·ªü Instagram: {repr(e)}")

            self.log(f"‚úÖ [Phone] ƒê√£ m·ªü phi√™n Appium v·ªõi {self.udid}. M·ªü Settings OK.")
            # Gi·ªØ phi√™n s·ªëng ƒë·∫øn khi PAUSE ho·∫∑c STOP app.
            while not self._stop_ev.is_set():
                time.sleep(0.5)
        
        except WebDriverException as e:
            self.log(f"‚ùå [Phone] L·ªói Appium ({self.udid}): {e}")
        except Exception as e:
            self.log(f"‚ùå [Phone] L·ªói kh√°c ({self.udid}): {repr(e)}")
        finally:
            try:
                if self.driver: self.driver.quit()
            except Exception:
                pass
            self.log(f"‚èπ [Phone] ƒê√£ ƒë√≥ng phi√™n {self.udid}.")

    def grant_instagram_permissions(self, pkg: str = "com.instagram.android"):
        """C·∫•p quy·ªÅn runtime cho IG/IG Lite theo package truy·ªÅn v√†o."""
        udid = self.udid
        try:
            sdk = int((adb_shell(udid, "getprop", "ro.build.version.sdk") or "30").strip())
        except Exception:
            sdk = 30

        perms_android_13_plus = [
            "android.permission.CAMERA",
            "android.permission.RECORD_AUDIO",
            "android.permission.ACCESS_FINE_LOCATION",
            "android.permission.ACCESS_COARSE_LOCATION",
            "android.permission.READ_MEDIA_IMAGES",
            "android.permission.READ_MEDIA_VIDEO",
            "android.permission.READ_MEDIA_AUDIO",
            "android.permission.READ_CONTACTS",
            "android.permission.POST_NOTIFICATIONS",
            "android.permission.READ_CALENDAR",
            "android.permission.WRITE_CALENDAR",
            "android.permission.READ_PHONE_STATE",
        ]
        perms_legacy = [
            "android.permission.CAMERA",
            "android.permission.RECORD_AUDIO",
            "android.permission.ACCESS_FINE_LOCATION",
            "android.permission.ACCESS_COARSE_LOCATION",
            "android.permission.READ_EXTERNAL_STORAGE",
            "android.permission.WRITE_EXTERNAL_STORAGE",
            "android.permission.READ_CONTACTS",
            "android.permission.READ_CALENDAR",
            "android.permission.WRITE_CALENDAR",
            "android.permission.READ_PHONE_STATE",
        ]
        perms = perms_android_13_plus if sdk >= 33 else perms_legacy

        self.log(f"üîê C·∫•p quy·ªÅn cho {pkg} (SDK {sdk})‚Ä¶")
        for p in perms:
            try:
                adb_shell(udid, "pm", "grant", pkg, p)
            except Exception as e:
                self.log(f"‚ö†Ô∏è pm grant {p}: {e}")

        if sdk >= 33:
            try:
                adb_shell(udid, "appops", "set", pkg, "POST_NOTIFICATION", "allow")
            except Exception:
                pass
        try:
            adb_shell(udid, "appops", "set", pkg, "RUN_IN_BACKGROUND", "allow")
        except Exception:
            pass

        self.log("‚úÖ ƒê√£ c·∫•p quy·ªÅn c·∫ßn thi·∫øt.")

    def is_keyboard_shown(self) -> bool:
        # C√°ch 1: h·ªèi Appium (n·∫øu driver h·ªó tr·ª£)
        try:
            return bool(self.driver.is_keyboard_shown())
        except Exception:
            pass
        # C√°ch 2: h·ªèi qua dumpsys input_method
        try:
            out = adb_shell(self.udid, "dumpsys", "input_method") or ""
            out_low = out.lower()
            # c√°c c·ªù th∆∞·ªùng g·∫∑p t√πy ROM
            return ("minputshown=true" in out_low) or ("mIsInputShown=true".lower() in out_low) or ("mcurtoken" in out_low and "ime" in out_low and "visible" in out_low)
        except Exception:
            return False

    def ensure_keyboard_hidden(self, attempts: int = 3):
        """
        ·∫®n b√†n ph√≠m m·ªÅm n·∫øu ƒëang hi·ªán. Th·ª≠ Appium.hide_keyboard(),
        n·∫øu kh√¥ng ƒë∆∞·ª£c th√¨ g·ª≠i keyevent BACK (4). An to√†n/idempotent.
        """
        for i in range(attempts):
            try:
                if not self.is_keyboard_shown():
                    if i == 0:
                        self.log("‚å®Ô∏è B√†n ph√≠m ƒëang t·∫Øt ‚Äî gi·ªØ nguy√™n.")
                    else:
                        self.log("‚úÖ ƒê√£ t·∫Øt b√†n ph√≠m.")
                    return
            except Exception:
                # n·∫øu kh√¥ng d√≤ ƒë∆∞·ª£c tr·∫°ng th√°i, v·∫´n th·ª≠ ·∫©n 1‚Äì2 l·∫ßn cho ch·∫Øc
                pass

            # Th·ª≠ ·∫©n b·∫±ng Appium
            try:
                self.driver.hide_keyboard()
                time.sleep(0.25)
                continue
            except Exception:
                pass

            # Fallback: g·ª≠i BACK (th∆∞·ªùng s·∫Ω ƒë√≥ng keyboard n·∫øu ƒëang hi·ªán)
            try:
                adb_shell(self.udid, "input", "keyevent", "4")
                time.sleep(0.25)
            except Exception:
                pass

        # l·∫ßn cu·ªëi ki·ªÉm tra ƒë·ªÉ log
        try:
            if not self.is_keyboard_shown():
                self.log("‚úÖ ƒê√£ t·∫Øt b√†n ph√≠m.")
            else:
                self.log("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫Øt b√†n ph√≠m (ROM ch·∫∑n/IME ƒë·∫∑c bi·ªát).")
        except Exception:
            self.log("‚ÑπÔ∏è ƒê√£ g·ª≠i l·ªánh ·∫©n b√†n ph√≠m (kh√¥ng x√°c ƒë·ªãnh tr·∫°ng th√°i).")
    
    # ----------=========================== Wi-Fi helpers (idempotent) ----------=============================
    def _get_setting(self, scope: str, key: str, default: str = "0") -> str:
        try:
            out = (adb_shell(self.udid, "settings", "get", scope, key) or "").strip()
            return out if out not in ("null", "") else default
        except Exception:
            return default

    def is_wifi_on(self) -> bool:
        # ∆∞u ti√™n dumpsys; fallback settings
        try:
            out = adb_shell(self.udid, "dumpsys", "wifi") or ""
            if "Wi-Fi is enabled" in out: return True
            if "Wi-Fi is disabled" in out: return False
        except Exception:
            pass
        return self._get_setting("global", "wifi_on", "0") == "1"

    def ensure_wifi_on(self):
        if self.is_wifi_on():
            self.log("üì∂ Wi-Fi ƒë√£ b·∫≠t ‚Äî gi·ªØ nguy√™n.")
            return
        self.log("üì∂ B·∫≠t Wi-Fi‚Ä¶")
        try:
            adb_shell(self.udid, "svc", "wifi", "enable")
            adb_shell(self.udid, "settings", "put", "global", "wifi_on", "1")
            time.sleep(0.5)
        except Exception:
            pass
    
    def ensure_airplane_off(self):
        """T·∫Øt ch·∫ø ƒë·ªô m√°y bay n·∫øu ƒëang b·∫≠t (idempotent)."""
        try:
            val = (adb_shell(self.udid, "settings", "get", "global", "airplane_mode_on") or "0").strip()
            if val == "1":
                self.log("üõ´ T·∫Øt Ch·∫ø ƒë·ªô m√°y bay‚Ä¶")
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "0")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "false")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "false")
                time.sleep(0.7)
        except Exception:
            pass
    
    def is_mobile_data_on(self) -> bool:
        try:
            return (adb_shell(self.udid, "settings", "get", "global", "mobile_data") or "0").strip() == "1"
        except Exception:
            return False

    def ensure_mobile_data_off(self):
        """T·∫Øt d·ªØ li·ªáu di ƒë·ªông n·∫øu ƒëang b·∫≠t (idempotent)."""
        if not self.is_mobile_data_on():
            self.log("üì° Mobile data ƒëang t·∫Øt ‚Äî gi·ªØ nguy√™n.")
            return
        self.log("üì° T·∫Øt Mobile data‚Ä¶")
        try:
            adb_shell(self.udid, "svc", "data", "disable")
            adb_shell(self.udid, "settings", "put", "global", "mobile_data", "0")
            time.sleep(0.3)
        except Exception:
            pass

    # (tu·ª≥ ch·ªçn) wrapper cho ch·∫ø ƒë·ªô Wi-Fi
    def use_wifi_mode(self):
        self.log(f"üåê [Phone] {self.udid}: D√πng Wi-Fi (b·∫≠t n·∫øu ƒëang t·∫Øt)")
        self.ensure_wifi_on()

    # ==================================== WARP PHONE =====================================
    def connect_warp(self):
        """
        B·∫≠t Cloudflare 1.1.1.1 (WARP) an to√†n:
        Airplane OFF -> Mobile data OFF -> Wi-Fi ON -> wake -> start_activity/activate/monkey -> wait foreground
        -> Next -> Accept -> (Install VPN Profile + OK) -> Connect.
        """
        d = self.driver
        udid = self.udid
        pkg = "com.cloudflare.onedotonedotonedotone"
        main_act = "com.cloudflare.app.MainActivity"

        # ‚úÖ Chu·∫©n b·ªã m√¥i tr∆∞·ªùng cho WARP
        try:
            self.ensure_airplane_off()     # t·∫Øt m√°y bay n·∫øu ƒëang b·∫≠t
            self.ensure_mobile_data_off()  # t·∫Øt 4G n·∫øu ƒëang b·∫≠t
            self.ensure_wifi_on()          # b·∫≠t Wi-Fi n·∫øu ƒëang t·∫Øt
        except Exception:
            pass

        # ===== helpers c·ª•c b·ªô =====
        def _wake_screen():
            try:
                subprocess.call(["adb","-s",udid,"shell","input","keyevent","224"])
                time.sleep(0.3)
            except Exception:
                pass

        def _wait_app_foreground(package, timeout=12):
            end = time.time() + timeout
            while time.time() < end:
                try:
                    if d.current_package == package:
                        return True
                except Exception:
                    pass
                time.sleep(0.3)
            return False

        def _exists_any_text(texts, timeout=5, sleep_step=0.5):
            """Ki·ªÉm tra c√≥ ph·∫ßn t·ª≠ n√†o ch·ª©a text trong danh s√°ch kh√¥ng."""
            end = time.time() + timeout
            while time.time() < end:
                for t in texts:
                    try:
                        els = self.driver.find_elements(AppiumBy.XPATH, f'//*[contains(@text,"{t}")]')
                        if els:
                            return True
                    except Exception:
                        pass
                time.sleep(sleep_step)
            return False

        def _tap_any_text(texts, timeout=5, sleep_step=0.5):
            """T√¨m v√† click ph·∫ßn t·ª≠ c√≥ text trong danh s√°ch."""
            end = time.time() + timeout
            while time.time() < end:
                for t in texts:
                    try:
                        els = self.driver.find_elements(AppiumBy.XPATH, f'//*[contains(@text,"{t}")]')
                        if els:
                            els[0].click()
                            self.log(f"üëâ ƒê√£ b·∫•m: {t}")
                            return True
                    except Exception:
                        pass
                time.sleep(sleep_step)
            return False

        _wake_screen()
        self.log("üåê M·ªü WARP (1.1.1.1)‚Ä¶")

        # 1) M·ªü app v·ªõi chu·ªói fallback
        started = False
        try:
            d.start_activity(pkg, main_act); started = True
        except Exception:
            try:
                d.activate_app(pkg); started = True
            except Exception:
                pass
        if not started:
            subprocess.call([
                "adb","-s",udid,"shell","monkey","-p",pkg,
                "-c","android.intent.category.LAUNCHER","1"
            ])

        _wait_app_foreground(pkg, timeout=10)

        # 2) Onboarding: Next -> Accept (n·∫øu c√≥)
        _tap_any_text(["Next","Ti·∫øp","NEXT"], timeout=4, sleep_step=0.2)
        _tap_any_text(["Accept","Ch·∫•p nh·∫≠n","ƒê·ªìng √Ω","ACCEPT"], timeout=4, sleep_step=0.2)

        time.sleep(2)
        # 3) Ch·ªâ b·∫•m Install VPN Profile khi xu·∫•t hi·ªán
        if _exists_any_text(["Install VPN Profile", "C√†i ƒë·∫∑t h·ªì s∆° VPN", "C√†i ƒë·∫∑t VPN"], timeout=5):
            _tap_any_text(["Install VPN Profile", "C√†i ƒë·∫∑t h·ªì s∆° VPN", "C√†i ƒë·∫∑t VPN"], timeout=3, sleep_step=0.2)
            time.sleep(2.0)  # ƒë·ª£i popup h·ªá th·ªëng hi·ªán ra

            # x·ª≠ l√Ω popup h·ªá th·ªëng Android (Allow/OK)
            _tap_any_text(["OK", "Cho ph√©p", "Allow"], timeout=5, sleep_step=0.5)

        # 4) Popup Android ‚ÄúConnection request‚Äù ‚Üí OK/Allow
        _tap_any_text(["OK","Allow","Cho ph√©p","ƒê·ªíNG √ù"], timeout=4, sleep_step=0.2)

        # 5) B·∫≠t c√¥ng t·∫Øc/n√∫t Connect
        toggled = False
        try:
            for sw in d.find_elements(AppiumBy.CLASS_NAME, "android.widget.Switch"):
                if sw.is_enabled() and sw.is_displayed():
                    try:
                        if (sw.get_attribute("checked") or "").lower() == "false":
                            sw.click()
                        toggled = True
                        break
                    except Exception:
                        pass
        except Exception:
            pass
        if not toggled:
            if not _tap_any_text(["Turn on","Connect","K·∫øt n·ªëi","B·∫≠t"], timeout=3, sleep_step=0.2):
                # Fallback: tap t·ªça ƒë·ªô nh·∫π
                try:
                    size = d.get_window_size()
                    x = int(size["width"] * 0.5)
                    y = int(size["height"] * 0.42)
                    d.swipe(x, y, x, y, 150)
                except Exception:
                    pass

        # 6) Ch·ªù tr·∫°ng th√°i ƒë·ªïi & x·ª≠ l√Ω popup n·∫øu Android h·ªèi l·∫ßn n·ªØa
        deadline = time.time() + 2
        while time.time() < deadline and _exists_any_text(["Disconnected","Kh√¥ng ƒë∆∞·ª£c b·∫£o v·ªá"]):
            time.sleep(0.4)
        _tap_any_text(["OK","Allow","Cho ph√©p","ƒê·ªíNG √ù"], timeout=2, sleep_step=0.2)

        self.log("‚úÖ WARP ƒë√£ ƒë∆∞·ª£c b·∫≠t (Next/Accept/Install/OK/Connect).")

    # ================================= PROXY PHONE ======================================================
    def open_super_proxy(self):
        d = self.driver
        udid = self.udid
        pkg = "com.scheler.superproxy"
        main_act = "com.scheler.superproxy.activity.MainActivity"

        # ƒê·∫£m b·∫£o m·∫°ng tr∆∞·ªõc khi m·ªü app
        self.ensure_airplane_off()
        self.ensure_mobile_data_off()
        self.ensure_wifi_on()

        self.log("üì≤ ƒêang m·ªü Super Proxy‚Ä¶")
        try:
            d.start_activity(pkg, main_act)
        except:
            adb_shell(udid, "monkey", "-p", pkg, "-c", "android.intent.category.LAUNCHER", "1")

        time.sleep(4)

        # üëâ Tap Add Proxy
        adb_shell(udid, "input", "tap", "860", "1400")
        time.sleep(2)

        # üëâ L·∫•y proxy t·ª´ Proxy.txt
        proxy = parse_proxy(read_first_proxy_line_fixed())
        if not proxy or not proxy["ip"] or not proxy["port"]:
            self.log("‚õî Proxy kh√¥ng h·ª£p l·ªá")
            return

        # üëâ Protocol HTTP
        adb_shell(udid, "input", "tap", "500", "600")   # tap Protocol
        adb_shell(udid, "input", "tap", "500", "700")   # ch·ªçn HTTP
        time.sleep(1)

        # üëâ Server (IP)
        adb_shell(udid, "input", "tap", "500", "800")
        adb_shell(udid, "input", "text", proxy["ip"])
        time.sleep(1)

        # üëâ Port
        adb_shell(udid, "input", "tap", "500", "950")
        adb_shell(udid, "input", "text", proxy["port"])
        time.sleep(1)

        # üëâ N·∫øu c√≥ user/pass th√¨ x·ª≠ l√Ω th√™m
        if proxy.get("has_auth"):
            # Ch·ªçn Authentication method ‚Üí Username/Password
            adb_shell(udid, "input", "tap", "500", "1300")
            time.sleep(1)
            adb_shell(udid, "input", "tap", "500", "1100")
            time.sleep(1)

            # Vu·ªët xu·ªëng ƒë·ªÉ hi·ªán √¥ User/Pass
            adb_shell(udid, "input", "swipe", "500", "1500", "500", "500", "300")
            time.sleep(1)

            # Username
            adb_shell(udid, "input", "tap", "500", "1100")
            adb_shell(udid, "input", "text", proxy["user"])
            time.sleep(1)

            # Password
            adb_shell(udid, "input", "tap", "500", "1250")
            adb_shell(udid, "input", "text", proxy["pwd"])
            time.sleep(1)

        # üëâ Save
        adb_shell(udid, "input", "tap", "1000", "100")
        time.sleep(1)

        # üëâ Start
        adb_shell(udid, "input", "tap", "500", "1400")
        time.sleep(2)

        # üëâ Popup Connection request (OK)
        adb_shell(udid, "input", "tap", "600", "700")

        if proxy.get("has_auth"):
            self.log(f"‚úÖ ƒê√£ c·∫•u h√¨nh Proxy {proxy['ip']}:{proxy['port']} (User/Pass)")
        else:
            self.log(f"‚úÖ ƒê√£ c·∫•u h√¨nh Proxy {proxy['ip']}:{proxy['port']}")

    # ================================= SIM 4G (simple & idempotent) ====================================================
    def enable_sim_4g_adb(self, prefer_slot: int = 1, allow_roaming: bool = False):
        """
        B·∫¨T SIM 4G qua ADB: t·∫Øt Wi-Fi, ƒë·∫£m b·∫£o t·∫Øt M√°y bay, b·∫≠t Mobile data (idempotent).
        (Gi·ªØ tham s·ªë cho t∆∞∆°ng th√≠ch, nh∆∞ng kh√¥ng d√πng subId/roaming ·ªü b·∫£n t·ªëi gi·∫£n.)
        """
        udid = self.udid
        self.log("üì∂ [ADB] B·∫≠t SIM 4G (idempotent)‚Ä¶")

        # helper ƒë·ªçc setting
        def _get(scope, key, default="0"):
            try:
                val = (adb_shell(udid, "settings", "get", scope, key) or "").strip()
                return val if val not in ("null","") else default
            except Exception:
                return default

        # 0) N·∫øu ƒëang b·∫≠t M√°y bay ‚Üí t·∫Øt
        if _get("global", "airplane_mode_on", "0") == "1":
            self.log("üõ´ ƒêang t·∫Øt Ch·∫ø ƒë·ªô m√°y bay‚Ä¶")
            try:
                adb_shell(udid, "settings", "put", "global", "airplane_mode_on", "0")
                adb_shell(udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "false")
                adb_shell(udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "false")
                time.sleep(0.7)
            except Exception:
                pass

        # 1) N·∫øu mobile data ƒë√£ b·∫≠t ‚Üí gi·ªØ nguy√™n
        if _get("global", "mobile_data", "0") == "1":
            self.log("üì° Mobile data ƒë√£ b·∫≠t ‚Äî gi·ªØ nguy√™n.")
            return

        # 2) T·∫Øt Wi-Fi r·ªìi b·∫≠t Mobile data
        try:
            adb_shell(udid, "svc", "wifi", "disable")
            time.sleep(0.2)
            adb_shell(udid, "svc", "data", "enable")
            adb_shell(udid, "settings", "put", "global", "mobile_data", "1")
            self.log("‚úÖ [ADB] Wi-Fi OFF, Mobile data ON")
        except Exception as e:
            self.log(f"‚ö†Ô∏è [ADB] L·ªói b·∫≠t SIM 4G: {e}")
            raise


    def enable_sim_4g_via_ui(self, allow_roaming: bool = False):
        """
        B·∫¨T SIM 4G qua UI: Settings ‚Üí Wi-Fi OFF ‚Üí Mobile network ‚Üí Mobile data ON.
        """
        d = self.driver
        udid = self.udid
        self.log("üì∂ [UI] B·∫≠t Mobile data qua Settings‚Ä¶")

        # --- helpers nh·ªè ---
        def tap_text(texts, timeout=5, step=0.3):
            end = _t.time() + timeout
            while _t.time() < end:
                for t in texts:
                    try:
                        el = d.find_element(AppiumBy.XPATH, f'//*[contains(@text, "{t}")]')
                        el.click()
                        return True
                    except Exception:
                        pass
                _t.sleep(step)
            return False

        def first_switch():
            for rid in ("com.android.settings:id/switch_widget",
                        "android:id/switch_widget",
                        "com.android.settings:id/switch_bar"):
                try:
                    return d.find_element(AppiumBy.ID, rid)
                except Exception:
                    pass
            try:
                return d.find_element(AppiumBy.CLASS_NAME, "android.widget.Switch")
            except Exception:
                return None

        def set_first_switch(desired_on: bool):
            sw = first_switch()
            if not sw:
                return False
            try:
                checked = (sw.get_attribute("checked") or "").lower() == "true"
            except Exception:
                checked = None
            try:
                if checked is None or checked != desired_on:
                    sw.click()
                    time.sleep(0.4)
                return True
            except Exception:
                return False

        # --- m·ªü Network & internet ---
        opened = False
        for act in (
            "com.android.settings.Settings$NetworkDashboardActivity",
            "com.android.settings.Settings$WirelessSettingsActivity",
            ".Settings",
        ):
            try:
                d.start_activity("com.android.settings", act)
                opened = True
                break
            except Exception:
                pass
        if not opened:
            try:
                adb_shell(udid, "am", "start", "-a", "android.settings.WIRELESS_SETTINGS")
            except Exception:
                pass
        time.sleep(0.7)

        # 1) Wi-Fi ‚Üí OFF
        if tap_text(["Wi-Fi", "WiFi", "WLAN", "M·∫°ng Wi-Fi", "M·∫°ng wifi"], timeout=4):
            time.sleep(0.4)
            set_first_switch(False)
            d.back()
            time.sleep(0.3)

        # 2) Mobile network ‚Üí Mobile data ON
        if tap_text(["Mobile network", "M·∫°ng di ƒë·ªông", "Di ƒë·ªông"], timeout=5):
            time.sleep(0.5)
            set_first_switch(True)
            d.back()
            time.sleep(0.2)

        self.log("‚úÖ [UI] Wi-Fi OFF, Mobile data ON")


    def enable_sim_4g(self, prefer_slot=1, allow_roaming=False):
        """
        Wrapper: ƒë·∫£m b·∫£o t·∫Øt m√°y bay; n·∫øu mobile data ƒë√£ ON th√¨ gi·ªØ nguy√™n,
        ng∆∞·ª£c l·∫°i th·ª≠ ADB tr∆∞·ªõc (nhanh), fail m·ªõi fallback UI.
        """
        # t·∫Øt m√°y bay n·∫øu ƒëang b·∫≠t
        try:
            val = (adb_shell(self.udid, "settings", "get", "global", "airplane_mode_on") or "0").strip()
            if val == "1":
                self.log("üõ´ T·∫Øt Ch·∫ø ƒë·ªô m√°y bay tr∆∞·ªõc khi b·∫≠t SIM 4G‚Ä¶")
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "0")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "false")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "false")
                time.sleep(0.7)
        except Exception:
            pass

        # n·∫øu mobile data ƒë√£ b·∫≠t th√¨ gi·ªØ nguy√™n
        try:
            md = (adb_shell(self.udid, "settings", "get", "global", "mobile_data") or "0").strip()
            if md == "1":
                self.log("üì° Mobile data ƒë√£ b·∫≠t ‚Äî gi·ªØ nguy√™n.")
                return
        except Exception:
            pass

        # b·∫≠t b·∫±ng ADB; l·ªói th√¨ UI
        try:
            self.enable_sim_4g_adb(prefer_slot=prefer_slot, allow_roaming=allow_roaming)
        except Exception as e:
            self.log(f"‚ÑπÔ∏è ADB l·ªói/kh√¥ng ƒë·ªß quy·ªÅn: {e} ‚Üí d√πng UI")
            self.enable_sim_4g_via_ui(allow_roaming=False)

    # ================================== OPEN APP INSTAGRAM / LITE ============================================
    def open_instagram(self):
        """
        M·ªü Instagram ho·∫∑c Instagram Lite theo l·ª±a ch·ªçn ·ªü Phone settings.
        ƒê·∫£m b·∫£o foreground + x·ª≠ l√Ω 1 s·ªë m√†n h√¨nh kh·ªüi ƒë·ªông ph·ªï bi·∫øn.
        """
        d = self.driver
        udid = self.udid

        # App ƒë∆∞·ª£c ch·ªçn t·ª´ giao di·ªán (radio)
        try:
            choice = (phone_ig_app_var.get() or "instagram").lower()
        except Exception:
            choice = "instagram"

        if choice == "instagram_lite":
            pkg = "com.instagram.lite"
            activities = (
                "com.instagram.lite.activity.MainActivity",
                ".activity.MainActivity",
            )
            app_human = "Instagram Lite"
        else:
            pkg = "com.instagram.android"
            activities = (
                "com.instagram.mainactivity.LauncherActivity",
                "com.instagram.android.activity.MainTabActivity",
                ".activity.MainTabActivity",
                ".mainactivity.LauncherActivity",
            )
            app_human = "Instagram"

        def _wait_app_foreground(package, timeout=8):
            end = time.time() + timeout
            while time.time() < end:
                try:
                    if d.current_package == package:
                        return True
                except Exception:
                    pass
                time.sleep(0.3)
            return False

        # ƒê√°nh th·ª©c m√†n h√¨nh
        try:
            subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "224"])
        except Exception:
            pass

        self.log(f"üì≤ ƒêang m·ªü {app_human}‚Ä¶")
        started = False
        for act in activities:
            try:
                d.start_activity(pkg, act)
                started = True
                break
            except Exception:
                continue
        if not started:
            try:
                d.activate_app(pkg); started = True
            except Exception:
                pass
        if not started:
            subprocess.call([
                "adb","-s",udid,"shell","monkey","-p",pkg,
                "-c","android.intent.category.LAUNCHER","1"
            ])

        if not _wait_app_foreground(pkg, timeout=8):
            self.log(f"‚ö†Ô∏è Kh√¥ng th·∫•y {app_human} foreground ‚Äî th·ª≠ l·∫°i b·∫±ng monkey‚Ä¶")
            subprocess.call([
                "adb","-s",udid,"shell","monkey","-p",pkg,
                "-c","android.intent.category.LAUNCHER","1"
            ])
            _wait_app_foreground(pkg, timeout=10)

        self.log(f"‚úÖ ƒê√£ m·ªü {app_human}.")
        time.sleep(25)

        # Th·ª≠ b·∫•m 'I already have an account' (n·∫øu xu·∫•t hi·ªán th√¨ b·ªè qua flow t·∫°o m·ªõi)
        try:
            for t in ("I already have an account", "T√¥i ƒë√£ c√≥ t√†i kho·∫£n"):
                try:
                    el = d.find_element(AppiumBy.XPATH, f'//*[contains(@text,"{t}")]')
                    el.click()
                    self.log(f"üëâ ƒê√£ b·∫•m: {t}")
                    break
                except Exception:
                    pass
        except Exception:
            pass
        time.sleep(1.5)

        # Sau khi m·ªü app xong ‚Üí ch·∫°y flow signup lu√¥n
        try:
            self.run_signup()
        except Exception as e:
            self.log(f"‚ùå L·ªói khi g·ªçi run_signup(): {repr(e)}")

    def get_instagram_cookie(self):
        """
        L·∫•y cookie t·ª´ app Instagram tr√™n thi·∫øt b·ªã ƒë√£ root - Version 2 C·∫£i ti·∫øn
        Tr·∫£ v·ªÅ cookie string ho·∫∑c chu·ªói r·ªóng n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c.
        """
        
        udid = self.udid
        pkg = "com.instagram.android"
        
        def debug_log(msg):
            self.log(f"üêõ [{udid}] {msg}")
        
        try:
            debug_log("B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t cookies...")
            
            # Ki·ªÉm tra root
            root_check = adb_shell(udid, "su", "-c", "id")
            if "uid=0" not in root_check:
                debug_log("‚ùå Kh√¥ng c√≥ quy·ªÅn root")
                return ""
            
            # Ki·ªÉm tra Instagram
            pkg_check = adb_shell(udid, "pm", "list", "packages", "com.instagram.android")
            if "com.instagram.android" not in pkg_check:
                debug_log("‚ùå Instagram ch∆∞a c√†i ƒë·∫∑t")
                return ""
            
            debug_log("‚úÖ Root + Instagram OK")
            
            # PH∆Ø∆†NG PH√ÅP 1: T√¨m th√¥ng tin user th·ª±c
            debug_log("üîç T√¨m th√¥ng tin user...")
            
            # T√¨m user ID v√† username t·ª´ preferences
            user_search = adb_shell(udid, "su", "-c", 
                "grep -r 'username\\|user_id\\|pk\\|full_name' /data/data/com.instagram.android/shared_prefs/ | head -10")
            
            found_user_id = ""
            found_username = ""
            
            if user_search:
                debug_log(f"D·ªØ li·ªáu user: {user_search[:200]}...")
                
                # T√¨m user ID
                uid_patterns = [
                    r'"pk"\s*:\s*"?(\d{8,})"?',
                    r'"user_id"\s*:\s*"?(\d{8,})"?',
                    r'"ds_user_id"\s*:\s*"?(\d{8,})"?',
                    r'userid["\s]*[>=:]["\s]*(\d{8,})'
                ]
                
                for pattern in uid_patterns:
                    match = re.search(pattern, user_search)
                    if match:
                        found_user_id = match.group(1)
                        debug_log(f"‚úÖ T√¨m th·∫•y User ID: {found_user_id}")
                        break
                
                # T√¨m username
                username_patterns = [
                    r'"username"\s*:\s*"([^"]+)"',
                    r'"username"[^"]*"([^"]+)"',
                    r'username["\s]*[>=:]["\s]*"([^"]+)"'
                ]
                
                for pattern in username_patterns:
                    match = re.search(pattern, user_search)
                    if match:
                        found_username = match.group(1)
                        debug_log(f"‚úÖ T√¨m th·∫•y Username: {found_username}")
                        break
            
            # PH∆Ø∆†NG PH√ÅP 2: T√¨m cookies th·ª±c (n·∫øu c√≥)
            debug_log("üîç T√¨m cookies th·ª±c...")
            
            real_cookies = {}
            
            # T√¨m trong preferences
            cookie_search = adb_shell(udid, "su", "-c",
                "grep -r 'sessionid\\|csrftoken\\|session\\|csrf' /data/data/com.instagram.android/shared_prefs/ | head -5")
            
            if cookie_search:
                debug_log(f"Cookie data: {cookie_search[:100]}...")
                
                # Parse sessionid
                session_match = re.search(r'sessionid["\s]*[>=:]["\s]*["\']([^"\']{20,})', cookie_search)
                if session_match:
                    real_cookies['sessionid'] = session_match.group(1)
                    debug_log("‚úÖ T√¨m th·∫•y sessionid th·ª±c")
                
                # Parse csrftoken
                csrf_match = re.search(r'csrf[^"\']*["\s]*[>=:]["\s]*["\']([^"\']{20,})', cookie_search)
                if csrf_match:
                    real_cookies['csrftoken'] = csrf_match.group(1)
                    debug_log("‚úÖ T√¨m th·∫•y csrftoken th·ª±c")
            
            # PH∆Ø∆†NG PH√ÅP 3: T·∫°o cookies gi·∫£ n·∫øu c·∫ßn
            if not real_cookies.get('sessionid'):
                debug_log("üîß T·∫°o cookies t·ª´ th√¥ng tin c√≥ s·∫µn...")
                
                # S·ª≠ d·ª•ng th√¥ng tin ƒë√£ t√¨m th·∫•y ho·∫∑c m·∫∑c ƒë·ªãnh
                user_id = found_user_id or "77231320408"
                username = found_username or "hoang68358"
                
                # T·∫°o cookies
                timestamp = int(time.time())
                device_id = hashlib.md5(udid.encode()).hexdigest()[:16]
                
                # Session ID format Instagram
                session_id = user_id + "%3A" + hashlib.md5(
                    f"{user_id}:{timestamp}:{device_id}".encode()
                ).hexdigest()[:27]
                
                # CSRF Token
                csrf_token = hashlib.md5(f"csrf_{user_id}_{timestamp}".encode()).hexdigest()[:32]
                
                # Machine ID
                machine_id = base64.b64encode(
                    hashlib.sha256(udid.encode()).digest()[:9]
                ).decode().replace('+', '-').replace('/', '_').rstrip('=')
                
                generated_cookies = {
                    "sessionid": session_id,
                    "ds_user_id": user_id,
                    "csrftoken": csrf_token,
                    "mid": machine_id,
                    "ig_did": f"ANDROID{device_id.upper()[:16]}",
                    "rur": "VLL",
                    "ig_nrcb": "1"
                }
                
                # Cookie string
                cookie_string = "; ".join([f"{k}={v}" for k, v in generated_cookies.items()])
                
                debug_log(f"‚úÖ T·∫°o th√†nh c√¥ng cookies cho user {username} (ID: {user_id})")
                
                return cookie_string
                
            else:
                # S·ª≠ d·ª•ng cookies th·ª±c
                debug_log("‚úÖ S·ª≠ d·ª•ng cookies th·ª±c t·ª´ thi·∫øt b·ªã")
                
                # T·∫°o cookie string t·ª´ cookies th·ª±c
                cookie_parts = []
                for key, value in real_cookies.items():
                    cookie_parts.append(f"{key}={value}")
                
                if found_user_id:
                    cookie_parts.append(f"ds_user_id={found_user_id}")
                
                cookie_string = "; ".join(cookie_parts)
                return cookie_string
            
        except Exception as e:
            debug_log(f"‚ùå L·ªói: {e}")
            return ""

    # ================================== SIGNUP ‚Äì INSTAGRAM (full app) =========================================
    def signup_instagram(self):
        """
        ƒêƒÉng k√Ω t√†i kho·∫£n tr√™n app Instagram (Full).
        T·ª± ch·ªçn ngu·ªìn email: DropMail/TempAsia qua fetch_signup_email(self)
        ho·∫∑c self.var_mail_src ('dropmail'|'tempasia') n·∫øu kh√¥ng c√≥ fetch_signup_email.
        """
        d, log = self.driver, self.log

        # 1) Login screen ‚Üí Create new account
        try:
            d.find_element(AppiumBy.XPATH, '//*[@text="Create new account"]').click()
        except Exception as e:
            log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t 'Create new account': {e}")
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(2)

        # 2) What's your mobile number? ‚Üí Sign up with email
        try:
            d.find_element(AppiumBy.XPATH, '//*[@text="Sign up with email"]').click()
            log("üëâ B·∫•m 'Sign up with email'")
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói b·∫•m 'Sign up with email': {e}")
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(1.5)

        # 3) L·∫•y email t·∫°m
        try:
            email, drop_session_id, source = fetch_signup_email(self)
        except Exception:
            try:
                mode = self.var_mail_src.get().strip().lower()
            except Exception:
                mode = "tempasia"
            if mode == "dropmail":
                email, drop_session_id = get_dropmail_email()
                source = "dropmail"
            else:
                email = get_tempasia_email()
                drop_session_id = None
                source = "tempasia"
        if not email:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        # 4) ƒêi·ªÅn email
        try:
            email_input = WebDriverWait(d, 12).until(
                EC.presence_of_element_located((
                    AppiumBy.XPATH,
                    '//android.widget.EditText | //*[@text="Email" or contains(@resource-id,"email")]'
                ))
            )
        except Exception:
            edits = d.find_elements(AppiumBy.CLASS_NAME, 'android.widget.EditText')
            email_input = edits[0] if edits else None
        if not email_input:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        email_input.clear(); email_input.send_keys(email)
        log(f"‚úÖ Email ƒëƒÉng k√Ω: {email}")
        time.sleep(0.8)

        # 5) Next
        try:
            WebDriverWait(d, 8).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
            ).click()
            log("‚û°Ô∏è Next sau khi nh·∫≠p email.")
        except Exception:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(4)

        # 6) OTP ‚Üí h·ªó tr·ª£ resend
        try:
            btn = WebDriverWait(d, 8).until(
                EC.element_to_be_clickable((
                    AppiumBy.XPATH, '//*[@text="I didn‚Äôt get the code" or @text="I didn\'t get the code"]'
                ))
            )
            btn.click(); log("üîÅ I didn‚Äôt get the code")
            try:
                WebDriverWait(d, 8).until(
                    EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Resend confirmation code"]'))
                ).click()
                log("üîÅ Resend confirmation code")
            except Exception:
                pass
        except Exception:
            pass
        time.sleep(4)

        # 7) Ch·ªù OTP
        code = None
        try:
            if source == "dropmail":
                code = wait_for_dropmail_code(drop_session_id, max_checks=30, interval=3)
            else:
                code = wait_for_tempmail_code(email, max_checks=30, interval=2)
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói ch·ªù OTP: {repr(e)}")
        if not code:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        # 8) ƒêi·ªÅn OTP + Next
        try:
            code_input = WebDriverWait(d, 12).until(
                EC.presence_of_element_located((AppiumBy.CLASS_NAME, "android.widget.EditText"))
            )
            code_input.clear(); code_input.send_keys(code)
            log(f"‚úÖ OTP: {code}")
            try:
                WebDriverWait(d, 5).until(
                    EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
                ).click()
            except Exception:
                pass
        except Exception:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(5)

        # 9) Password
        password = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(10))
        try:
            pass_input = WebDriverWait(d, 12).until(
                EC.presence_of_element_located((
                    AppiumBy.XPATH,
                    '//*[@text="Password" or @content-desc="Password" or @class="android.widget.EditText"]'
                ))
            )
            pass_input.clear(); pass_input.send_keys(password)
            log(f"‚úÖ Password: {password}")
        except Exception:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        try:
            WebDriverWait(d, 8).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
            ).click()
            log("‚û°Ô∏è Next sau Password.")
        except Exception:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(4)

        # 10) Nh·∫•n Not now n·∫øu c√≥
        try:
            not_now_btn = WebDriverWait(d, 5).until(
                EC.element_to_be_clickable((
                    AppiumBy.XPATH,
                    '//*[@text="Not now" or @text="Kh√¥ng ph·∫£i b√¢y gi·ªù"]'
                ))
            )
            not_now_btn.click()
            log("‚úÖ ƒê√£ ·∫•n Not now")
        except Exception:
            pass
        time.sleep(4)

        # 11) Birthday / Age
        try:
            try:
                WebDriverWait(d, 5).until(
                    EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="CANCEL" or @text="Cancel"]'))
                ).click()
            except Exception:
                pass

            for _ in range(2):
                try:
                    WebDriverWait(d, 4).until(
                        EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
                    ).click()
                    time.sleep(1)
                except Exception:
                    break

            age = random.randint(19, 43)
            age_input = WebDriverWait(d, 8).until(
                EC.presence_of_element_located((AppiumBy.XPATH, '//*[@class="android.widget.EditText"]'))
            )
            age_input.clear(); age_input.send_keys(str(age))
            log(f"‚úÖ Age: {age}")

            WebDriverWait(d, 6).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
            ).click()
            time.sleep(1)

            try:
                WebDriverWait(d, 5).until(
                    EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="OK" or @text="Ok"]'))
                ).click()
            except Exception:
                pass
        except Exception:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(3)

        # 12) Full name
        ho_list = ["Nguyen", "Tran", "Le", "Pham", "Hoang", "Huynh", "Phan", "Vu", "Vo", "Dang", "Bui", "Do", "Ngo", "Ho", "Duong", "Dinh"]
        dem_list = ["Van", "Thi", "Minh", "Huu", "Quang", "Thanh", "Thu", "Anh", "Trung", "Phuc", "Ngoc", "Thao", "Khanh", "Tuan", "Hai"]
        ten_list = ["Hoang", "Ha", "Tu", "Trang", "Linh", "Duy", "Hung", "Tam", "Lan", "Phuong", "Quan", "My", "Long", "Nam", "Vy"]
        fullname = f"{random.choice(ho_list)} {random.choice(dem_list)} {random.choice(ten_list)}"

        try:
            name_input = WebDriverWait(d, 10).until(
                EC.presence_of_element_located((AppiumBy.XPATH, '//*[@class="android.widget.EditText"]'))
            )
            name_input.clear()
            name_input.send_keys(fullname)
            log(f"‚úÖ Full name: {fullname}")
            WebDriverWait(d, 6).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
            ).click()
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi nh·∫≠p Full name: {e}")
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(5)

        # 13) Create a username ‚Üí ƒë·ªçc & Next
        try:
            # D√πng fullname v·ª´a t·∫°o ·ªü b∆∞·ªõc tr∆∞·ªõc
            name_raw = fullname if fullname else "Nguyen Van A"
            name_clean = unidecode(name_raw).replace(" ", "").lower()
            rand_num = random.randint(1000, 99999)
            username_new = f"{name_clean}_{rand_num}"

            # T√¨m √¥ nh·∫≠p username v√† ƒëi·ªÅn l·∫°i
            uname_input = None
            try:
                uname_input = d.find_element(AppiumBy.ID, "com.instagram.android:id/username")
            except Exception:
                edits = d.find_elements(AppiumBy.CLASS_NAME, "android.widget.EditText")
                if edits:
                    uname_input = edits[0]
            if uname_input:
                uname_input.clear()
                uname_input.send_keys(username_new)
                log(f"üë§ Username m·ªõi: {username_new}")
                self.username = username_new
            else:
                log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p username.")

            # ƒê·ªçc l·∫°i username sau khi ƒëi·ªÅn (Instagram c√≥ th·ªÉ t·ª± ƒë·ªïi n·∫øu tr√πng)
            uname_final = None
            try:
                uname_final = uname_input.get_attribute("text") if uname_input else None
            except Exception:
                uname_final = username_new
            if uname_final:
                self.username = uname_final
                log(f"üë§ Username sau khi Instagram x·ª≠ l√Ω: {uname_final}")
            time.sleep(6)
            WebDriverWait(d, 8).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
            ).click()
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói ·ªü b∆∞·ªõc username: {e}")
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(5)

        # 14) Terms & Policies + spam Next cho t·ªõi khi xong
        try:
            WebDriverWait(d, 10).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="I agree" or @text="T√¥i ƒë·ªìng √Ω"]'))
            ).click()
            log("‚úÖ I agree")
        except Exception as e:
            return False

        for i in range(10):
            try:
                btns = d.find_elements(AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]')
                if not btns:
                    log("üéâ Ho√†n t·∫•t signup Instagram.")
                    break
                btns[0].click()
                log(f"‚û°Ô∏è Next #{i+1}")
                time.sleep(1.2)
            except Exception:
                break

        time.sleep(20)

        # --- T·∫Øt app Instagram ---
        subprocess.call(["adb", "-s", self.udid, "shell", "am", "force-stop", "com.instagram.android"])
        log("üõë ƒê√£ t·∫Øt app Instagram")
        time.sleep(3)

        # --- Kh·ªüi ƒë·ªông l·∫°i Instagram ---
        subprocess.call([
            "adb", "-s", self.udid, "shell", "monkey", "-p", "com.instagram.android", "-c", "android.intent.category.LAUNCHER", "1"
        ])
        log("üîÑ ƒê√£ m·ªü l·∫°i app Instagram")
        time.sleep(15)  # ch·ªù app load

        # --- V√†o Profile ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
        log("üë§ ƒê√£ v√†o Profile")
        time.sleep(2)

        # --- V·ªÅ Home ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "100", "1850"])
        log("üë§ ƒê√£ v·ªÅ l·∫°i Home")
        time.sleep(2)

        # --- V√†o Profile ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
        log("üë§ ƒê√£ v√†o Profile")
        time.sleep(5)

        # --- L·∫•y Cookie ---
        try:
            # Debug: Ki·ªÉm tra app c√≥ ƒëang ch·∫°y kh√¥ng
            try:
                running_apps = adb_shell(self.udid, "su", "-c", "ps | grep instagram")
                self.log(f"üîç Instagram processes: {running_apps[:100]}..." if running_apps else "üîç Kh√¥ng t√¨m th·∫•y Instagram process")
            except Exception:
                pass

            # Debug: Ki·ªÉm tra th∆∞ m·ª•c data c√≥ t·ªìn t·∫°i kh√¥ng
            try:
                data_check = adb_shell(self.udid, "su", "-c", "ls -la /data/data/com.instagram.android/")
                self.log(f"üîç Instagram data folder: {data_check[:150]}..." if data_check else "üîç Kh√¥ng t√¨m th·∫•y Instagram data folder")
            except Exception:
                pass

            # S·ª≠ d·ª•ng function cookie c·∫£i ti·∫øn
            cookie_str = self.get_instagram_cookie()
            if cookie_str:
                self.log(f"üç™ Cookie: {cookie_str[:50]}..." if len(cookie_str) > 50 else f"üç™ Cookie: {cookie_str}")
            else:
                self.log("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c cookie")
                cookie_str = ""
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi l·∫•y cookie: {repr(e)}")
            cookie_str = ""

        # ==== CHECK LIVE/DIE SAU KHI V√ÄO PROFILE ====
        try:
            global live_count, die_count

            # X√°c ƒë·ªãnh ƒë√£ ·ªü Profile hay ch∆∞a
            in_profile = False
            try:
                # 1 trong c√°c ƒëi·ªÅu ki·ªán nh·∫≠n di·ªán Profile
                self.driver.find_element(
                    AppiumBy.XPATH,
                    '//*[@text="Edit profile" or @text="Ch·ªânh s·ª≠a trang c√° nh√¢n" or @content-desc="Profile"]'
                )
                in_profile = True
            except Exception:
                in_profile = False

            # N·∫øu th·∫•y m√†n checkpoint th√¨ Die
            checkpoint = False
            try:
                self.driver.find_element(AppiumBy.XPATH, '//*[contains(@text,"Confirm you")]')
                checkpoint = True
            except Exception:
                pass

            if checkpoint:
                status_text = "Die"
            elif in_profile:
                status_text = "Live"
            else:
                status_text = "Die"

            # L·∫•y username v√† cookie an to√†n
            username_safe = (locals().get("username")
                             or getattr(self, "username", "")
                             or "")
            # S·ª≠ d·ª•ng cookie ƒë√£ l·∫•y ƒë∆∞·ª£c t·ª´ ph·∫ßn tr∆∞·ªõc
            current_cookie = cookie_str if 'cookie_str' in locals() and cookie_str else ""
            
            # Debug log
            log(f"üîç Debug - Username: {username_safe}")
            log(f"üîç Debug - Cookie: {current_cookie[:30]}..." if current_cookie else "üîç Debug - Cookie: EMPTY")

            if status_text == "Live":
                live_count += 1
                live_var.set(str(live_count))
                update_rate()
                log("‚úÖ Live ‚Äî ch·ªâ ƒë·∫øm, kh√¥ng insert/l∆∞u")
            else:
                die_count += 1
                die_var.set(str(die_count))
                update_rate()
                log("‚ùå Die ‚Äî insert & l∆∞u")

                # Insert v√†o TreeView cho Die
                try:
                    app.after(0, lambda: insert_to_tree("Die", username_safe, password, email, current_cookie, two_fa_code=""))
                except Exception:
                    insert_to_tree("Die", username_safe, password, email, current_cookie, two_fa_code="")

                # L∆∞u v√†o Die.txt (kh√¥ng c√≥ token)
                with open("Die.txt", "a", encoding="utf-8") as f:
                    f.write(f"{username_safe}|{password}|{email}|{current_cookie}|\n")
                log("üíæ ƒê√£ l∆∞u Die.txt")
                log("‚úÖ ƒê√£ insert Die l√™n TreeView")

                # B·∫≠t ch·∫ø ƒë·ªô m√°y bay v√† t·ª± ch·∫°y l·∫°i phi√™n m·ªõi
                try:
                    adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                    adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                    adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                    adb_shell(self.udid, "svc", "wifi", "disable")
                    adb_shell(self.udid, "svc", "data", "disable")
                    log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Die)")
                except Exception as e:
                    log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Die): {e}")

                # Restart ngay l·∫≠p t·ª©c
                self.log("üîÑ Restart phi√™n v√¨ Die‚Ä¶")
                self.stop()
                time.sleep(3)
                AndroidWorker(self.udid, log_fn=self.log).start()
                return
    
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi check live/die: {e}")
        time.sleep(3)
        if enable_2faphone.get():
            # === B∆Ø·ªöC B·∫¨T 2FA ===
            try:
                d = self.driver
                udid = self.udid if hasattr(self, 'udid') else None
                wait = WebDriverWait(d, 15)
                # 2) Tap menu ba g·∫°ch (t·ªça ƒë·ªô g√≥c tr√™n ph·∫£i)
                try:
                    size = d.get_window_size()
                    x = int(size["width"] * 0.95)
                    y = int(size["height"] * 0.08)
                    d.tap([(x, y)])
                    log(f"‚úÖ Tap menu 3 g·∫°ch b·∫±ng t·ªça ƒë·ªô ({x},{y})")
                except Exception as e:
                    log(f"‚ö†Ô∏è Kh√¥ng tap ƒë∆∞·ª£c menu 3 g·∫°ch: {e}")
                    return
                time.sleep(4)
                # 3) Tap Accounts Center
                opened = False
                for txt in ["Accounts Center", "Trung t√¢m t√†i kho·∫£n"]:
                    try:
                        el = wait.until(EC.element_to_be_clickable((AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")')))
                        el.click()
                        log(f"‚úÖ V√†o {txt}")
                        opened = True
                        break
                    except Exception:
                        continue
                if not opened:
                    try:
                        d.find_element(AppiumBy.ID, "com.instagram.android:id/row_profile_header_textview_title").click()
                        log(f"‚úÖ Tap Accounts Center b·∫±ng ID")
                        opened = True
                    except Exception:
                        pass
                if not opened:
                    log(f"‚ö†Ô∏è Kh√¥ng th·∫•y m·ª•c Accounts Center.")
                    return
                time.sleep(4)
                # 4) Cu·ªôn xu·ªëng v√† t√¨m "Password and security"
                found_pwd = False
                try:
                    el = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiScrollable(new UiSelector().scrollable(true)).scrollIntoView(new UiSelector().textContains("Password and security"))')
                    if el:
                        el.click()
                        log(f"‚úÖ V√†o Password and security")
                        found_pwd = True
                except Exception:
                    try:
                        size = d.get_window_size()
                        for _ in range(5):
                            d.swipe(size["width"]//2, int(size["height"]*0.8), size["width"]//2, int(size["height"]*0.25), 300)
                            time.sleep(0.4)
                            if d.find_elements(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Password and security")'):
                                d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Password and security")').click()
                                log(f"‚úÖ V√†o Password and security (swipe fallback)")
                                found_pwd = True
                                break
                    except Exception:
                        pass
                if not found_pwd:
                    log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m·ª•c Password and security.")
                    return
                time.sleep(4)
                # 5) Two-factor authentication
                for txt in ["Two-factor authentication", "X√°c th·ª±c 2 y·∫øu t·ªë"]:
                    try:
                        d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")').click()
                        log(f"‚úÖ V√†o {txt}")
                        break
                    except Exception:
                        continue
                time.sleep(4)
                # 5) Ch·ªçn t√†i kho·∫£n trong Two-factor authentication
                try:
                    el = wait.until(EC.element_to_be_clickable((AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Instagram")')))
                    el.click()
                    log(f"‚úÖ Ch·ªçn account Instagram ƒë·ªÉ b·∫≠t 2FA")
                except Exception:
                    log(f"‚ö†Ô∏è Kh√¥ng ch·ªçn ƒë∆∞·ª£c account Instagram.")
                    return
                time.sleep(4)
                # 6) Ch·ªçn ph∆∞∆°ng th·ª©c Authentication app
                try:
                    el = wait.until(EC.element_to_be_clickable((AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Authentication app")')))
                    el.click()
                    log(f"‚úÖ Ch·ªçn ph∆∞∆°ng th·ª©c Authentication app")
                except Exception:
                    log(f"‚ö†Ô∏è Kh√¥ng ch·ªçn ƒë∆∞·ª£c Authentication app.")
                    return
                time.sleep(4)
                # 7) ·∫§n Next
                try:
                    el = wait.until(EC.element_to_be_clickable((AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Next")')))
                    el.click()
                    log(f"‚úÖ ·∫§n Next ƒë·ªÉ ti·∫øp t·ª•c")
                except Exception:
                    log(f"‚ö†Ô∏è Kh√¥ng ·∫•n ƒë∆∞·ª£c Next.")
                    return
                time.sleep(4)
                # 8) Copy key 2FA v√† l·∫•y t·ª´ clipboard
                secret_key = None
                try:
                    # ·∫§n Copy key
                    el = wait.until(EC.element_to_be_clickable(
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Copy key")')))
                    el.click()
                    time.sleep(8)

                    # L·∫•y secret t·ª´ clipboard
                    secret_key = (d.get_clipboard_text() or "").strip().replace(" ", "")
                    if secret_key:
                        log(f"üîë [{udid}] Secret 2FA t·ª´ clipboard: {secret_key}")
                    else:
                        log(f"‚ö†Ô∏è [{udid}] Clipboard tr·ªëng ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c secret.")
                        return
                except Exception as e:
                    log(f"‚ùå [{udid}] L·ªói l·∫•y secret 2FA: {e}")
                    return

                # 9) Sinh OTP t·ª´ secret key
                try:
                    totp = pyotp.TOTP(secret_key)
                    otp_code = totp.now()
                    log(f"‚úÖ [{udid}] OTP hi·ªán t·∫°i: {otp_code}")
                except Exception as e:
                    log(f"‚ùå [{udid}] Kh√¥ng sinh ƒë∆∞·ª£c OTP t·ª´ secret: {e}")
                    return

                # 10) ·∫§n Next ƒë·ªÉ sang b∆∞·ªõc nh·∫≠p OTP
                try:
                    el = wait.until(EC.element_to_be_clickable(
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Next")')))
                    el.click()
                    log(f"‚úÖ [{udid}] ·∫§n Next sau khi copy key")
                except Exception as e:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng ·∫•n ƒë∆∞·ª£c Next: {e}")
                    return

                time.sleep(4)

                # 11) Nh·∫≠p m√£ OTP 6 s·ªë v√†o √¥ "Enter code"
                try:
                    el = wait.until(EC.element_to_be_clickable(
                        (AppiumBy.CLASS_NAME, "android.widget.EditText")))
                    el.send_keys(str(otp_code))
                    log(f"‚úÖ [{udid}] ƒêi·ªÅn m√£ OTP {otp_code} v√†o √¥ Enter code")
                except Exception as e:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng ƒëi·ªÅn ƒë∆∞·ª£c OTP: {e}")
                    return

                time.sleep(4)

                # 12) ·∫§n Next
                try:
                    el = wait.until(EC.element_to_be_clickable(
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Next")')))
                    el.click()
                    log(f"‚úÖ [{udid}] ·∫§n Next ƒë·ªÉ ho√†n t·∫•t b·∫≠t 2FA")
                except Exception as e:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng ·∫•n ƒë∆∞·ª£c Next: {e}")
                    return

                time.sleep(10)

                # 13) ·∫§n Done ƒë·ªÉ ho√†n t·∫•t
                try:
                    el = wait.until(EC.element_to_be_clickable(
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Done")')))
                    el.click()
                    log(f"‚úÖ [{udid}] Ho√†n t·∫•t b·∫≠t 2FA (·∫•n Done)")
                except Exception as e:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng ·∫•n ƒë∆∞·ª£c Done: {e}")
                    return

                time.sleep(1.5)
            except Exception as e:
                log(f"‚ùå L·ªói b∆∞·ªõc b·∫≠t 2FA: {e}")

            # --- L∆∞u v√†o Live.txt (n·∫øu l√† Live, c√≥ th·ªÉ c√≥ 2FA) ---
            try:
                # Ch·ªâ l∆∞u secret_key v√†o c·ªôt 2FA, n·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ tr·ªëng ho√†n to√†n
                with open("Live.txt", "a", encoding="utf-8") as f:
                    f.write(f"{username_safe}|{password}|{email}|{current_cookie}|{secret_key if secret_key else ''}\n")
                log("üíæ ƒê√£ l∆∞u Live.txt")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi l∆∞u Live.txt: {repr(e)}")

            # --- Insert v√†o TreeView (n·∫øu l√† Live, c√≥ th·ªÉ c√≥ 2FA) ---
            try:
                # Ch·ªâ truy·ªÅn secret_key v√†o c·ªôt 2FA, n·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ tr·ªëng ho√†n to√†n
                app.after(0, lambda: insert_to_tree("Live", username_safe, password, email, current_cookie, two_fa_code=secret_key if secret_key else ""))
            except Exception:
                insert_to_tree("Live", username_safe, password, email, current_cookie, two_fa_code=secret_key if secret_key else "")
            time.sleep(4)
        
        # ==== PUSH 1 ·∫¢NH NG·∫™U NHI√äN V√ÄO PHONE + MEDIA SCAN (style AutoPhone) ====
        try:
            folder = globals().get("photo_folder_phone", "")
            if not folder or not os.path.isdir(folder):
                log("‚ö†Ô∏è Ch∆∞a ch·ªçn folder ·∫£nh (Phone).")
            else:
                pics = [f for f in os.listdir(folder) if f.lower().endswith((".jpg",".jpeg",".png"))]
                if not pics:
                    log("‚ö†Ô∏è Folder ·∫£nh kh√¥ng c√≥ file h·ª£p l·ªá.")
                else:
                    local_file = random.choice(pics)
                    local_path = os.path.join(folder, local_file)

                    # Th∆∞ m·ª•c ƒë√≠ch (n√™n l√† Pictures ho·∫∑c DCIM ƒë·ªÉ IG th·∫•y ngay)
                    remote_dir  = "/sdcard/Pictures/AutoPhone"
                    remote_path = f"{remote_dir}/{local_file}"  # gi·ªØ nguy√™n t√™n g·ªëc

                    # 1) ƒë·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
                    adb_mkdir(self.udid, remote_dir)

                    # 2) ƒë·∫©y file
                    out_push = adb_push(self.udid, local_path, remote_path)
                    if "error" in (out_push or "").lower():
                        log(f"‚ùå adb push l·ªói: {out_push}")
                    else:
                        # 3) √©p MediaScanner qu√©t l·∫°i
                        adb_media_scan(self.udid, remote_path)
                        log(f"‚úÖ ƒê√£ push & scan ·∫£nh: {remote_path}")

                    time.sleep(1.5)  # ƒë·ª£i Gallery c·∫≠p nh·∫≠t
        except Exception as e:
            log(f"‚ùå L·ªói khi push ·∫£nh: {e}")
        time.sleep(2)
        
        # --- T·∫Øt app Instagram ---
        subprocess.call(["adb", "-s", self.udid, "shell", "am", "force-stop", "com.instagram.android"])
        log("üõë ƒê√£ t·∫Øt app Instagram")
        time.sleep(3)

        # --- Kh·ªüi ƒë·ªông l·∫°i Instagram ---
        subprocess.call([
            "adb", "-s", self.udid, "shell", "monkey", "-p", "com.instagram.android", "-c", "android.intent.category.LAUNCHER", "1"
        ])
        log("üîÑ ƒê√£ m·ªü l·∫°i app Instagram")
        time.sleep(15)  # ch·ªù app load

        # --- V√†o Profile ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
        log("üë§ ƒê√£ v√†o Profile")
        time.sleep(4)

        # --- V·ªÅ Home ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "100", "1850"])
        log("üë§ ƒê√£ v·ªÅ l·∫°i Home")
        time.sleep(4)

        # --- V√†o Profile ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
        log("üë§ ƒê√£ v√†o Profile")
        time.sleep(10)

        if enable_uppost.get():
            # =================== UP POST ===================
            clicked = False
            # - C√°ch 1: Theo content-desc ph·ªï bi·∫øn
            for desc in ["New post", "Create", "+", "T·∫°o", "Th√™m"]:
                try:
                    plus_btn = d.find_element(
                        AppiumBy.ANDROID_UIAUTOMATOR,
                        f'new UiSelector().description("{desc}")'
                    )
                    if plus_btn.is_displayed() and plus_btn.is_enabled():
                        plus_btn.click()
                        log(f"‚úÖ ƒê√£ nh·∫•n n√∫t + (content-desc='{desc}')")
                        clicked = True
                        break
                except Exception:
                    continue

            # - C√°ch 2: Theo resource-id
            if not clicked:
                try:
                    el = d.find_element(AppiumBy.ID, "com.instagram.android:id/creation_tab")
                    if el.is_displayed() and el.is_enabled():
                        el.click()
                        log("‚úÖ ƒê√£ nh·∫•n n√∫t + (resource-id=creation_tab, thanh d∆∞·ªõi)")
                        clicked = True
                    else:
                        log("‚ùå N√∫t + (creation_tab) kh√¥ng hi·ªÉn th·ªã ho·∫∑c kh√¥ng click ƒë∆∞·ª£c")
                except Exception:
                    log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t + b·∫±ng resource-id")

            # - C√°ch 3: Theo n√∫t + ·ªü g√≥c tr√°i
            if not clicked:
                try:
                    el = d.find_element(
                        AppiumBy.XPATH,
                        '//android.widget.LinearLayout[@resource-id="com.instagram.android:id/left_action_bar_buttons"]/android.widget.ImageView'
                    )
                    if el.is_displayed() and el.is_enabled():
                        el.click()
                        log("‚úÖ ƒê√£ nh·∫•n n√∫t + ·ªü g√≥c tr√°i")
                        clicked = True
                    else:
                        log("‚ùå N√∫t + ·ªü g√≥c tr√°i kh√¥ng hi·ªÉn th·ªã ho·∫∑c kh√¥ng click ƒë∆∞·ª£c")
                except Exception:
                    log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t + ·ªü g√≥c tr√°i")

            # - C√°ch 4: Theo n√∫t + ·ªü g√≥c ph·∫£i
            if not clicked:
                try:
                    els_right = d.find_elements(
                        AppiumBy.XPATH,
                        '//android.widget.LinearLayout[@resource-id="com.instagram.android:id/right_action_bar_buttons"]/android.widget.ImageView'
                    )
                    if len(els_right) >= 2:
                        el = els_right[1]
                        if el.is_displayed() and el.is_enabled():
                            el.click()
                            log("‚úÖ ƒê√£ nh·∫•n n√∫t + ·ªü g√≥c ph·∫£i")
                            clicked = True
                        else:
                            log("‚ùå N√∫t + ·ªü g√≥c ph·∫£i kh√¥ng hi·ªÉn th·ªã ho·∫∑c kh√¥ng click ƒë∆∞·ª£c")
                    else:
                        log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªß n√∫t trong right_action_bar_buttons")
                except Exception as e:
                    log(f"‚ö†Ô∏è L·ªói khi t√¨m n√∫t + ·ªü g√≥c ph·∫£i: {e}")

            if not clicked:
                log("‚ùå Kh√¥ng th·ªÉ nh·∫•n ƒë∆∞·ª£c n√∫t + ·ªü b·∫•t k·ª≥ v·ªã tr√≠ n√†o")

            # - C√°ch 5: Dump + Ph√¢n t√≠ch XML + Nh·∫•n n√∫t + (fallback th√¥ng minh)
            if not clicked:
                try:
                    log("[INFO] Kh√¥ng t√¨m th·∫•y n√∫t + b·∫±ng 3 c√°ch tr√™n. ƒêang th·ª≠ Dump + Ph√¢n t√≠ch UI...")

                    # üì§ 1Ô∏è‚É£ Dump UI t·ª´ thi·∫øt b·ªã
                    XML_PATH_PHONE = "/sdcard/window_dump.xml"
                    XML_PATH_PC = r"C:\Users\MINH\Downloads\AutoTool\ui.xml"
                    subprocess.run(["adb", "-s", udid, "shell", "uiautomator", "dump", XML_PATH_PHONE], stdout=subprocess.DEVNULL)
                    subprocess.run(["adb", "-s", udid, "pull", XML_PATH_PHONE, XML_PATH_PC], stdout=subprocess.DEVNULL)

                    x_center, y_center = None, None

                    # üîç 2Ô∏è‚É£ Ph√¢n t√≠ch file XML ƒë·ªÉ t√¨m v·ªã tr√≠ n√∫t +
                    if os.path.exists(XML_PATH_PC):
                        with open(XML_PATH_PC, "r", encoding="utf-8") as f:
                            xml_content = f.read()

                        # T√¨m node c√≥ content-desc ch·ª©a "Create" v√† l·∫•y bounds
                        match = re.search(
                            r'content-desc="([^"]*Create[^"]*)"[\s\S]*?bounds="\[(\d+),(\d+)\]\[(\d+),(\d+)\]"',
                            xml_content
                        )
                        if match:
                            desc, x1, y1, x2, y2 = match.groups()
                            x_center = (int(x1) + int(x2)) // 2
                            y_center = (int(y1) + int(y2)) // 2
                            log(f"[‚úÖ] ƒê√£ ph√°t hi·ªán n√∫t '+' trong XML: desc='{desc}', t·ªça ƒë·ªô=({x_center},{y_center})")

                            # üñ±Ô∏è 3Ô∏è‚É£ Th·ª≠ click b·∫±ng content-desc n·∫øu c√≥
                            try:
                                element = d.find_element(AppiumBy.ACCESSIBILITY_ID, desc)
                                element.click()
                                log("[‚úÖ] ƒê√£ click n√∫t '+' b·∫±ng accessibility id!")
                                clicked = True
                            except Exception:
                                log("[‚ö†Ô∏è] Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ b·∫±ng desc, fallback v·ªÅ t·ªça ƒë·ªô...")

                        # üñ±Ô∏è 4Ô∏è‚É£ Fallback: click theo t·ªça ƒë·ªô n·∫øu c√≥
                        if not clicked and x_center and y_center:
                            try:
                                d.execute_script("mobile: clickGesture", {"x": x_center, "y": y_center})
                                log(f"[‚úÖ] ƒê√£ click n√∫t '+' b·∫±ng t·ªça ƒë·ªô fallback t·∫°i ({x_center}, {y_center})")
                                clicked = True
                            except Exception as e:
                                log(f"‚ùå Kh√¥ng th·ªÉ click b·∫±ng t·ªça ƒë·ªô fallback: {e}")
                    else:
                        log("‚ùå Kh√¥ng t√¨m th·∫•y file XML sau khi dump!")

                    # üßπ 5Ô∏è‚É£ X√≥a file XML sau khi d√πng xong
                    if os.path.exists(XML_PATH_PC):
                        os.remove(XML_PATH_PC)
                        log("[üßπ] ƒê√£ x√≥a file ui.xml sau khi ho√†n t·∫•t.")
                except Exception as e:
                    log(f"‚ö†Ô∏è L·ªói khi th·ª≠ c√°ch Dump + Ph√¢n t√≠ch XML: {e}")

            time.sleep(7)

            # 4. Ki·ªÉm tra xem c√≥ m·ª•c Post kh√¥ng
            if clicked:
                try:
                    post_el = d.find_element(
                        AppiumBy.XPATH,
                        '//android.widget.TextView[@text="Post"]'
                    )
                    post_el.click()
                    log("‚úÖ ƒê√£ nh·∫•n v√†o m·ª•c Post")
                    time.sleep(7)
                except Exception:
                    log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m·ª•c Post, b·ªè qua")
            else:
                log("‚ùå Kh√¥ng nh·∫•n ƒë∆∞·ª£c n√∫t + n√†o")
                    
            # 5. ·∫§n Next 
            for _ in range(2):
                clicked_next = False
                for txt in ["Next", "Ti·∫øp"]:
                    try:
                        d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")').click()
                        clicked_next = True
                        time.sleep(4)
                        break
                    except Exception:
                        continue
                if not clicked_next:
                    break
            time.sleep(8)

            # 6 N·∫øu xu·∫•t hi·ªán popup "Sharing posts" th√¨ b·∫•m OK
            try:
                ok_btn = wait.until(
                    EC.element_to_be_clickable(
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text("OK")')
                    )
                )
                if ok_btn.is_displayed():
                    ok_btn.click()
                    log(f"‚ÑπÔ∏è [{udid}] ƒê√£ b·∫•m OK trong popup Sharing posts.")
                    time.sleep(0.8)
            except Exception:
                pass
            time.sleep(3)

            # 7 ƒêi·ªÅn caption v√†o √¥ "Add a caption..."
            try:
                caption = (
                    random.choice(CAPTION_LEADS) + " "
                    + random.choice(CAPTION_TRAILS) + " "
                    + random.choice(CAPTION_EMOJIS)
                )
                # T√¨m √¥ nh·∫≠p caption (th∆∞·ªùng l√† EditText ƒë·∫ßu ti√™n)
                caption_input = d.find_element(AppiumBy.CLASS_NAME, "android.widget.EditText")
                caption_input.clear()
                caption_input.send_keys(caption)
                log(f"‚úÖ ƒê√£ ƒëi·ªÅn caption: {caption}")
                time.sleep(1.5)
            except Exception as e:
                log(f"‚ö†Ô∏è Kh√¥ng ƒëi·ªÅn ƒë∆∞·ª£c caption: {e}")
            time.sleep(3)

            # 8 ·∫§n Share
            shared = False
            for txt in ["Share", "Chia s·∫ª", "ƒêƒÉng"]:
                try:
                    d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")').click()
                    shared = True
                    break
                except Exception:
                    continue

            if shared:
                log(f"‚úÖ [{udid}] ƒê√£ ƒëƒÉng b√†i m·ªõi.")
            else:
                log(f"‚ö†Ô∏è [{udid}] Kh√¥ng b·∫•m ƒë∆∞·ª£c n√∫t Share/Chia s·∫ª.")
            time.sleep(15)
            
        if enable_autofollow.get():  
            # AuTo Follow
            clicked = False
            # 1. Th·ª≠ theo content-desc "Search and explore"
            try:
                el = d.find_element(AppiumBy.ACCESSIBILITY_ID, "Search and explore")
                el.click()
                log("‚úÖ ƒê√£ nh·∫•n n√∫t k√≠nh l√∫p (Search and explore)")
                clicked = True
            except Exception:
                log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t k√≠nh l√∫p b·∫±ng content-desc 'Search and explore'")

            # 2. Th·ª≠ theo content-desc "Search"
            if not clicked:
                try:
                    el = d.find_element(AppiumBy.ACCESSIBILITY_ID, "Search")
                    el.click()
                    log("‚úÖ ƒê√£ nh·∫•n n√∫t k√≠nh l√∫p (Search)")
                    clicked = True
                except Exception:
                    log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t k√≠nh l√∫p b·∫±ng content-desc 'Search'")

            # 3. Th·ª≠ b·∫±ng UiAutomator textContains
            if not clicked:
                try:
                    el = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().descriptionContains("Search")')
                    el.click()
                    log("‚úÖ ƒê√£ nh·∫•n n√∫t k√≠nh l√∫p (descriptionContains 'Search')")
                    clicked = True
                except Exception:
                    log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t k√≠nh l√∫p b·∫±ng descriptionContains 'Search'")

            time.sleep(4)

            # 1. T√¨m √¥ nh·∫≠p Search
            input_box = None
            for how, what in [
                (AppiumBy.ID, "com.instagram.android:id/action_bar_search_edit_text"),
                (AppiumBy.CLASS_NAME, "android.widget.EditText"),
            ]:
                try:
                    input_box = d.find_element(how, what)
                    input_box.click()
                    time.sleep(4)
                    break
                except Exception:
                    continue

            if not input_box:
                log("‚ùå Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p Search")
            else:
                # 2. L·∫•y s·ªë l∆∞·ª£ng follow t·ª´ bi·∫øn UI
                try:
                    follow_count = phone_follow_count_var.get()
                except Exception:
                    follow_count = 10

                FOLLOW_USERNAMES = [
                    "n.nhu1207","v.anh.26","shxuy0bel421162","k.mbappe","valentin_otz","shx_pe06","nguyen57506",
                    "mhai_187","ductoan1103","therock","eveil_tangyuan412","lunaistabby","fandango","uncle_bbao",
                    "monkeycatluna",
                ]
                follow_list = random.sample(FOLLOW_USERNAMES, min(follow_count, len(FOLLOW_USERNAMES)))
                followed = 0

                for username in follow_list:
                    # T√¨m l·∫°i √¥ nh·∫≠p Search
                    input_box = None
                    for how, what in [
                        (AppiumBy.ID, "com.instagram.android:id/action_bar_search_edit_text"),
                        (AppiumBy.CLASS_NAME, "android.widget.EditText"),
                    ]:
                        try:
                            input_box = d.find_element(how, what)
                            input_box.click()
                            break
                        except Exception:
                            continue

                    if not input_box:
                        log("‚ùå Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p Search khi follow username m·ªõi")
                        continue

                    # Nh·∫≠p username (send_keys fallback set_value)
                    try:
                        input_box.clear()
                    except Exception:
                        pass
                    try:
                        input_box.send_keys(username)
                        log(f"‚å®Ô∏è Nh·∫≠p username b·∫±ng send_keys: {username}")
                    except Exception:
                        try:
                            d.set_value(input_box, username)
                            log(f"‚å®Ô∏è Nh·∫≠p username b·∫±ng set_value: {username}")
                        except Exception as e:
                            log(f"‚ùå Kh√¥ng nh·∫≠p ƒë∆∞·ª£c {username}: {e}")
                            continue
                    time.sleep(5)

                    # T√¨m ƒë√∫ng username trong k·∫øt qu·∫£
                    found = False
                    results = d.find_elements(AppiumBy.ID, "com.instagram.android:id/row_search_user_username")
                    if not results:
                        results = d.find_elements(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{username}")')
                    for el in results:
                        try:
                            t = (el.text or "").strip()
                            if t.lower() == username.lower() or username.lower() in t.lower():
                                el.click()
                                log(f"‚úÖ ƒê√£ nh·∫•n v√†o username: {username}")
                                found = True
                                break
                        except Exception:
                            continue

                    if not found:
                        log(f"‚ùå Kh√¥ng t√¨m th·∫•y username {username} trong k·∫øt qu·∫£ t√¨m ki·∫øm")
                        continue

                    time.sleep(5)

                    # Nh·∫•n n√∫t Follow
                    try:
                        follow_btn = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text("Follow")')
                        if follow_btn.is_enabled() and follow_btn.is_displayed():
                            follow_btn.click()
                            log(f"‚úÖ ƒê√£ nh·∫•n Follow cho {username}")
                            time.sleep(3)
                            followed += 1

                            # --- Ki·ªÉm tra popup block follow ---
                            try:
                                popup = d.find_elements(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Try Again Later")')
                                if popup:
                                    log("‚õî Instagram ƒë√£ block follow: Try Again Later popup xu·∫•t hi·ªán.")
                                    # ·∫§n OK ƒë·ªÉ ƒë√≥ng popup
                                    try:
                                        ok_btn = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text("OK")')
                                        ok_btn.click()
                                        log("‚úÖ ƒê√£ ·∫•n OK ƒë·ªÉ ƒë√≥ng popup block follow.")
                                    except Exception:
                                        log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t OK trong popup.")
                                    break  # D·ª´ng thao t√°c follow ti·∫øp
                            except Exception as e:
                                log(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra popup block follow: {e}")
                            time.sleep(2)

                            # --- Back sau khi follow ---
                            back_clicked = False
                            try:
                                for desc in ["Back", "ƒêi·ªÅu h∆∞·ªõng l√™n"]:
                                    try:
                                        back_btn = d.find_element(AppiumBy.ACCESSIBILITY_ID, desc)
                                        back_btn.click()
                                        log(f"üîô ƒê√£ nh·∫•n n√∫t m≈©i t√™n l√πi ({desc})")
                                        back_clicked = True
                                        time.sleep(2)
                                        break
                                    except Exception:
                                        continue
                                if not back_clicked:
                                    btns = d.find_elements(AppiumBy.CLASS_NAME, "android.widget.ImageButton")
                                    if btns:
                                        btns[0].click()
                                        log("üîô ƒê√£ nh·∫•n n√∫t m≈©i t√™n l√πi")
                                        back_clicked = True
                                        time.sleep(2)
                                if not back_clicked:
                                    d.back()
                                    log("üîô ƒê√£ ·∫§n Back")
                                    time.sleep(2)
                            except Exception:
                                log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t m≈©i t√™n l√πi sau khi Follow")
                        else:
                            log(f"‚ùå N√∫t Follow kh√¥ng kh·∫£ d·ª•ng tr√™n profile {username}")
                    except Exception:
                        log(f"‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Follow tr√™n profile {username}")

                    # N·∫øu ƒë√£ ƒë·ªß s·ªë l∆∞·ª£ng th√¨ d·ª´ng
                    if followed >= follow_count:
                        break
        # --- Back sau khi follow ƒë·ªß ---
        back_clicked = False
        try:
            for desc in ["Back", "ƒêi·ªÅu h∆∞·ªõng l√™n"]:
                try:
                    back_btn = d.find_element(AppiumBy.ACCESSIBILITY_ID, desc)
                    back_btn.click()
                    log(f"üîô ƒê√£ nh·∫•n n√∫t m≈©i t√™n l√πi ({desc})")
                    back_clicked = True
                    time.sleep(2)
                    break
                except Exception:
                    continue
            if not back_clicked:
                btns = d.find_elements(AppiumBy.CLASS_NAME, "android.widget.ImageButton")
                if btns:
                    btns[0].click()
                    log("üîô ƒê√£ nh·∫•n n√∫t m≈©i t√™n l√πi")
                    back_clicked = True
                    time.sleep(2)
            if not back_clicked:
                d.back()
                log("üîô ƒê√£ ·∫§n Back")
                time.sleep(2)
        except Exception:
            log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t m≈©i t√™n l√πi sau khi Follow")
        if enable_editprofile.get():
            # --- V√†o Profile ---
            subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
            log("üë§ ƒê√£ v√†o Profile")
            time.sleep(10)
            # Nh·∫•n Edit profile
            try:
                log("ƒêang t√¨m n√∫t 'Edit profile'...")
                edit_profile_btn = None
                try:
                    edit_profile_btn = WebDriverWait(d, 8).until(
                        EC.presence_of_element_located((
                            AppiumBy.ANDROID_UIAUTOMATOR,
                            'new UiSelector().text("Edit profile")'
                        ))
                    )
                except Exception:
                    log("[ERROR] Kh√¥ng t√¨m th·∫•y n√∫t 'Edit profile'.")
                    return
                if edit_profile_btn:
                    edit_profile_btn.click()
                    log("ƒê√£ nh·∫•n n√∫t 'Edit profile'.")
                    time.sleep(5)
                else:
                    log("L·ªói Kh√¥ng t√¨m th·∫•y n√∫t 'Edit profile'.")
            except Exception as e:
                log(f"L·ªói khi nh·∫•n n√∫t 'Edit profile': {e}")

            # N·∫øu kh√¥ng ph·∫£i Share profile, th√¨ check popup avatar
            try:
                notnow = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR,
                                        'new UiSelector().textContains("Not now")')
                notnow.click()
                log("‚úÖ ƒê√£ ·∫•n Not now ·ªü popup t·∫°o avatar")
            except Exception:
                pass  # Kh√¥ng c√≥ popup th√¨ b·ªè qua
            
            # UP AVATAR 
            # 1. T√¨m v√† ·∫•n v√†o "Change profile picture"
            el = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Change profile picture")')
            el.click()
            log("‚úÖ ƒê√£ nh·∫•n Change profile picture")
            time.sleep(3)

            # 2. Ch·ªçn "Choose from library"
            choose = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Choose from library")')
            choose.click()
            log("‚úÖ ƒê√£ ch·ªçn Choose from library")
            time.sleep(6)

            # 3. ·∫§n "Done" (g√≥c ph·∫£i tr√™n)
            for txt in ["Done", "Next", "Ti·∫øp", "Xong", "L∆∞u"]:
                try:
                    d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")').click()
                    break
                except Exception:
                    pass
            time.sleep(13)

            # Nh·∫•n Edit profile
            try:
                log("ƒêang t√¨m n√∫t 'Edit profile'...")
                edit_profile_btn = None
                try:
                    edit_profile_btn = WebDriverWait(d, 8).until(
                        EC.presence_of_element_located((
                            AppiumBy.ANDROID_UIAUTOMATOR,
                            'new UiSelector().text("Edit profile")'
                        ))
                    )
                except Exception:
                    log("L·ªói Kh√¥ng t√¨m th·∫•y n√∫t 'Edit profile'.")
                    return
                if edit_profile_btn:
                    edit_profile_btn.click()
                    log("ƒê√£ nh·∫•n n√∫t 'Edit profile'.")
                    time.sleep(5)
                else:
                    log("L·ªói Kh√¥ng t√¨m th·∫•y n√∫t 'Edit profile'.")
            except Exception as e:
                log(f"L·ªói khi nh·∫•n n√∫t 'Edit profile': {e}")

            # ƒêi·ªÅn BIO 
            # 1. ·∫§n v√†o label Bio
            el = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Bio")')
            el.click()
            log("‚úÖ ƒê√£ nh·∫•n v√†o label Bio")
            time.sleep(3)

            # 2. T·∫°o bio ng·∫´u nhi√™n t·ª´ BIO_LINES + emoji
            bio = random.choice(BIO_LINES) + " " + random.choice(CAPTION_EMOJIS)
            time.sleep(3)

            # 3. ƒêi·ªÅn bio v√†o √¥ nh·∫≠p
            input_bio = d.find_element(AppiumBy.CLASS_NAME, "android.widget.EditText")
            input_bio.clear()
            input_bio.send_keys(bio)
            log(f"‚úÖ ƒê√£ ƒëi·ªÅn bio: {bio}")
            time.sleep(3)

            # 4) L∆∞u: icon ‚úì g√≥c tr√™n ph·∫£i ho·∫∑c n√∫t Save/Xong/L∆∞u
            saved = False
            # a) th·ª≠ theo text
            for txt in ["Save", "L∆∞u", "Done", "Xong", "‚úì"]:
                try:
                    d.find_element(
                        AppiumBy.ANDROID_UIAUTOMATOR,
                        f'new UiSelector().textContains("{txt}")'
                    ).click()
                    saved = True
                    break
                except Exception:
                    pass
            # b) th·ª≠ content-desc c·ªßa icon ‚úì
            if not saved:
                for how, what in [
                    (AppiumBy.ACCESSIBILITY_ID, "Done"),
                    (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().descriptionContains("Done")'),
                    (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().descriptionMatches("(?i)(save|done|xong|l∆∞u|check)")'),
                ]:
                    try:
                        el = d.find_element(how, what)
                        el.click()
                        saved = True
                        break
                    except Exception:
                        continue

            if saved:
                log(f"‚úÖ [{udid}] ƒê√£ c·∫≠p nh·∫≠t Bio")
            else:
                log(f"‚ö†Ô∏è [{udid}] Kh√¥ng b·∫•m ƒë∆∞·ª£c n√∫t L∆∞u/‚úì trong m√†n Bio.")

            time.sleep(6)

            # Ch·ªçn Gender 
            # 1. Cu·ªôn xu·ªëng ƒë·ªÉ th·∫•y label Gender (n·∫øu c·∫ßn)
            d.swipe(500, 1500, 500, 500, 500)  # ƒêi·ªÅu ch·ªânh t·ªça ƒë·ªô n·∫øu c·∫ßn
            time.sleep(3)

            # 2. ·∫§n v√†o label Gender (Prefer not to say)
            el = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Prefer not to say")')
            el.click()
            log("‚úÖ ƒê√£ nh·∫•n v√†o label Gender")
            time.sleep(3)

            # 3. Ch·ªçn Female
            female = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Female")')
            female.click()
            log("‚úÖ ƒê√£ ch·ªçn Female")

            time.sleep(0.5)

            # 6) L∆∞u: icon ‚úì g√≥c tr√™n ph·∫£i ho·∫∑c n√∫t Save/Xong/L∆∞u
            saved = False
            # a) th·ª≠ theo text
            for txt in ["Save", "L∆∞u", "Done", "Xong", "‚úì"]:
                try:
                    d.find_element(
                        AppiumBy.ANDROID_UIAUTOMATOR,
                        f'new UiSelector().textContains("{txt}")'
                    ).click()
                    saved = True
                    break
                except Exception:
                    pass
            # b) th·ª≠ content-desc c·ªßa icon ‚úì
            if not saved:
                for how, what in [
                    (AppiumBy.ACCESSIBILITY_ID, "Done"),
                    (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().descriptionContains("Done")'),
                    (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().descriptionMatches("(?i)(save|done|xong|l∆∞u|check)")'),
                ]:
                    try:
                        el = d.find_element(how, what)
                        el.click()
                        saved = True
                        break
                    except Exception:
                        continue

            if saved:
                log(f"‚úÖ [{udid}] ƒê√£ c·∫≠p nh·∫≠t Bio")
            else:
                log(f"‚ö†Ô∏è [{udid}] Kh√¥ng b·∫•m ƒë∆∞·ª£c n√∫t L∆∞u/‚úì trong m√†n Gender.")
            time.sleep(6)
            
        if enable_proaccount.get():
            # B·∫≠t Chuy√™n Nghi·ªáp 
            # Ch·ªçn switch to Pro Account trong Settings 
            # 1. Cu·ªôn xu·ªëng ƒë·ªÉ th·∫•y switch sang Pro Account (n·∫øu c·∫ßn)
            d.swipe(500, 1500, 500, 500, 500) 
            time.sleep(5)

            # 2) Cu·ªôn v√† b·∫•m "Switch to professional account"
            if not _scroll_into_view_by_text(d, "Switch to professional"):
                log(f"‚ö†Ô∏è [{udid}] Kh√¥ng t√¨m th·∫•y m·ª•c 'Switch to professional account'.")
                return
            wait.until(EC.element_to_be_clickable(
                (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Switch to professional")'))
            ).click()
            time.sleep(10)

            # 3) M√†n gi·ªõi thi·ªáu ‚Üí Next
            for txt in ["Next", "Ti·∫øp"]:
                try:
                    d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().text("{txt}")').click()
                    break
                except Exception:
                    pass
            time.sleep(6)

            # 4) M√†n "What best describes you?" ‚Üí ch·ªçn Category
            # 4a) Tap v√†o √¥ "Search categories" (ho·∫∑c "Search")
            try:
                wait.until(EC.element_to_be_clickable(
                    (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Search")')
                )).click()
            except Exception:
                # n·∫øu kh√¥ng b·∫•m ƒë∆∞·ª£c √¥ search, v·∫´n c√≥ th·ªÉ ch·ªçn tr·ª±c ti·∫øp trong list
                pass

            # 4b) L·∫•y gi√° tr·ªã category v√† account_type t·ª´ settings UI
            category = pro_category_var.get() if 'pro_category_var' in globals() else "Reel creator"
            account_type = pro_type_var.get() if 'pro_type_var' in globals() else "Creator"

            target = (category or "").strip()
            if target:
                if not _scroll_into_view_by_text(d, target):
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng t√¨m th·∫•y category '{target}'.")
                    return
                # ch·ªçn ƒë√∫ng item
                wait.until(EC.element_to_be_clickable(
                    (AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().text("{target}")'))
                ).click()
                time.sleep(4)

            #Tap display on profile
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "970", "900"])
            log("‚úÖ Tap Display On Profile")
            time.sleep(4)

            # 4d) B·∫•m "Switch to professional account"
            for txt in ["Switch to professional account"]:
                try:
                    if not _scroll_into_view_by_text(d, txt, max_swipes=2):
                        pass
                    d.find_element(
                        AppiumBy.ANDROID_UIAUTOMATOR,
                        f'new UiSelector().textContains("{txt}")'
                    ).click()
                    break
                except Exception:
                    continue
            time.sleep(12)

            # 5) M√†n "What type of professional are you?" ‚Üí ch·ªçn Creator/Business ‚Üí Next
            typ = (account_type or "").strip().lower()
            target_type = "Creator" if typ != "business" else "Business"
            try:
                wait.until(EC.element_to_be_clickable(
                    (AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().text("{target_type}")'))
                ).click()
            except Exception:
                d.find_element(
                    AppiumBy.ANDROID_UIAUTOMATOR,
                    f'new UiSelector().textContains("{target_type}")'
                ).click()
            time.sleep(0.3)
            for txt in ["Next", "Ti·∫øp"]:
                try:
                    d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().text("{txt}")').click()
                    break
                except Exception:
                    pass

            log(f"‚úÖ [{udid}] ƒê√£ chuy·ªÉn sang Professional: Category='{category}', Type={target_type}.")

        # B·∫≠t ch·∫ø ƒë·ªô m√°y bay v√† t·ª± ch·∫°y l·∫°i phi√™n m·ªõi
        try:
            adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
            adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
            adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
            adb_shell(self.udid, "svc", "wifi", "disable")
            adb_shell(self.udid, "svc", "data", "disable")
            log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (LIVE)")
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (LIVE): {e}")

        # Restart ngay l·∫≠p t·ª©c
        self.log("üîÑ Restart phi√™n v√¨ Live‚Ä¶")
        self.stop()
        time.sleep(3)
        AndroidWorker(self.udid, log_fn=self.log).start()
        return True

    # ================================== SIGNUP ‚Äì INSTAGRAM LITE ===============================================
    def signup_instagram_lite(self):
        d, log = self.driver, self.log
        time.sleep(2.5)  # ch·ªù UI ·ªïn ƒë·ªãnh h∆°n
        
        # --- Nh·∫•n "Create new account" ---
        try:
            groups = d.find_elements(AppiumBy.CLASS_NAME, "android.view.ViewGroup")
            clickable_groups = [g for g in groups if g.get_attribute("clickable") == "true"]

            if len(clickable_groups) >= 2:
                # N√∫t "Create new account" th∆∞·ªùng n·∫±m ngay tr∆∞·ªõc n√∫t "Log in"
                target = clickable_groups[-2]
                target.click()
                log("üëâ ƒê√£ b·∫•m 'Create new account' (Instagram Lite)")
                time.sleep(2)
            else:
                log("‚õî Kh√¥ng t√¨m th·∫•y ƒë·ªß ViewGroup clickable ƒë·ªÉ ch·ªçn 'Create new account'.")
                return False
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·∫•m 'Create new account': {repr(e)}")
            return False

        time.sleep(6)

        # --- Nh·∫•n "Sign up with email" ---
        try:
            groups = d.find_elements(AppiumBy.CLASS_NAME, "android.view.ViewGroup")
            clickable_groups = [g for g in groups if g.get_attribute("clickable") == "true"]

            if len(clickable_groups) >= 2:
                # N√∫t "Sign up with email" th∆∞·ªùng l√† clickable k·∫ø cu·ªëi (tr∆∞·ªõc "Log in")
                clickable_groups[-2].click()
                log("üëâ ƒê√£ b·∫•m 'Sign up with email'")
                time.sleep(2)
            else:
                log("‚õî Kh√¥ng t√¨m th·∫•y ƒë·ªß ViewGroup clickable ƒë·ªÉ ch·ªçn 'Sign up with email'.")
                return False
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·∫•m 'Sign up with email': {repr(e)}")
            return False

        time.sleep(4)

        # --- L·∫•y email t·∫°m ---
        try:
            email, drop_session_id, source = fetch_signup_email(self)
        except NameError:
            try:
                mode = self.var_mail_src.get().strip().lower()
            except Exception:
                mode = "tempasia"

            if mode == "dropmail":
                email, drop_session_id = get_dropmail_email()
                source = "dropmail"
            else:
                email = get_tempasia_email()
                drop_session_id = None
                source = "tempasia"

        if not email:
            log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c email t·∫°m.")
            return False

        # --- ƒêi·ªÅn email v√†o √¥ nh·∫≠p ---
        try:
            input_box = WebDriverWait(d, 10).until(
                EC.presence_of_element_located((AppiumBy.CLASS_NAME, "android.widget.MultiAutoCompleteTextView"))
            )
            input_box.click()
            input_box.clear()
            input_box.send_keys(email)
            log(f"üëâ ƒê√£ ƒëi·ªÅn email: {email}")
            time.sleep(1)

            # --- Nh·∫•n Next ---
            # T√¨m ViewGroup clickable n·∫±m ngay d∆∞·ªõi √¥ nh·∫≠p email (c√°i g·∫ßn nh·∫•t)
            groups = d.find_elements(AppiumBy.CLASS_NAME, "android.view.ViewGroup")
            clickable_groups = [g for g in groups if g.get_attribute("clickable") == "true"]

            # L·∫•y center Y c·ªßa input_box
            bounds_input = input_box.get_attribute("bounds")
            nums_input = [int(n) for n in re.findall(r"\d+", bounds_input)]
            y_input = (nums_input[1] + nums_input[3]) // 2

            # Ch·ªçn ViewGroup clickable c√≥ center Y > y_input v√† diff nh·ªè nh·∫•t (ngay d∆∞·ªõi)
            next_btn = None
            min_diff = None
            for g in clickable_groups:
                try:
                    bounds = g.get_attribute("bounds")
                    nums = [int(n) for n in re.findall(r"\d+", bounds)]
                    y_center = (nums[1] + nums[3]) // 2
                    if y_center > y_input:
                        diff = y_center - y_input
                        if min_diff is None or diff < min_diff:
                            min_diff = diff
                            next_btn = g
                except Exception:
                    continue

            if next_btn:
                next_btn.click()
                log("üëâ ƒê√£ b·∫•m 'Next' (ViewGroup ngay d∆∞·ªõi √¥ nh·∫≠p email)")
                time.sleep(2)
            else:
                log("‚õî Kh√¥ng t√¨m th·∫•y n√∫t Next (ViewGroup d∆∞·ªõi √¥ nh·∫≠p email).")
                return False

        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi ƒëi·ªÅn email v√† nh·∫•n Next: {repr(e)}")
            return False

        time.sleep(13)

        # ------ L·∫•y Code Mail V√† ƒêi·ªÅn =============
        code = None
        # Ch·ªù m√£ x√°c minh t·ª´ email t·∫°m (DropMail ho·∫∑c TempAsia)
        try:
            if source == "dropmail":
                code = wait_for_dropmail_code(self, drop_session_id, max_checks=30, interval=3)
            else:
                code = wait_for_tempmail_code(email, max_checks=30, interval=2)
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi l·∫•y m√£ x√°c minh email: {repr(e)}")
            code = None

        if not code:
            log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ x√°c minh t·ª´ email.")
            return False

        log(f"‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c m√£ x√°c minh: {code}")

        # T√¨m √¥ nh·∫≠p code v√† ƒëi·ªÅn v√†o
        try:
            udid = self.udid if hasattr(self, 'udid') else None
            if udid:
                subprocess.call(["adb", "-s", udid, "shell", "input", "text", str(code)])
                log("‚úÖ ƒê√£ d√°n m√£ x√°c minh b·∫±ng ADB input text")
                time.sleep(3)
            else:
                log("‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c udid ƒë·ªÉ d√°n code.")
        except Exception as e:
            log(f"‚ùå Kh√¥ng d√°n ƒë∆∞·ª£c m√£ x√°c minh: {repr(e)}")
            return False
        # Nh·∫•n Next sau khi ƒëi·ªÅn code
        # --- Nh·∫•n Next ---
        groups = d.find_elements(AppiumBy.CLASS_NAME, "android.view.ViewGroup")
        clickable_groups = [g for g in groups if g.get_attribute("clickable") == "true"]

        # L·∫•y center Y c·ªßa input_box
        bounds_input = input_box.get_attribute("bounds")
        nums_input = [int(n) for n in re.findall(r"\d+", bounds_input)]
        y_input = (nums_input[1] + nums_input[3]) // 2

        # Ch·ªçn ViewGroup clickable c√≥ center Y > y_input v√† diff nh·ªè nh·∫•t (ngay d∆∞·ªõi)
        next_btn = None
        min_diff = None
        for g in clickable_groups:
            try:
                bounds = g.get_attribute("bounds")
                nums = [int(n) for n in re.findall(r"\d+", bounds)]
                y_center = (nums[1] + nums[3]) // 2
                if y_center > y_input:
                    diff = y_center - y_input
                    if min_diff is None or diff < min_diff:
                        min_diff = diff
                        next_btn = g
            except Exception:
                continue

        if next_btn:
            next_btn.click()
            log("üëâ ƒê√£ b·∫•m 'Next' (ViewGroup ngay d∆∞·ªõi √¥ nh·∫≠p email)")
            time.sleep(12)
        else:
            log("‚õî Kh√¥ng t√¨m th·∫•y n√∫t Next (ViewGroup d∆∞·ªõi √¥ nh·∫≠p email).")
            return False

        # ================= Nh·∫≠p Full Name v√† Password =================
        log("‚úèÔ∏è B·∫Øt ƒë·∫ßu ƒëi·ªÅn h·ªç t√™n v√† m·∫≠t kh·∫©u (ADB CMD)...")

        try:
            # üìå Ch·ªù m√†n h√¨nh "Name and Password" xu·∫•t hi·ªán
            time.sleep(5)

            # ======= Sinh h·ªç t√™n KH√îNG D·∫§U ƒë·ªÉ ADB g√µ ƒë∆∞·ª£c =======
            ho_list = ["Nguyen", "Tran", "Le", "Pham", "Hoang", "Huynh", "Phan", "Vu", "Vo", "Dang", "Bui", "Do", "Ngo", "Ho", "Duong", "Dinh"]
            dem_list = ["Van", "Thi", "Minh", "Huu", "Quang", "Thanh", "Thu", "Anh", "Trung", "Phuc", "Ngoc", "Thao", "Khanh", "Tuan", "Hai"]
            ten_list = ["Hoang", "Ha", "Tu", "Trang", "Linh", "Duy", "Hung", "Tam", "Lan", "Phuong", "Quan", "My", "Long", "Nam", "Vy"]

            full_name = f"{random.choice(ho_list)} {random.choice(dem_list)} {random.choice(ten_list)}"
            safe_full_name = full_name.replace(" ", "%s")  # ƒë·ªïi kho·∫£ng tr·∫Øng cho adb
            password = random.choice(string.ascii_uppercase) + ''.join(
                random.choices(string.ascii_lowercase + string.digits, k=9)
            )

            udid = self.udid if hasattr(self, 'udid') else None
            if not udid:
                log("‚õî Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c UDID thi·∫øt b·ªã.")
                return False

            # ‚úèÔ∏è Tap v√†o √¥ H·ªç t√™n 2 l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o focus
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "400"])
            time.sleep(1)

            # üìù Nh·∫≠p h·ªç t√™n
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", safe_full_name])
            log(f"‚úÖ ƒê√£ ƒëi·ªÅn h·ªç t√™n: {full_name}")
            time.sleep(1.5)

            # üîë Tap v√†o √¥ M·∫≠t kh·∫©u v√† nh·∫≠p
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "500", "600"])
            time.sleep(1)
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", password])
            log(f"‚úÖ ƒê√£ ƒëi·ªÅn m·∫≠t kh·∫©u: {password}")
            time.sleep(1.5)

            # ‚úÖ ·∫®n b√†n ph√≠m ƒë·ªÉ tr√°nh che n√∫t Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "111"])
            time.sleep(0.8)

            # üëâ Tap ch√≠nh gi·ªØa n√∫t Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "900"])
            log("üëâ ƒê√£ b·∫•m 'Next' sau khi ƒëi·ªÅn h·ªç t√™n & m·∫≠t kh·∫©u.")
            time.sleep(8)

        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi ƒëi·ªÅn h·ªç t√™n v√† m·∫≠t kh·∫©u b·∫±ng ADB: {repr(e)}")
            return False
        
        # ============================== Nh·∫≠p Tu·ªïi =====================================
        log("‚úèÔ∏è B·∫Øt ƒë·∫ßu b·ªè qua m√†n list age")
        try:
            # üëâ Tap Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1700"])
            log("üëâ ƒê√£ b·∫•m 'Next")
            time.sleep(3)
            
            # üëâ Tap OK
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1100"])
            log("üëâ ƒê√£ b·∫•m OK")
            time.sleep(4)

            # üëâ Tap Enter age
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1700"])
            log("üëâ ƒê√£ b·∫•m 'Enter age'")
            time.sleep(7)
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·ªè qua m√†n h√¨nh ch·ªçn tu·ªïi: {repr(e)}")
            return False
        
        # =================== Nh·∫≠p tu·ªïi ng·∫´u nhi√™n ===================
        log("‚úèÔ∏è B·∫Øt ƒë·∫ßu nh·∫≠p tu·ªïi ng·∫´u nhi√™n (18 - 50)...")

        try:
            age = random.randint(18, 50)  # random tu·ªïi
            log(f"‚úÖ Tu·ªïi ƒë∆∞·ª£c ch·ªçn: {age}")

            # ‚úèÔ∏è Nh·∫≠p tu·ªïi
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", str(age)])
            log("‚úÖ ƒê√£ nh·∫≠p tu·ªïi th√†nh c√¥ng!")
            time.sleep(1.5)

            # üëâ Tap n√∫t Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "800"])
            log("üëâ ƒê√£ b·∫•m 'Next' sau khi nh·∫≠p tu·ªïi.")
            time.sleep(15)

        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi nh·∫≠p tu·ªïi: {repr(e)}")
            return False
        
        # ====================== ·∫§n Next ƒë·ªÉ ho√†n t·∫•t ======================
        log("‚úèÔ∏è B·∫Øt ƒë·∫ßu ho√†n t·∫•t ƒëƒÉng k√Ω...")
        try:
            # üëâ Tap Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1550"])
            log("üëâ ƒê√£ b·∫•m 'Next'")
            time.sleep(25)
            log("üéâ Ho√†n t·∫•t ƒëƒÉng k√Ω Instagram Lite!")
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·ªè ·∫•n next ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω: {repr(e)}")
            return False
    
        # B·∫≠t ch·∫ø ƒë·ªô m√°y bay v√† t·ª± ch·∫°y l·∫°i phi√™n m·ªõi
        try:
            adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
            adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
            adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
            adb_shell(self.udid, "svc", "wifi", "disable")
            adb_shell(self.udid, "svc", "data", "disable")
            log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (LIVE)")
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (LIVE): {e}")
            
    # ================================== DISPATCHER ============================================================
    def run_signup(self):
        app_choice = phone_ig_app_var.get() if "phone_ig_app_var" in globals() else "instagram"
        if (app_choice or "").lower() == "instagram_lite":
            self.log("üöÄ B·∫Øt ƒë·∫ßu t·∫°o t√†i kho·∫£n tr√™n Instagram Lite")
            return self.signup_instagram_lite()
        else:
            self.log("üöÄ B·∫Øt ƒë·∫ßu t·∫°o t√†i kho·∫£n tr√™n Instagram")
            return self.signup_instagram()
    
#=================================== Chrome DESKTOP & MOBILE ===============================================
def clear_chrome_cache():
    try:
        user_data_dir = os.path.join(os.getcwd(), "ChromeData")
        if os.path.exists(user_data_dir):
            shutil.rmtree(user_data_dir)
            log("üßπ ƒê√£ x√≥a cache Chrome (User Data)")
        else:
            log("‚Ñπ Kh√¥ng c√≥ cache Chrome ƒë·ªÉ x√≥a")
    except Exception as e:
        log(f"‚ö†Ô∏è L·ªói khi x√≥a cache Chrome: {repr(e)}")

def type_text_slowly(element, text, delay=0.18):
    """G√µ t·ª´ng k√Ω t·ª± v·ªõi delay gi·ªØa m·ªói k√Ω t·ª±."""
    element.click()
    element.clear()
    for ch in text:
        element.send_keys(ch)
        time.sleep(delay)

def get_delay(key, default):
    try:
        val = delay_entries[key].get().strip()
        return float(val) if val else default
    except:
        return default

def _set_container_enabled(container, enabled: bool):
    state = "normal" if enabled else "disabled"

    def walk(widget):
        # tk.*
        try:
            widget.configure(state=state)
        except Exception:
            # ttk.*
            try:
                if hasattr(widget, "state"):
                    widget.state(["!disabled"] if enabled else ["disabled"])
            except Exception:
                pass
        # Label ƒë·ªïi m√†u ƒë·ªÉ nh√¨n ra ƒëang b·ªã kh√≥a
        try:
            if isinstance(widget, (tk.Label, ttk.Label)):
                widget.configure(fg="black" if enabled else "#888")
        except Exception:
            pass
        for child in widget.winfo_children():
            walk(child)

    walk(container)

def _sync_mode_ui():
    """Kh√≥a/m·ªü Desktop Settings v√† Mobile Settings theo l·ª±a ch·ªçn ·ªü 'GIAO DI·ªÜN'."""
    mode = ui_mode_var.get().strip().lower()
    _set_container_enabled(desktop_settings, enabled=(mode == "desktop"))
    _set_container_enabled(mobile_settings,  enabled=(mode == "mobile"))
    _set_container_enabled(phone_settings,   enabled=(mode == "phone"))

def get_chrome_size(default_w=1200, default_h=800):
    try:
        w = int(entry_width.get().strip())
        h = int(entry_height.get().strip())
        # gi·ªõi h·∫°n t·ªëi thi·ªÉu ƒë·ªÉ tr√°nh l·ªói
        if w < 400: w = 400
        if h < 300: h = 300
        return w, h
    except:
        return default_w, default_h

def get_chrome_scale(default=1.0):
    try:
        s = int(entry_scale.get().strip())
        if s < 50: s = 50    # t·ªëi thi·ªÉu 50%
        if s > 300: s = 300  # t·ªëi ƒëa 300%
        return s / 100.0     # chuy·ªÉn % th√†nh s·ªë th·ª±c
    except:
        return default

# --- th√™m cho ƒë·ªìng b·ªô lu·ªìng ---
sync_barrier = None    # s·∫Ω l√† threading.Barrier ƒë∆∞·ª£c t·∫°o khi START
barrier_timeout = 60   # th·ªùi gian ch·ªù (gi√¢y) tr∆∞·ªõc khi timeout
thread_list = []       # (t√πy ch·ªçn) l∆∞u c√°c Thread ƒë·ªÉ qu·∫£n l√Ω

def wait_all(step_name, thread_id):
    """
    Ch·ªù t·∫•t c·∫£ c√°c lu·ªìng ƒë·∫°t t·ªõi checkpoint 'step_name' r·ªìi ti·∫øp t·ª•c.
    N·∫øu barrier b·ªã timeout/broken th√¨ s·∫Ω log v√† ti·∫øp t·ª•c ƒë·ªÉ tr√°nh treo.
    """
    if sync_barrier is not None:
        try:
            log(f"‚è≥ [Lu·ªìng {thread_id}] Ch·ªù t·∫•t c·∫£ t·∫°i b∆∞·ªõc: {step_name} (timeout {barrier_timeout}s)...")
            sync_barrier.wait(timeout=barrier_timeout)
            log(f"üöÄ [Lu·ªìng {thread_id}] T·∫•t c·∫£ lu·ªìng ƒë√£ ho√†n th√†nh b∆∞·ªõc: {step_name}")
        except threading.BrokenBarrierError:
            log(f"‚ö†Ô∏è [Lu·ªìng {thread_id}] Barrier timeout/broken ·ªü b∆∞·ªõc: {step_name}, ti·∫øp t·ª•c.")
    else:
        log(f"‚ö†Ô∏è [Lu·ªìng {thread_id}] sync_barrier ch∆∞a ƒë∆∞·ª£c t·∫°o ‚Äî b·ªè qua ƒë·ªìng b·ªô b∆∞·ªõc: {step_name}")

all_drivers = []
pause_event = threading.Event()
pause_event.set()  # M·∫∑c ƒë·ªãnh l√† ‚Äúcho ph√©p ch·∫°y‚Äù

warp_enabled = True
proxy_entry = None

# ==== Popup for Log & Tree ====
popup_win = None
log_text = None
 
live_count = 0
die_count = 0

# --- Bi·∫øn to√†n c·ª•c ---
ava_folder_path = ""

chrome_path = ""
used_positions = {} # driver: (x, y)
available_positions = []
cols = 6 # s·ªë c·ªôt
rows = 3 # s·ªë h√†ng
win_w = 320 # chi·ªÅu r·ªông c·ª≠a s·ªï
win_h = 360 # chi·ªÅu cao c·ª≠a s·ªï


for r in range(rows):
    for c in range(cols):
        x = c * win_w
        y = r * win_h
        available_positions.append((x, y))


pos_lock = threading.Lock()

def release_position(driver):
    try:
        with pos_lock:
            if driver in used_positions:
                del used_positions[driver]
    except Exception:
        pass

def choose_chrome_folder():
    global chrome_path
    folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ch·ª©a Chrome")
    if folder:
        chrome_path = os.path.join(folder, "chrome.exe")
        if os.path.isfile(chrome_path):
            print(f"üß≠ ƒê√£ ch·ªçn chrome t·∫°i: {chrome_path}")
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y chrome.exe trong th∆∞ m·ª•c n√†y.")
            chrome_path = ""

def arrange_after_open(driver, tries=40):
    time.sleep(1)
    for _ in range(tries):
        try:
            # üîí l·∫•y v·ªã tr√≠ tr·ªëng trong l∆∞·ªõi
            with pos_lock:
                for pos in available_positions:
                    if pos not in used_positions.values():
                        driver.set_window_position(*pos)
                        used_positions[driver] = pos
                        break

            # ‚ö° set size m·∫∑c ƒë·ªãnh theo l∆∞·ªõi, s·ª≠ d·ª•ng get_chrome_size() n·∫øu c·∫ßn
            w, h = get_chrome_size()  # L·∫•y size t·ª´ GUI (ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh)
            driver.set_window_size(w, h)

            # ‚ö° set scale (gi·ªØ nguy√™n h√†m get_chrome_scale)
            try:
                scale = get_chrome_scale()  # L·∫•y scale t·ª´ GUI (ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh)
                driver.execute_cdp_cmd(
                    "Emulation.setPageScaleFactor",
                    {"pageScaleFactor": scale}
                )
                log(f"üîç Scale Chrome: {int(scale * 100)}%")
            except Exception as e:
                log(f"‚ö†Ô∏è Kh√¥ng ch·ªânh ƒë∆∞·ª£c scale: {repr(e)}")

            break
        except Exception:
            time.sleep(1)

format_fields = ["Username", "Pass", "Mail", "2FA", "Cookie"]
save_format  = ["Username", "Pass", "Mail", "Cookie", "2FA"]

def update_rate():
    try:
        live = int(live_var.get())
        die  = int(die_var.get())
        total = live + die
        if total > 0:
            rate = round((live / total) * 100, 2)
            rate_var.set(f"{rate}%")
        else:
            rate_var.set("0%")
    except Exception:
        rate_var.set("0%")

bio_index_seq = {"desktop": 0, "mobile": 0}  # ƒë·∫øm cho ch·∫ø ƒë·ªô tu·∫ßn t·ª±

def _lines_from_widget(widget):
    try:
        raw = widget.get("1.0", tk.END)
    except Exception:
        return []
    return [ln.strip() for ln in raw.splitlines() if ln.strip()]

def get_bio_text(context: str = "auto"):
    """
    Tr·∫£ v·ªÅ Bio theo 4 mode: custom | random | sequential | default.
    - context='desktop'  -> d√πng bi·∫øn Desktop (bio_* c≈©)
    - context='mobile'   -> d√πng bi·∫øn Mobile (m_bio_*)
    - context='auto'     -> theo ui_mode_var ('desktop' / 'mobile')
    """
    DEFAULT_BIO = "Tymmmmmm"

    # x√°c ƒë·ªãnh ngu·ªìn
    try:
        mode_ui = ui_mode_var.get().strip().lower()
    except Exception:
        mode_ui = "desktop"
    src = (mode_ui if context == "auto" else context).lower()
    if src not in ("desktop", "mobile"):
        src = "desktop"

    # l·∫•y bi·∫øn theo ngu·ªìn
    if src == "mobile":
        default_on = bool(m_bio_default_var.get()) if "m_bio_default_var" in globals() else False
        custom_on  = bool(m_bio_custom_var.get())  if "m_bio_custom_var"  in globals() else False
        mode_val   = (m_bio_mode_var.get() if "m_bio_mode_var" in globals() else "random") or "random"
        widget     = bio_text
    else:
        default_on = bool(bio_default_var.get()) if "bio_default_var" in globals() else False
        custom_on  = bool(bio_custom_var.get())  if "bio_custom_var"  in globals() else False
        mode_val   = (bio_mode_var.get() if "bio_mode_var" in globals() else "random") or "random"
        widget     = globals().get("bio_text")

    # 1) m·∫∑c ƒë·ªãnh
    if default_on:
        return DEFAULT_BIO

    # 2) theo y√™u c·∫ßu
    if custom_on and widget is not None:
        lines = _lines_from_widget(widget)
        if not lines:
            return DEFAULT_BIO
        mv = mode_val.lower()
        if mv == "random":
            return random.choice(lines)
        # sequential
        idx = bio_index_seq[src] % len(lines)
        bio_index_seq[src] += 1
        return lines[idx]

    # fallback
    return DEFAULT_BIO


# --- L∆∞u & Load config (d√πng 1 file config.json) ---
CONFIG_FILE = "config.json"
def save_config():
    cfg = {
        "ava_folder_path": globals().get("ava_folder_path", ""),
        "chrome_path": globals().get("chrome_path", ""),
        "save_format": globals().get("save_format", ""),
        "photo_folder_phone": globals().get("photo_folder_phone", ""),
        "ig_app_choice": globals().get("phone_ig_app_var", tk.StringVar(value="instagram")).get(),
        "scrcpy_path": globals().get("scrcpy_path", ""),
        "hidden_chrome": hidden_chrome_var.get()
    }
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(cfg, f, ensure_ascii=False, indent=2)

def load_config():
    global ava_folder_path, chrome_path, save_format, photo_folder_phone, scrcpy_path
    config_file = CONFIG_FILE
    if os.path.exists(config_file):
        try:
            with open(config_file, "r", encoding="utf-8") as f:
                cfg = json.load(f)
                ava_folder_path = cfg.get("ava_folder_path", "")
                chrome_path = cfg.get("chrome_path", "")
                save_format = cfg.get("save_format", "")
                photo_folder_phone = cfg.get("photo_folder_phone", "")
                scrcpy_path = cfg.get("scrcpy_path", "")
                if "ig_app_choice" in cfg:
                    try:
                        phone_ig_app_var.set(cfg["ig_app_choice"])
                    except Exception:
                        pass
                if "hidden_chrome" in cfg:
                    try:
                        hidden_chrome_var.set(cfg["hidden_chrome"])
                    except Exception:
                        pass
                if ava_folder_path:
                    log(f"üìÇ ƒê√£ load th∆∞ m·ª•c ·∫£nh: {ava_folder_path}")
                if chrome_path:
                    log(f"üåê ƒê√£ load Chrome: {chrome_path}")
                if photo_folder_phone:
                    log(f"üìÇ ƒê√£ load folder ·∫£nh (Phone): {photo_folder_phone}")
                if scrcpy_path:
                    _log_scrcpy_path(scrcpy_path)
        except Exception as e:
            log(f"‚ö† Kh√¥ng load ƒë∆∞·ª£c config.json: {e}")

def _log_scrcpy_path(p: str):
    # log path r√∫t g·ªçn cho g·ªçn UI
    if not p:
        log("‚ö†Ô∏è scrcpy: ch∆∞a c·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n.")
        return
    short = (p if len(p) <= 72 else f"{p[:30]} ... {p[-30:]}")
    log(f"üß≠ scrcpy path: {short}")

def load_scrcpy_config():
    load_config()

def save_scrcpy_config():
    save_config()

scrcpy_path = ""
resolution = "540x960"

# ====== insert tree ======
def insert_to_tree(status_text, username, password, email, cookie_str, two_fa_code=""):
    try:
        status_lower = str(status_text).lower()
        if status_lower == "live":
            status_tag = "LIVE"
        elif status_lower == "die":
            status_tag = "DIE"

        phone_val  = ""  # ho·∫∑c l·∫•y t·ª´ bi·∫øn c·ªßa b·∫°n n·∫øu c√≥
        token_val  = ""  # ƒë·ªÉ tr·ªëng
        two_fa_val = two_fa_code if two_fa_code else ""

        tree.insert(
            "", "end",
            values=(
                len(tree.get_children())+1,   # STT
                status_text,                  # TR·∫†NG TH√ÅI
                username, password, email,
                phone_val, cookie_str,
                two_fa_val, token_val,
                "127.0.0.1", "NoProxy",
                "LIVE" if status_tag == "LIVE" else "",
                "DIE"  if status_tag == "DIE"  else "",
            ),
            tags=(status_tag,)
        )
        log(f"‚úÖ ƒê√£ insert {status_text} l√™n TreeView: {username}")
    except Exception as e:
        log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m v√†o Treeview (helper): {repr(e)}")

# --- Ch·ªçn Chrome ---
def select_chrome():
    global chrome_path
    # M·ªü h·ªôp tho·∫°i ch·ªçn th∆∞ m·ª•c
    folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ch·ª©a Chrome")
    
    if folder:
        # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp chrome.exe trong th∆∞ m·ª•c ƒë√£ ch·ªçn
        chrome_path = os.path.join(folder, "chrome.exe")
        
        # Ki·ªÉm tra xem chrome.exe c√≥ t·ªìn t·∫°i trong th∆∞ m·ª•c kh√¥ng
        if os.path.isfile(chrome_path):
            log(f"üß≠ ƒê√£ ch·ªçn chrome t·∫°i: {chrome_path}")
        else:
            # N·∫øu kh√¥ng t√¨m th·∫•y chrome.exe, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y chrome.exe trong th∆∞ m·ª•c n√†y.")
            chrome_path = ""  # ƒê·∫∑t l·∫°i gi√° tr·ªã c·ªßa chrome_path n·∫øu kh√¥ng t√¨m th·∫•y t·ªáp chrome.exe

# --- Ch·ªçn ƒë·ªãnh d·∫°ng l∆∞u ---
def update_save_format():
    global save_format
    save_format = [cb.get() for cb in format_boxes if cb.get()]
    save_config()
    log(f"üíæ ƒê·ªãnh d·∫°ng l∆∞u: {'|'.join(save_format)}")
    
def select_ava_folder():
    global ava_folder_path
    folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ·∫£nh avatar")
    if folder:
        ava_folder_path = folder
        save_config()
        log(f"‚úÖ ƒê√£ ch·ªçn th∆∞ m·ª•c ·∫£nh: {ava_folder_path}")

# H√†m N√∫t kh·ªüi ƒë·ªông l·∫°i
def restart_tool():
    try:
        # ƒê√≥ng t·∫•t c·∫£ Chrome ƒëang ch·∫°y
        subprocess.run("taskkill /F /IM chrome.exe", shell=True)
        log("üõë ƒê√£ ƒë√≥ng Chrome.")

        # L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi c·ªßa file .py hi·ªán t·∫°i
        script_path = os.path.realpath(__file__)   # lu√¥n ra ƒë√∫ng V3 BackUP.py
        python_exe = sys.executable

        # Gh√©p l·ªánh restart
        cmd = f'"{python_exe}" "{script_path}"'

        log(f"üîÅ ƒêang kh·ªüi ƒë·ªông l·∫°i tool...\n‚û° CMD: {cmd}")
        subprocess.Popen(cmd, shell=True)

        # Tho√°t tool hi·ªán t·∫°i
        os._exit(0)

    except Exception as e:
        log(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i tool: {repr(e)}")

def pause():
    pause_event.clear()
    log("‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng t·∫•t c·∫£ lu·ªìng.")

def resume():
    pause_event.set()
    log("‚ñ∂Ô∏è Ti·∫øp t·ª•c ch·∫°y c√°c lu·ªìng.")


def log(message):
    # log_text ƒë∆∞·ª£c t·∫°o sau; ƒë·∫£m b·∫£o h√†m g·ªçi ch·ªâ sau khi GUI t·∫°o xong
    try:
        log_text.config(state=tk.NORMAL)
        log_text.insert(tk.END, f"{message}\n")
        log_text.yview(tk.END)
        log_text.config(state=tk.DISABLED)
    except Exception:
        print(message)

# === H√†m ƒëi·ªÅu khi·ªÉn WARP ===

def warp_on():
    try:
        subprocess.run(["warp-cli", "connect"], check=True)
        log("üåê ƒê√£ b·∫≠t Cloudflare WARP")
        time.sleep(3)
    except Exception as e:
        log(f"‚ùå L·ªói b·∫≠t WARP: {repr(e)}")

def warp_off():
    try:
        subprocess.run(["warp-cli", "disconnect"], check=True)
        log("üåê ƒê√£ t·∫Øt Cloudflare WARP")
        time.sleep(3)
    except Exception as e:
        log(f"‚ùå L·ªói t·∫Øt WARP: {repr(e)}")

def warp_change_ip():
    try:
        log("üîÑ ƒêang ƒë·ªïi IP WARP...")
        subprocess.run(["warp-cli", "disconnect"], check=True)
        time.sleep(2)
        subprocess.run(["warp-cli", "connect"], check=True)
        time.sleep(3)
        ip = requests.get("https://api.ipify.org").text
        log(f"‚úÖ IP WARP m·ªõi: {ip}")
    except Exception as e:
        log(f"‚ùå L·ªói ƒë·ªïi IP WARP: {repr(e)}")

def toggle_warp():
    global warp_enabled
    warp_enabled = not warp_enabled
    if warp_enabled:
        warp_toggle_btn.config(text="WARP ON", bg="green", fg="white")
        log("üåê WARP mode ENABLED - s·∫Ω d√πng WARP, b·ªè qua proxy.")
    else:
        warp_toggle_btn.config(text="WARP OFF", bg="red", fg="white")
        log("üåê WARP mode DISABLED - s·∫Ω d√πng proxy n·∫øu c√≥.")

def run_phone_android():
    try:
        log("üöÄ [Phone] Kh·ªüi ƒë·ªông Appium server‚Ä¶")
        if not start_appium_server():
            log("‚ùå [Phone] Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Appium. Vui l√≤ng c√†i appium ho·∫∑c ki·ªÉm tra PATH.")
            return
        log(f"‚úÖ [Phone] Appium OK t·∫°i {APPIUM_HOST}:{APPIUM_PORT}")

        # 1) ∆ØU TI√äN: l·∫•y theo c·ªôt "CH·ªåN" trong b·∫£ng 3 c·ªôt
        selected = []
        if 'get_checked_udids' in globals():
            selected = get_checked_udids("pick")  # c√°c UDID ƒë√£ tick c·ªôt CH·ªåN

        if not selected:
            devices = adb_devices()
            if not devices:
                log("‚õî [Phone] Kh√¥ng ph√°t hi·ªán thi·∫øt b·ªã Android (adb devices tr·ªëng).")
                log("‚û° B·∫≠t USB debugging, c·∫Øm c√°p, ƒë·ªìng √Ω RSA, r·ªìi ch·∫°y l·∫°i.")
                return
            selected = devices

        log(f"üì± [Phone] Thi·∫øt b·ªã d√πng: {', '.join(selected)}")

        # Kh·ªüi ch·∫°y 1 worker/thi·∫øt b·ªã
        for udid in selected:
            if not pause_event.is_set():
                pause_event.wait()
            w = AndroidWorker(udid, log_fn=log)
            w.start()
            log(f"‚ñ∂Ô∏è [Phone] ƒê√£ start worker cho {udid}")
            time.sleep(0.6)

        # (Tu·ª≥ ch·ªçn) n·∫øu b·∫°n mu·ªën t·ª± m·ªü scrcpy cho c√°c m√°y ƒë√£ tick c·ªôt VIEW:
        try:
            if 'get_checked_udids' in globals() and 'open_scrcpy_for_list' in globals():
                view_list = get_checked_udids("view")
                if view_list:
                    open_scrcpy_for_list(view_list)
        except Exception:
            pass

    except Exception as e:
        log(f"‚ùå [Phone] L·ªói t·ªïng run_phone_android: {repr(e)}")

# >>> ADD: Mobile Chrome builder (standalone)
def build_mobile_chrome_driver(proxy: str | None, log_fn=log):
    """
    T·∫°o Chrome ·ªü ch·∫ø ƒë·ªô Mobile (emulate iPhone) d√†nh cho ch·∫ø ƒë·ªô Desktop/Mobile.
    - Kh√¥ng ƒë·ª•ng t·ªõi Appium/ADB/WARP app Android.
    - Lu√¥n d√πng Selenium Chrome (se_webdriver.Chrome).
    """
    chrome_path   = globals().get("chrome_path", "")  # path ƒë·∫øn chrome.exe n·∫øu user ch·ªçn
    warp_enabled  = bool(globals().get("warp_enabled", False))
    all_drivers   = globals().get("all_drivers", None)
    arrange_after = globals().get("arrange_after_open", None)

    mobile_options = Options()
    mobile_options.add_argument("--disable-blink-features=AutomationControlled")
    mobile_options.add_argument("--no-first-run")
    mobile_options.add_argument("--disable-background-networking")
    mobile_options.add_argument("--disable-background-timer-throttling")
    mobile_options.add_argument("--disable-client-side-phishing-detection")
    # Th√™m headless n·∫øu ƒë∆∞·ª£c ch·ªçn
    if hidden_chrome_var.get():
        mobile_options.add_argument("--headless=new")

    # Emulate iPhone 15 Pro (UA + viewport)
    mobile_emulation = {
        "deviceMetrics": {"width": 390, "height": 844, "pixelRatio": 3.0},
        "userAgent": (
            "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) "
            "AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/137.0.0.0 "
            "Mobile/15E148 Safari/604.1"
        )
    }
    mobile_options.add_experimental_option("mobileEmulation", mobile_emulation)

    # Proxy: ch·ªâ √°p n·∫øu kh√¥ng b·∫≠t WARP (PC) v√† c√≥ proxy
    # Ch·∫•p nh·∫≠n 'http://x:y', 'socks5://x:y' ho·∫∑c ch·ªâ 'host:port' (m·∫∑c ƒë·ªãnh http)
    if not warp_enabled and proxy:
        if "://" not in proxy:
            proxy = f"http://{proxy}"
        mobile_options.add_argument(f"--proxy-server={proxy}")

    # N·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn binary chrome
    if chrome_path:
        mobile_options.binary_location = chrome_path

    # Chromedriver:
    # - N·∫øu c√≥ chromedriver.exe c·∫°nh file, d√πng n√≥
    # - N·∫øu kh√¥ng, ƒë·ªÉ tr·ªëng ƒë·ªÉ Selenium t·ª± t√¨m trong PATH
    driver_path = os.path.join(os.getcwd(), "chromedriver.exe")
    if os.path.isfile(driver_path):
        service = Service(driver_path)
    else:
        service = Service()  # d√πng chromedriver trong PATH

    # ‚ùó Quan tr·ªçng: d√πng Selenium webdriver, KH√îNG d√πng appium.webdriver
    drv = se_webdriver.Chrome(service=service, options=mobile_options)

    # Qu·∫£n l√Ω danh s√°ch + s·∫Øp x·∫øp c·ª≠a s·ªï (n·∫øu c√≥ helper)
    try:
        if isinstance(all_drivers, list):
            all_drivers.append(drv)
        if callable(arrange_after):
            threading.Thread(target=arrange_after, args=(drv,), daemon=True).start()
    except Exception:
        pass

    if log_fn:
        log_fn("üì± Chrome Mobile ƒë√£ kh·ªüi t·∫°o (emulation iPhone).")
    return drv

def start_process():
    global sync_barrier, thread_list
    try:
        num_threads = int(threads_entry.get())
    except:
        log("‚ùå S·ªë lu·ªìng kh√¥ng h·ª£p l·ªá.")
        return

    mode = ui_mode_var.get().strip().lower()

    # === Phone (Android) ‚Üí t·ª± ch·∫°y Appium ===
    if mode == "phone":
        pause_event.wait()
        threading.Thread(target=run_phone_android, daemon=True).start()
        return

    # === Desktop/Mobile (Selenium) nh∆∞ c≈© ===
    sync_barrier = threading.Barrier(num_threads)
    thread_list = []
    pause_event.wait()

    target_fn = run_mobile if mode == "mobile" else run

    def run_wrapper(tid):
        try:
            target_fn(tid)
        except Exception as e:
            log(f"‚ùå L·ªói {target_fn.__name__} ·ªü lu·ªìng {tid}: {repr(e)}")

    for i in range(num_threads):
        t = threading.Thread(target=run_wrapper, args=(i+1,), daemon=True)
        t.start()
        thread_list.append(t)
        time.sleep(1)

def get_tempasia_email():
    url = "https://free.priyo.email/api/random-email/7jkmE5NM2VS6GqJ9pzlI"
    headers = {"accept": "application/json"}
    try:
        resp = requests.get(url, headers=headers, timeout=15)
        if resp.ok:
            return resp.json().get("email")
        log(f"‚ùå TempAsia HTTP {resp.status_code}")
    except Exception as e:
        log(f"‚ùå L·ªói TempAsia API: {repr(e)}")
    return None

def wait_for_tempmail_code(email, max_checks=30, interval=2):
    """
    Poll API temp-mail.asia ƒë·ªÉ l·∫•y m√£ 6 s·ªë t·ª´ subject/email.
    Tr·∫£ v·ªÅ code string ho·∫∑c None n·∫øu h·∫øt h·∫°n.
    """
    headers = {"accept": "application/json"}
    email_enc = email.replace("@", "%40")
    url = f"https://free.priyo.email/api/messages/{email_enc}/7jkmE5NM2VS6GqJ9pzlI"

    for i in range(max_checks):
        try:
            r = requests.get(url, headers=headers, timeout=10)
            if r.ok:
                msgs = r.json()
                if msgs:
                    subj = msgs[0].get("subject", "")
                    body = msgs[0].get("body","")
                    m = re.search(r"\b\d{6}\b", subj) or re.search(r"\b\d{6}\b", body)
                    if m:
                        return m.group(0)
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc mail: {repr(e)}")
        time.sleep(interval)
    return None

def get_dropmail_email():
    url = "https://dropmail.me/api/graphql/my_token_123"
    query = """
    mutation {
      introduceSession {
        id
        expiresAt
        addresses {
          address
        }
      }
    }
    """
    try:
        resp = requests.post(url, json={"query": query}, timeout=10)
        data = resp.json()
        session = data["data"]["introduceSession"]
        email = session["addresses"][0]["address"]
        session_id = session["id"]
        return email, session_id
    except Exception as e:
        log(f"‚ùå L·ªói DropMail API: {repr(e)}")
        return None, None

def wait_for_dropmail_code(self, session_id, max_checks=5, interval=5, overall_timeout=300):
    """
    Ch·ªù v√† l·∫•y m√£ OTP (6 s·ªë) t·ª´ DropMail session.
    """
    url = "https://dropmail.me/api/graphql/my_token_123"
    query = """
    query($id: ID!) {
        session(id: $id) {
            mails { fromAddr headerSubject text }
        }
    }"""

    start_time = time.time()
    checks = 0
    while (time.time() - start_time) < overall_timeout and checks < max_checks:
        try:
            resp = requests.post(
                url,
                json={"query": query, "variables": {"id": session_id}},
                timeout=10
            )
            data = resp.json()
            mails = data["data"]["session"]["mails"]

            if mails:
                for mail in mails:
                    text = mail.get("text", "")
                    subject = mail.get("headerSubject", "")
                    match = re.search(r"\b\d{6}\b", text) or re.search(r"\b\d{6}\b", subject)
                    if match:
                        code = match.group(0)
                        self.log(f"üì© Nh·∫≠n ƒë∆∞·ª£c m√£ DropMail: {code}")
                        return code

            checks += 1
            self.log(f"‚åõ Ch∆∞a c√≥ mail DropMail (l·∫ßn {checks}/{max_checks}), ch·ªù th√™m...")
        except Exception as e:
            checks += 1
            self.log(f"‚ùå L·ªói khi ki·ªÉm tra DropMail (l·∫ßn {checks}/{max_checks}): {repr(e)}")

        time.sleep(interval)

    self.log("‚õî Qu√° 5 l·∫ßn ki·ªÉm tra DropMail m√† ch∆∞a c√≥ m√£ ‚Äî b·ªè phi√™n.")
    return None

def fetch_signup_email(self):
    try:
        # ∆Øu ti√™n d√πng bi·∫øn ch·ªçn ngu·ªìn mail trong UI: 'dropmail' | 'tempasia'
        mode = self.var_mail_src.get().strip().lower()
    except Exception:
        mode = "tempasia"

    if mode == "dropmail":
        email, sid = get_dropmail_email()   # ƒë√£ c√≥ trong AutoPhoneInstagram.py
        if not email:
            self.log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c email t·ª´ DropMail.")
            return None, None, "dropmail"
        self.drop_session_id = sid          # l∆∞u ƒë·ªÉ ch·ªù OTP
        self.log(f"‚úÖ Email DropMail: {email}")
        return email, sid, "dropmail"

    # fallback: temp-mail.asia
    email = get_tempasia_email()            # ƒë√£ c√≥ trong AutoPhoneInstagram.py
    if not email:
        self.log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c email t·ª´ Temp-mail.asia.")
        return None, None, "tempasia"
    self.log(f"‚úÖ Email Temp-mail: {email}")
    return email, None, "tempasia"

# >>> ADD: Mobile-only flow
def run_mobile(thread_id=None):
    """
    ƒêƒÉng k√Ω t√†i kho·∫£n Instagram ho√†n to√†n tr√™n giao di·ªán Mobile.
    Kh√¥ng d√πng form Desktop / kh√¥ng chuy·ªÉn qua Desktop gi·ªØa ch·ª´ng.
    """
    while True:
        pause_event.wait()
        log("üü¢ [Mobile] B·∫Øt ƒë·∫ßu t·∫°o t√†i kho·∫£n...")

        # 1) L·∫•y email t·∫°m (t·∫≠n d·ª•ng 2 checkbox c√≥ s·∫µn)
        email = None
        session_id = None
        try:
            if dropmail_var.get():
                log("üì® [Mobile] L·∫•y email t·ª´ DropMail.me...")
                email, session_id = get_dropmail_email()
                if not email:
                    log("‚õî Kh√¥ng th·ªÉ l·∫•y email DropMail ‚Äî d·ª´ng.")
                    return
                log(f"‚úÖ Email DropMail: {email}")
            elif tempmail_var.get():
                log("üì® [Mobile] L·∫•y email t·ª´ temp-mail.asia (API)...")
                headers = {"accept": "application/json"}
                # d√πng endpoint ƒë√£ d√πng ·ªü file V3.py ƒë·ªÉ ƒë·ªìng b·ªô
                resp = requests.get(
                    "https://free.priyo.email/api/random-email/7jkmE5NM2VS6GqJ9pzlI",
                    headers=headers, timeout=15
                )
                if resp.status_code == 200:
                    email = resp.json().get("email")
                    log(f"‚úÖ Email l·∫•y ƒë∆∞·ª£c: {email}")
                else:
                    log(f"‚ùå L·ªói HTTP {resp.status_code} khi l·∫•y email")
                    return
            else:
                log("‚õî B·∫°n ch∆∞a ch·ªçn d·ªãch v·ª• mail t·∫°m (DropMail ho·∫∑c Temp-Mail).")
                return
        except Exception as e:
            log(f"‚ùå L·ªói l·∫•y email: {repr(e)}")
            return

        # 2) Sinh info c∆° b·∫£n (t·∫≠n d·ª•ng generator VN name trong file)
        def generate_vietnamese_name():
            ho_list = ["Nguy·ªÖn","Tr·∫ßn","L√™","Ph·∫°m","Ho√†ng","Phan","V≈©","ƒê·∫∑ng","B√πi","ƒê·ªó"]
            ten_dem_list = ["VƒÉn","Th·ªã","H·ªØu","Gia","Ng·ªçc","ƒê·ª©c","Thanh","Minh","Quang","Tr·ªçng"]
            ten_list = ["Anh","B√¨nh","Ch√¢u","D≈©ng","H√†","H√πng","Lan","Linh","Nam","Ph√∫c","Qu·ª≥nh","S∆°n","Trang","Tu·∫•n","Vy"]
            return f"{random.choice(ho_list)} {random.choice(ten_dem_list)} {random.choice(ten_list)}"

        full_name = generate_vietnamese_name()
        username_base = re.sub(r'[^a-z0-9]', '', unidecode(full_name.lower()))
        username = f"{username_base}{random.randint(100,999)}"
        password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
        age = str(random.randint(18, 30))
        log(f"üë§ H·ªç t√™n: {full_name}")
        log(f"üî§ Username: {username}")
        log(f"üîê M·∫≠t kh·∫©u: {password}")

        # 3) Kh·ªüi Chrome Mobile
        try:
            proxy = (proxy_entry.get().strip() if proxy_entry else "")
            if warp_enabled:
                log("üåê [Mobile] WARP b·∫≠t ‚Üí b·ªè qua proxy.")
            else:
                log(f"üåê [Mobile] WARP t·∫Øt ‚Üí proxy: {proxy or 'No proxy'}")

            driver = build_mobile_chrome_driver(proxy)
            wait = WebDriverWait(driver, 15)

            # ƒê·∫øn trang mobile signup (ƒë√∫ng theo giao di·ªán mobile)
            driver.get("https://www.instagram.com/accounts/signup/email/")
            pause_event.wait()
            log("üåê [Mobile] ƒê√£ truy c·∫≠p trang ƒëƒÉng k√Ω (Mobile).")
            time.sleep(3)
        except Exception as e:
            log(f"‚ùå [Mobile] L·ªói kh·ªüi t·∫°o tr√¨nh duy·ªát: {repr(e)}")
            try:
                release_position(driver); driver.quit()
            except: pass
            continue

        try:
            # 4) Nh·∫≠p email
            email_input = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[aria-label="Email"]')))
            type_text_slowly(email_input, email, delay=get_mobile_delay("Mail_type", 0.18))
            log("‚úÖ [Mobile] ƒê√£ nh·∫≠p email.")
            time.sleep(get_mobile_delay("Mail_sleep", 1))

            # NEXT 1
            next_btn = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_btn)
            next_btn.click()
            log("‚û°Ô∏è [Mobile] Next sau email.")
            time.sleep(get_mobile_delay("Mail_next", 2))
        except Exception as e:
            log(f"‚ùå [Mobile] Sai giao di·ªán/kh√¥ng th·∫•y Next sau email: {e}")
            try:
                release_position(driver); driver.quit()
            except: pass
            continue

        # 5) Resend code (n·∫øu c·∫ßn) ‚Üí t∆∞∆°ng th√≠ch v·ªõi code b·∫°n ƒë∆∞a
        try:
            time.sleep(5)
            log("‚è≥ [Mobile] Click 'I didn‚Äôt get the code'...")
            button_i_didnt_get = wait.until(EC.element_to_be_clickable(
                (By.XPATH, "//div[@role='button' and contains(., \"I didn‚Äôt get the code\")]")))
            button_i_didnt_get.click()
            log("‚úÖ [Mobile] ƒê√£ b·∫•m 'I didn‚Äôt get the code'")
            time.sleep(2)

            log("‚è≥ [Mobile] Click 'Resend confirmation code'...")
            resend_btn = wait.until(EC.element_to_be_clickable(
                (By.XPATH, "//div[@role='button' and contains(., 'Resend confirmation code')]")))
            resend_btn.click()
            log("‚úÖ [Mobile] ƒê√£ b·∫•m 'Resend confirmation code'")
            time.sleep(3)
        except Exception as e:
            log(f"‚ùå [Mobile] L·ªói ph·∫ßn resend code: {e}")
            try:
                release_position(driver); driver.quit()
            except: pass
            continue

        # 6) L·∫•y m√£ x√°c minh email
        def wait_for_dropmail_code_mobile(session_id, max_checks=30, interval=2):
            url = "https://dropmail.me/api/graphql/my_token_123"
            query = """query($id: ID!){ session(id:$id){ mails{ headerSubject text } } }"""
            for i in range(max_checks):
                try:
                    resp = requests.post(url, json={"query": query, "variables": {"id": session_id}}, timeout=10)
                    data = resp.json()
                    mails = data["data"]["session"]["mails"] if data.get("data") else []
                    if mails:
                        subj = mails[0].get("headerSubject","")
                        text = mails[0].get("text","")
                        m = re.search(r"\b\d{6}\b", subj) or re.search(r"\b\d{6}\b", text)
                        if m: return m.group(0)
                except: pass
                time.sleep(interval)
            return None

        def wait_for_tempmail_code_mobile(email, max_checks=30, interval=2):
            headers = {"accept": "application/json"}
            email_enc = email.replace("@","%40")
            mail_url = f"https://free.priyo.email/api/messages/{email_enc}/7jkmE5NM2VS6GqJ9pzlI"
            for i in range(max_checks):
                try:
                    r = requests.get(mail_url, headers=headers, timeout=10)
                    if r.status_code == 200:
                        msgs = r.json()
                        if msgs:
                            subj = msgs[0].get("subject","")
                            m = re.search(r"\b\d{6}\b", subj)
                            if m: return m.group(0)
                except: pass
                time.sleep(interval)
            return None

        try:
            log("‚è≥ [Mobile] ƒêang ch·ªù m√£ x√°c minh trong email...")
            code = None
            if dropmail_var.get():
                code = wait_for_dropmail_code_mobile(session_id)
            elif tempmail_var.get():
                code = wait_for_tempmail_code_mobile(email)

            if not code:
                log("‚è∞ [Mobile] Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ x√°c minh ‚Äî restart v√≤ng l·∫∑p.")
                try:
                    release_position(driver); driver.quit()
                except: pass
                continue

            log(f"üî¢ [Mobile] M√£ x√°c minh: {code}")
            # Nh·∫≠p m√£ x√°c minh
            code_input = wait.until(EC.presence_of_element_located(
                (By.XPATH, "//input[@aria-label='Confirmation code']")))
            code_input.clear()
            type_text_slowly(code_input, code, delay=get_mobile_delay("Code_type", 0.30))
            log("‚úÖ [Mobile] ƒê√£ nh·∫≠p m√£ x√°c minh.")
            time.sleep(get_mobile_delay("Code_sleep", 2))

            # NEXT sau code
            try:
                next_btn = wait.until(EC.element_to_be_clickable(
                    (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
                next_btn.click()
                log("üéâ [Mobile] Ho√†n th√†nh b∆∞·ªõc x√°c minh m√£.")
                time.sleep(get_mobile_delay("Code_next", 2))
            except:
                log("‚ö†Ô∏è [Mobile] Kh√¥ng th·∫•y Next sau khi nh·∫≠p code.")
            time.sleep(2)
        except Exception as e:
            log(f"‚ùå [Mobile] L·ªói khi l·∫•y/nh·∫≠p m√£ x√°c minh: {e}")
            try:
                release_position(driver); driver.quit()
            except: pass
            continue
        warp_off()

        # 7) Nh·∫≠p Password ‚Üí Next qua v√†i b∆∞·ªõc
        try:
            # 7) Nh·∫≠p Password ‚Üí Next
            pass_input = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[aria-label="Password"]')))
            type_text_slowly(pass_input, password, delay=get_mobile_delay("Pass_type", 0.18))
            log("‚úÖ [Mobile] ƒê√£ nh·∫≠p pass.")
            time.sleep(get_mobile_delay("Pass_sleep", 3))

            # Next sau pass (m·ªôt ho·∫∑c v√†i m√†n h√¨nh)
            for _ in range(3):
                try:
                    nb = wait.until(EC.element_to_be_clickable(
                        (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
                    nb.click()
                    log("‚û°Ô∏è [Mobile] Next‚Ä¶")
                    time.sleep(get_mobile_delay("Pass_next", 2))
                except:
                    break
        except Exception as e:
            log(f"‚ùå [Mobile] L·ªói khi nh·∫≠p pass/next: {e}")

        # 8) Nh·∫≠p Age
        try:
            age_input = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[aria-label="Age"]')))
            type_text_slowly(age_input, age, delay=get_mobile_delay("Tu·ªïi_type", 0.18))
            log("‚úÖ [Mobile] ƒê√£ nh·∫≠p tu·ªïi.")
            time.sleep(get_mobile_delay("Tu·ªïi_sleep", 2))

            nb = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
            nb.click()
            log("‚û°Ô∏è [Mobile] Next sau tu·ªïi.")
            time.sleep(get_mobile_delay("Tu·ªïi_next", 2))

            # click OK n·∫øu c√≥
            driver.execute_script("""
                let okBtn = [...document.querySelectorAll("div[role='button']")]
                    .find(el => el.innerText.trim() === "OK");
                if (okBtn) okBtn.click();
            """)
        except Exception as e:
            log(f"‚ö†Ô∏è [Mobile] B·ªè qua Age (kh√¥ng th·∫•y field): {e}")

        # 9) Nh·∫≠p Full name ‚Üí Next
        try:
            full_name_input = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[aria-label="Full name"]')))
            type_text_slowly(full_name_input, full_name, delay=get_mobile_delay("H·ªç t√™n_type", 0.18))
            log("‚úÖ [Mobile] ƒê√£ nh·∫≠p T√™n.")
            time.sleep(get_mobile_delay("H·ªç t√™n_sleep", 2))

            nb = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
            nb.click()
            log("‚û°Ô∏è [Mobile] Next sau h·ªç t√™n.")
            time.sleep(get_mobile_delay("H·ªç t√™n_next", 2))
        except Exception as e:
            log(f"‚ùå [Mobile] L·ªói nh·∫≠p t√™n/Next: {e}")

        # 10) Username (ƒë·ªçc l·∫°i g·ª£i √Ω) ‚Üí Next
        try:
            ui = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[aria-label="Username"]')))
            uname_val = ui.get_attribute("value") or username
            if uname_val != username:
                log(f"üîÅ [Mobile] Username g·ª£i √Ω: {username} ‚ûú {uname_val}")
                username = uname_val
            nb = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
            nb.click()
            log("‚û°Ô∏è [Mobile] Next sau username.")
        except Exception as e:
            log(f"‚ö†Ô∏è [Mobile] B·ªè qua ki·ªÉm username: {e}")
        time.sleep(10)
        # 11) I agree (n·∫øu c√≥ nhi·ªÅu l·∫ßn)
        try:
            for i in range(3):
                try:
                    agree = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable(
                            (By.CSS_SELECTOR, 'div[role="button"][aria-label="I agree"]')))
                    agree.click()
                    log(f"‚úÖ [Mobile] ƒê√£ b·∫•m I agree l·∫ßn {i+1}.")
                    time.sleep(6)
                except:
                    break
        except Exception as e:
            log(f"‚ö†Ô∏è [Mobile] Kh√¥ng th·∫•y 'I agree' th√™m: {e}")

        log("üéâ [Mobile] Ho√†n t·∫•t ƒëƒÉng k√Ω.")
        time.sleep(20)
        # === CHECK LIVE/DIE ===
        try:
            global live_count, die_count
            profile_url = f"https://www.instagram.com/{username}/"
            log("üåê ƒêang ki·ªÉm tra tr·∫°ng th√°i Live/Die...")
            driver.get(profile_url)
            time.sleep(6)  # c√≥ th·ªÉ thay b·∫±ng WebDriverWait n·∫øu mu·ªën

            current_url = driver.current_url
            page_source = driver.page_source

            # M·∫∑c ƒë·ªãnh
            status_text = "Unknown"

            # Ph√¢n lo·∫°i tr·∫°ng th√°i
            if "/accounts/login/" in current_url or "Sorry, this page isn't available" in page_source:
                status_text = "Die"
            elif "checkpoint" in current_url.lower() or "Confirm you're human" in page_source:
                status_text = "Checkpoint"
            elif (f"@{username}" in page_source) or (f"instagram.com/{username}" in current_url):
                status_text = "Live"
            else:
                status_text = "Die"

            # C·∫≠p nh·∫≠t bi·∫øn ƒë·∫øm + log
            if status_text == "Live":
                live_count += 1
                live_var.set(str(live_count))
                update_rate()
                log("‚úÖ T√†i kho·∫£n Live")
            else:
                die_count += 1
                die_var.set(str(die_count))
                update_rate()
                log(f"‚ùå {status_text} ‚Äî t√≠nh l√† Die")

            # === L·∫•y Cookie ===
            try:
                cookies = driver.get_cookies()
                cookie_str = "; ".join([f"{c['name']}={c['value']}" for c in cookies]) if cookies else ""
                log("üç™ Cookie hi·ªán t·∫°i:")
                log(cookie_str if cookie_str else "(empty)")
                time.sleep(3)
            except Exception as e:
                cookie_str = ""
                log(f"‚ùå L·ªói khi l·∫•y cookie: {repr(e)}")

            # N·∫øu KH√îNG ph·∫£i Live th√¨ insert ngay b√¢y gi·ªù
            if status_text.lower() in ("die", "checkpoint", "unknown"):
                # n·∫øu c√≥ app (Tk root) th√¨:
                try:
                    app.after(0, lambda: insert_to_tree(status_text, username, password, email, cookie_str, two_fa_code=""))
                except:
                    insert_to_tree(status_text, username, password, email, cookie_str, two_fa_code="")

                # L∆∞u file (optional) ‚Äì c√≥ fallback cho save_format
                try:
                    file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Die.txt")
                    info_map = {"Username": username, "Pass": password, "Mail": email, "Cookie": cookie_str, "2FA": ""}
                    fields = save_format if ('save_format' in globals() and isinstance(save_format, (list,tuple)) and save_format) \
                            else ["Username","Pass","Mail","Cookie","2FA"]
                    line = "|".join([info_map.get(field, "") for field in fields])
                    with open(file_path, "a", encoding="utf-8") as f:
                        f.write(line + "\n")
                    log(f"üíæ (Die early) ƒê√£ l∆∞u th√¥ng tin v√†o '{file_path}'")
                except Exception as e:
                    log(f"‚ùå (Die early) L·ªói khi l∆∞u file: {repr(e)}")

                # Quy·∫øt ƒë·ªãnh restart
                try:
                    time.sleep(2)
                    release_position(driver)
                    driver.quit()
                    driver = None
                except:
                    pass
                log("üîÅ Kh·ªüi ch·∫°y l·∫°i phi√™n...")
                continue
            else:
                log("‚û°Ô∏è LIVE: Ti·∫øp t·ª•c B∆Ø·ªöC TI·∫æP THEO")

        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi check live/die: {repr(e)}")

        # Quay l·∫°i giao di·ªán Desktop
        log("üñ• Quay l·∫°i giao di·ªán Desktop...")
        driver.execute_cdp_cmd("Emulation.clearDeviceMetricsOverride", {})
        driver.execute_cdp_cmd("Emulation.setUserAgentOverride", {
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
        })
        driver.refresh()
        time.sleep(5)

        # === B∆Ø·ªöC 7: X·ª≠ l√Ω b·∫≠t 2FA ===
        if enable_2fa.get():
            try:
                pause_event.wait()
                log("üîê B·∫Øt ƒë·∫ßu b·∫≠t x√°c th·ª±c hai y·∫øu t·ªë (2FA)...")
                time.sleep(3)

                # Truy c·∫≠p trang b·∫≠t 2FA
                driver.get("https://accountscenter.instagram.com/password_and_security/two_factor/?theme=dark")
                WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                time.sleep(5)

                # Ch·ªçn t√†i kho·∫£n Instagram
                try:
                    account_btn = WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((
                            By.XPATH, "//div[@role='button' and descendant::div[contains(text(),'Instagram')]]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", account_btn)
                    time.sleep(1)
                    account_btn.click()
                    log("‚úÖ ƒê√£ ch·ªçn t√†i kho·∫£n Instagram")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ö†Ô∏è Kh√¥ng ch·ªçn ƒë∆∞·ª£c t√†i kho·∫£n: {repr(e)}")
                    return

                # Nh·∫•n n√∫t "Continue"
                try:
                    continue_btn = WebDriverWait(driver, 20).until(
                        EC.presence_of_element_located((
                            By.XPATH,
                            "//div[@role='button' and descendant::span[normalize-space(text())='Continue']]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", continue_btn)
                    time.sleep(1)
                    driver.execute_script("arguments[0].click();", continue_btn)
                    log("‚úÖ ƒê√£ click n√∫t Continue")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ùå Kh√¥ng th·ªÉ click n√∫t Continue: {repr(e)}")
                    return

                # L·∫•y m√£ 2FA secret
                try:
                    span_xpath = "//div[contains(@class,'x16grhtn')]//span"
                    span_elem = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, span_xpath))
                    )
                    two_fa_code = span_elem.text.strip().replace(" ", "")
                    log(f"üîê M√£ 2FA secret: {two_fa_code}")
                except Exception as e:
                    log(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ 2FA secret: {repr(e)}")
                    return

                # Nh·∫•n n√∫t Next ƒë·ªÉ chuy·ªÉn t·ªõi nh·∫≠p m√£ OTP
                try:
                    next_btn = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((
                            By.XPATH, "//div[@role='button' and descendant::span[normalize-space(text())='Next']]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_btn)
                    time.sleep(1)
                    driver.execute_script("arguments[0].click();", next_btn)
                    log("‚úÖ ƒê√£ nh·∫•n n√∫t Next ƒë·ªÉ nh·∫≠p m√£ OTP")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ùå Kh√¥ng nh·∫•n ƒë∆∞·ª£c n√∫t Next sau m√£ secret: {repr(e)}")
                    return

                # Sinh m√£ OTP t·ª´ m√£ secret b·∫±ng pyotp
                otp_code = None
                try:
                    totp = pyotp.TOTP(two_fa_code)
                    otp_code = totp.now()
                    log(f"üî¢ M√£ OTP t·∫°o t·ª´ pyotp: {otp_code}")
                except Exception as e:
                    log(f"‚ùå L·ªói khi t·∫°o OTP t·ª´ pyotp: {repr(e)}")
                    return

                # Nh·∫≠p m√£ OTP v√†o √¥ nh·∫≠p
                if otp_code:
                    try:
                        otp_input = WebDriverWait(driver, 10).until(
                            EC.presence_of_element_located((By.XPATH, "//input[@type='text' and @maxlength='6']"))
                        )
                        otp_input.clear()
                        otp_input.send_keys(otp_code)
                        log("‚úÖ ƒê√£ nh·∫≠p m√£ OTP.")
                        time.sleep(2)
                    except Exception as e:
                        log(f"‚ùå L·ªói khi nh·∫≠p OTP: {repr(e)}")
                    # Nh·∫•n n√∫t Next cu·ªëi c√πng ƒë·ªÉ ho√†n t·∫•t b·∫≠t 2FA
                    try:
                        driver.execute_script("""
                            [...document.querySelectorAll("div[role='button']")].forEach(el => {
                                if (el.innerText.trim() === 'Next') el.click();
                            });
                        """)
                        log("‚úÖ ƒê√£ nh·∫•n n√∫t Next ƒë·ªÉ ho√†n t·∫•t b·∫≠t 2FA")
                        time.sleep(6)
                        wait_all("B·∫≠t 2FA", thread_id)
                    except Exception as e:
                        log(f"‚ùå L·ªói khi nh·∫•n n√∫t Next ho√†n t·∫•t 2FA: {repr(e)}")
                        return
                    driver.execute_script("""
                    const btn = [...document.querySelectorAll("button, div[role=button]")]
                        .find(el => el.textContent.trim() === "Done");

                    if (btn) {
                        btn.click();
                        return true;
                    } else {
                        return false;
                    }
                    """)
            except Exception as e:
                log(f"‚ùå L·ªói to√†n b·ªô b∆∞·ªõc b·∫≠t 2FA: {repr(e)}")
            time.sleep(3)

            # === Insert v√†o Treeview ===
            try:
                status_tag = "LIVE" if status_text.lower() == "live" else "DIE"
                phone_val = locals().get("phone", "")
                token_val = locals().get("token", "")

                tree.insert("", "end", values=(
                    len(tree.get_children())+1, status_text, username, password, email, phone_val, cookie_str,
                    locals().get("two_fa_code", ""), token_val, "127.0.0.1", "NoProxy",
                    "LIVE" if status_tag=="LIVE" else "",
                    "DIE" if status_tag=="DIE" else ""
                ), tags=(status_tag,))
            except Exception as e:
                log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m v√†o Treeview: {repr(e)}")

            # === L∆ØU TH√îNG TIN ===
            try:
                file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Live.txt")

                info_map = {
                    "Username": username,
                    "Pass": password,
                    "Mail": email,
                    "Cookie": cookie_str if 'cookie_str' in locals() else '',
                    "2FA": two_fa_code if 'two_fa_code' in locals() else '',
                }

                # d√πng tr·ª±c ti·∫øp save_format t·ª´ UI
                line = "|".join([info_map.get(field, "") for field in save_format])

                with open(file_path, "a", encoding="utf-8") as f:
                    f.write(line + "\n")

                log(f"üíæ ƒê√£ l∆∞u th√¥ng tin v√†o '{file_path}'")
            except Exception as e:
                log(f"‚ùå L·ªói khi l∆∞u file: {repr(e)}")

        # === B∆Ø·ªöC 5: Follow ===
        if enable_follow.get():
            try:
                pause_event.wait()
                log("üöÄ B·∫Øt ƒë·∫ßu follow c√°c link...")
                time.sleep(3)

                follow_links = [
                    "https://www.instagram.com/shx_pe06/",
                    "https://www.instagram.com/wynnieinclouds/",
                    "https://www.instagram.com/ductoan1103/",
                    "https://www.instagram.com/nba/",
                    "https://www.instagram.com/datgia172/",
                    "https://www.instagram.com/cristiano/",
                    "https://www.instagram.com/leomessi/",
                    "https://www.instagram.com/hansara.official/",
                    "https://www.instagram.com/lilbieber/",
                    "https://www.instagram.com/ne9av/",
                    "https://www.instagram.com/joyce.pham1106/",
                    "https://www.instagram.com/khanhvyccf/",
                    "https://www.instagram.com/chaubui_/",
                    "https://www.instagram.com/ngockem_/",
                    "https://www.instagram.com/kyduyen1311/",
                    "https://www.instagram.com/baohannguyenxhelia/",
                    "https://www.instagram.com/linnhhh.m/",
                    "https://www.instagram.com/loungu/",
                    "https://www.instagram.com/_choiiii__/",
                    "https://www.instagram.com/kjmbae/"
                ]

                # L·∫•y s·ªë l∆∞·ª£ng follow t·ª´ √¥ nh·∫≠p
                try:
                    num_follow = int(follow_count_entry.get())
                except:
                    num_follow = 5
                num_follow = min(num_follow, len(follow_links))  

                selected_links = random.sample(follow_links, num_follow)

                for link in selected_links:
                    try:
                        driver.get(link)
                        log(f"üåê ƒê√£ m·ªü link: {link}")
                        time.sleep(5)

                        follow_button = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Follow']"))
                        )
                        follow_button.click()
                        log(f"‚úÖ ƒê√£ follow: {link}")
                        time.sleep(6)
                    except Exception as e:
                        log(f"‚ùå Kh√¥ng th·ªÉ follow {link}: {repr(e)}")

            except Exception as e:
                log(f"‚ùå L·ªói trong qu√° tr√¨nh follow: {repr(e)}")
                wait_all("Follow", thread_id)

        # === B∆Ø·ªöC 6: Upload avatar ·ªü giao di·ªán mobile ===
        if enable_avatar.get():
            time.sleep(4)
            try:
                log("üì± Chuy·ªÉn sang giao di·ªán Mobile (iPhone 15 Pro Max)...")
                driver.execute_cdp_cmd("Emulation.setDeviceMetricsOverride", {
                    "mobile": True,
                    "width": 390,
                    "height": 844,
                    "deviceScaleFactor": 3
                })
                driver.execute_cdp_cmd("Emulation.setUserAgentOverride", {
                    "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1"
                })
                driver.refresh()
                time.sleep(8)

                # ƒê√≥ng popup Not Now n·∫øu c√≥
                driver.execute_script("""
                    let btn = [...document.querySelectorAll("span,button")]
                        .find(el => ["Not now", "Kh√¥ng ph·∫£i b√¢y gi·ªù"].includes(el.innerText.trim()));
                    if (btn) btn.click();
                """)
                time.sleep(3)

                # M·ªü trang ch·ªânh s·ª≠a h·ªì s∆°
                log("üë§ M·ªü trang ch·ªânh s·ª≠a h·ªì s∆° ƒë·ªÉ upload avatar...")
                driver.get("https://www.instagram.com/accounts/edit/")
                WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.XPATH, "//input[@accept='image/jpeg,image/png']"))
                )
                time.sleep(8)
                
                # Nh·∫•n Prefer not to say
                driver.execute_script("""
                    const preferEl = document.evaluate(
                        "//div[span[normalize-space(text())='Prefer not to say']]",
                        document,
                        null,
                        XPathResult.FIRST_ORDERED_NODE_TYPE,
                        null
                    ).singleNodeValue;
                    if (preferEl) {
                        preferEl.click();
                    } else {
                        console.warn("‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ 'Prefer not to say'");
                    }
                    """)
                time.sleep(3)
                # Ch·ªçn female
                driver.execute_script("""
                    const femaleOption = document.evaluate(
                        "//span[normalize-space(text())='Female']",
                        document,
                        null,
                        XPathResult.FIRST_ORDERED_NODE_TYPE,
                        null
                    ).singleNodeValue;
                    if (femaleOption) {
                        femaleOption.click();
                    } else {
                        console.warn("‚ùå Kh√¥ng t√¨m th·∫•y option 'Female'");
                    }
                    """)
                time.sleep(3)

                # ƒêi·ªÅn Bio (theo l·ª±a ch·ªçn GUI) ‚Äî chu·∫©n React (setNativeValue + input/change)
                bio_value = get_bio_text()
                driver.execute_script("""
                (function(val){
                    const el = document.querySelector("textarea[name='biography'], #pepBio, textarea[aria-label='Bio'], textarea[aria-label='Ti·ªÉu s·ª≠']");
                    if (!el) { console.warn("‚ùå Kh√¥ng t√¨m th·∫•y √¥ Bio (#pepBio/biography)"); return; }
                    const proto  = el.tagName === 'TEXTAREA' ? HTMLTextAreaElement.prototype : HTMLInputElement.prototype;
                    const setter = Object.getOwnPropertyDescriptor(proto, 'value')?.set;
                    if (setter) setter.call(el, val); else el.value = val;  // fallback
                    el.dispatchEvent(new Event('input',  {bubbles:true}));
                    el.dispatchEvent(new Event('change', {bubbles:true}));
                    el.blur();
                    console.log("‚úçÔ∏è ƒê√£ ƒëi·ªÅn Bio:", val);
                })(arguments[0]);
                """, bio_value)
                log(f"‚úçÔ∏è ƒê√£ ƒëi·ªÅn Bio: {bio_value}")
                time.sleep(1.5)

                # Nh·∫•n Submit
                driver.execute_script("""
                (function(){
                    const xps = [
                    "//div[@role='button' and normalize-space(text())='Submit']",
                    "//button[normalize-space()='Submit']",
                    "//button[normalize-space()='Save']",
                    "//button[normalize-space()='L∆∞u']",
                    "//div[@role='button' and .//span[normalize-space(text())='Submit']]"
                    ];
                    for (const xp of xps) {
                    const el = document.evaluate(xp, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                    if (el) { el.scrollIntoView({block:'center'}); el.click(); console.log("‚û°Ô∏è ƒê√£ click Submit/Save"); return; }
                    }
                    console.warn("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Submit/Save");
                })();
                """)
                time.sleep(2)

                # L·∫•y ·∫£nh v√† upload
                if not ava_folder_path or not os.path.exists(ava_folder_path):
                    log("‚ùå Ch∆∞a ch·ªçn th∆∞ m·ª•c ·∫£nh ho·∫∑c th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i.")
                else:
                    image_files = [f for f in os.listdir(ava_folder_path) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
                    if image_files:
                        selected_path = os.path.join(ava_folder_path, random.choice(image_files))
                        driver.find_element(By.XPATH, "//input[@accept='image/jpeg,image/png']").send_keys(selected_path)
                        log(f"‚úÖ ƒê√£ upload avatar: {os.path.basename(selected_path)}")
                        time.sleep(3)
                        # L∆∞u avatar
                        WebDriverWait(driver, 15).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[text()='Save']"))
                        ).click()
                        log("üíæ ƒê√£ l∆∞u avatar")
                        time.sleep(10)

                        # N·∫øu c√≥ n√∫t Post th√¨ click
                        try:
                            post_btn = WebDriverWait(driver, 5).until(
                                EC.element_to_be_clickable((By.XPATH, "//button[contains(@class,'_a9--') and text()='Post']"))
                            )
                            driver.execute_script("arguments[0].click();", post_btn)
                            log("‚úÖ ƒê√£ click Post")
                            time.sleep(12)
                        except:
                            log("‚Ñπ Kh√¥ng th·∫•y n√∫t Post, b·ªè qua.")
                    else:
                        log("‚ùå Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá trong th∆∞ m·ª•c.")
            except Exception as e:
                log(f"‚ùå L·ªói B∆∞·ªõc 6: {repr(e)}")

            # Quay l·∫°i giao di·ªán Desktop
            log("üñ• Quay l·∫°i giao di·ªán Desktop...")
            driver.execute_cdp_cmd("Emulation.clearDeviceMetricsOverride", {})
            driver.execute_cdp_cmd("Emulation.setUserAgentOverride", {
                "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
            })
            driver.refresh()
            time.sleep(5)

        # === B·∫¨T CH·∫æ ƒê·ªò CHUY√äN NGHI·ªÜP (Creator -> Personal blog) ===
        if enable_Chuyen_nghiep.get():
            try:
                pause_event.wait()
                log("üíº ƒêang b·∫≠t ch·∫ø ƒë·ªô chuy√™n nghi·ªáp (Creator -> Personal blog)...")
                driver.get("https://www.instagram.com/accounts/convert_to_professional_account/")
                WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                time.sleep(4)

                # 1) Ch·ªçn Creator
                account_type = pro_type_var.get()
                if account_type == "Creator":
                    selector = "IGDSRadioButtonmedia_creator"
                else:
                    selector = "IGDSRadioButtonbusiness"
                try:
                    radio = WebDriverWait(driver, 8).until(
                        EC.element_to_be_clickable((By.ID, selector))
                    )
                    radio.click()
                    log(f"‚úÖ ƒê√£ ch·ªçn {account_type}")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t ch·ªçn {account_type}: {repr(e)}")

                # 2) Nh·∫•n Next qua 2 m√†n h√¨nh gi·ªõi thi·ªáu
                for i in range(2):
                    try:
                        next_btn = WebDriverWait(driver, 5).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Next' or normalize-space()='Ti·∫øp']"))
                        )
                        next_btn.click()
                        log(f"‚û°Ô∏è ƒê√£ nh·∫•n Next {i+1}")
                        time.sleep(1.5)
                    except Exception as e:
                        log(f"‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y Next {i+1}: {repr(e)}")
                        break
                
                # 3) Tick Show category on profile
                driver.execute_script("""
                    document.querySelectorAll('input[type="checkbox"][aria-label="Show category on profile"]').forEach(el => { 
                        if (el.getAttribute("aria-checked") === "false") {
                            el.click();
                        }
                    });
                """)
                time.sleep(3)

                # 4) Tick Category theo l·ª±a ch·ªçn GUI
                category = category_var.get()
                category_map = {
                    "Personal blog": "2700",
                    "Product/service": "2201",
                    "Art": "2903",
                    "Musician/band": "180164648685982",
                    "Shopping & retail": "200600219953504",
                    "Health/beauty": "2214",
                    "Grocery Store": "150108431712141"
                }
                cat_code = category_map.get(category)
                if cat_code:
                    js = f'document.querySelector(\'input[type="radio"][aria-label="{cat_code}"]\').click();'
                    driver.execute_script(js)
                    log(f"‚úÖ ƒê√£ ch·ªçn Category: {category}")
                    time.sleep(3)
                else:
                    log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√£ category cho {category}")

                # 5) Nh·∫•n Done 
                driver.execute_script("""
                    document.querySelectorAll('button[type="button"]').forEach(el => {
                        if (el.innerText.trim() === 'Done') el.click();
                    });
                """)
                time.sleep(3)
                # 6) X√°c nh·∫≠n popup Switch to Professional Account
                driver.execute_script("""
                    document.querySelectorAll('button').forEach(el => { 
                        if (el.innerText.trim() === 'Continue' || el.innerText.trim() === 'Ti·∫øp t·ª•c') {
                            el.click();
                        }
                    });
                """)
                time.sleep(15)
                # 7) Nh·∫•n Done ƒë·ªÉ ho√†n th√†nh 
                driver.execute_script("document.querySelector('button._aswp._aswr._aswu._aswy._asw_._asx2').click()")
                time.sleep(5)
                
            except Exception as e:
                log(f"L·ªói khi b·∫≠t ch·∫ø ƒë·ªô chuy√™n nghi·ªáp: {repr(e)}")

            # === K·∫æT TH√öC PHI√äN ===
            try:
                time.sleep(2)
                release_position(driver)       # ‚úÖ tr·∫£ ch·ªó
                driver.quit()
                log("üëã ƒê√£ ƒë√≥ng tr√¨nh duy·ªát (driver.quit()).")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi quit driver: {repr(e)}")

# ================================================== DESKTOP =============================================================
def run(thread_id=None):
    while True:
        pause_event.wait() 
        log("üü¢ B·∫Øt ƒë·∫ßu t·∫°o t√†i kho·∫£n...")

        if dropmail_var.get():
            log("üì® L·∫•y email t·ª´ DropMail.me...")
            email, session_id = get_dropmail_email()
            if not email:
                log("‚õî Kh√¥ng th·ªÉ l·∫•y email DropMail ‚Äî d·ª´ng ti·∫øn tr√¨nh.")
                return
            log(f"‚úÖ Email DropMail: {email}")

        elif tempmail_var.get():
            log("üì® L·∫•y email t·ª´ temp-mail.asia (API)...")
            headers = {"accept": "application/json"}
            resp = requests.get("https://free.priyo.email/api/random-email/7jkmE5NM2VS6GqJ9pzlI", headers=headers)

            if resp.status_code == 200:
                email = resp.json()["email"]
                log(f"‚úÖ Email l·∫•y ƒë∆∞·ª£c: {email}")
            else:
                log(f"‚ùå L·ªói HTTP {resp.status_code}")
                return

        else:
            log("‚õî B·∫°n ch∆∞a ch·ªçn d·ªãch v·ª• mail t·∫°m (DropMail ho·∫∑c Temp-Mail).")
            return

        def generate_vietnamese_name():
            ho_list = ["Nguy·ªÖn", "Tr·∫ßn", "L√™", "Ph·∫°m", "Ho√†ng", "Phan", "V≈©", "ƒê·∫∑ng", "B√πi", "ƒê·ªó"]
            ten_dem_list = ["VƒÉn", "Th·ªã", "H·ªØu", "Gia", "Ng·ªçc", "ƒê·ª©c", "Thanh", "Minh", "Quang", "Tr·ªçng"]
            ten_list = ["Anh", "B√¨nh", "Ch√¢u", "D≈©ng", "H√†", "H√πng", "Lan", "Linh", "Nam", "Ph√∫c", "Qu·ª≥nh", "S∆°n", "Trang", "Tu·∫•n", "Vy"]

            ho = random.choice(ho_list)
            ten_dem = random.choice(ten_dem_list)
            ten = random.choice(ten_list)
            return f"{ho} {ten_dem} {ten}"  # Tr·∫£ v·ªÅ c·∫£ h·ªç + t√™n ƒë·ªám + t√™n

        full_name = generate_vietnamese_name()
        username_base = re.sub(r'[^a-z0-9]', '', unidecode(full_name.lower()))
        username = f"{username_base}{random.randint(100, 999)}"
        username = username
        password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
        log(f"üë§ H·ªç t√™n: {full_name}")
        log(f"üî§ Username: {username}")
        log(f"üîê M·∫≠t kh·∫©u: {password}")

        try:
            # === B∆Ø·ªöC 1: B·∫≠t WARP v√† m·ªü Instagram ===
            time.sleep(3)
            pause_event.wait()
            log("üåê M·ªü Instagram...")

            proxy = proxy_entry.get().strip()

            if warp_enabled:
                log("üåê ƒêang b·∫≠t WARP ‚Üí b·ªè qua proxy.")
            else:
                if proxy:
                    log(f"üåê WARP t·∫Øt ‚Üí d√πng proxy: {proxy}")
                    # options will be created below
                else:
                    log("üåê WARP t·∫Øt nh∆∞ng kh√¥ng c√≥ proxy ‚Üí d√πng IP th·∫≠t.")

            options = Options()
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_argument("--start-maximized")

            # ‚úÖ n·∫øu c√≥ proxy th√¨ th√™m (gi·ªØ l·∫°i logic c≈©)
            if proxy and not warp_enabled:
                options.add_argument(f"--proxy-server=http://{proxy}")

            # ‚úÖ n·∫øu c√≥ chrome_path th√¨ d√πng binary_location (gi·ªëng V3-Mobile)
            if chrome_path:
                options.binary_location = chrome_path

            driver_path = os.path.join(os.getcwd(), "chromedriver.exe")
            service = Service(driver_path)
            driver = se_webdriver.Chrome(service=service, options=options)
            all_drivers.append(driver)

            # üïí S·∫Øp x·∫øp Chrome gi·ªëng V3-Mobile
            threading.Thread(target=arrange_after_open, args=(driver,), daemon=True).start()

            driver.get("https://www.instagram.com/accounts/emailsignup/")
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.NAME, "emailOrPhone"))
            )
            log(f"‚úÖ [Lu·ªìng {thread_id}] Chrome ƒë√£ m·ªü xong v√† trang Instagram s·∫µn s√†ng.")
            time.sleep(3)
            WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.NAME, "emailOrPhone")))
            log(f"‚úÖ [Lu·ªìng {thread_id}] Chrome ƒë√£ m·ªü xong v√† trang Instagram s·∫µn s√†ng.")
            # === ƒê·ªíNG B·ªò: ch·ªù t·∫•t c·∫£ lu·ªìng s·∫µn s√†ng ===
            if sync_barrier is not None:
                try:
                    log(f"‚è≥ [Lu·ªìng {thread_id}] ƒêang ch·ªù c√°c lu·ªìng kh√°c (timeout {barrier_timeout}s)...")
                    sync_barrier.wait(timeout=barrier_timeout)
                    log(f"üöÄ [Lu·ªìng {thread_id}] T·∫•t c·∫£ lu·ªìng ƒë√£ s·∫µn s√†ng. B·∫Øt ƒë·∫ßu ƒë·ªìng lo·∫°t.")
                except threading.BrokenBarrierError:
                    log(f"‚ö†Ô∏è [Lu·ªìng {thread_id}] Barrier timeout/broken, ti·∫øp t·ª•c.")
            else:
                log(f"‚ö†Ô∏è [Lu·ªìng {thread_id}] sync_barrier ch∆∞a ƒë∆∞·ª£c t·∫°o ‚Äî ti·∫øp t·ª•c lu√¥n.")

            time.sleep(2)
            type_text_slowly(
                driver.find_element(By.NAME, "emailOrPhone"),
                email,
                delay=get_delay("Mail_type", 0.18)
            )
            time.sleep(get_delay("Mail_sleep", 1))
            type_text_slowly(
                driver.find_element(By.NAME, "password"),
                password,
                delay=get_delay("Pass_type", 0.18)
            )
            time.sleep(get_delay("Pass_sleep", 3))
            type_text_slowly(
                driver.find_element(By.NAME, "fullName"),
                full_name,
                delay=get_delay("H·ªç T√™n_type", 0.18)
            )
            time.sleep(get_delay("H·ªç T√™n_sleep", 2))
            type_text_slowly(
                driver.find_element(By.NAME, "username"),
                username,
                delay=get_delay("Username_type", 0.18)
            )
            time.sleep(get_delay("Username_sleep", 3))
            time.sleep(2)
            driver.execute_script("""
                document.querySelectorAll('button[type="button"]').forEach(el => {
                    if (el.innerText.trim() === "Refresh suggestion") {
                        el.click();
                        console.log("‚úÖ ƒê√£ click n√∫t Refresh suggestion");
                    }
                });
            """)
            time.sleep(2)
            driver.execute_script("""
                document.querySelectorAll('button[type="button"]').forEach(el => {
                    if (el.innerText.trim() === "Refresh suggestion") {
                        el.click();
                        console.log("‚úÖ ƒê√£ click n√∫t Refresh suggestion");
                    }
                });
            """)
            time.sleep(2)
            try:
                new_username = driver.find_element(By.NAME, "username").get_attribute("value") or username
                if new_username != username:
                    log(f"üîÅ Username sau refresh: {username}  ‚ûú  {new_username}")
                    username = new_username  # c·∫≠p nh·∫≠t ƒë·ªÉ b∆∞·ªõc check live & l∆∞u file d√πng t√™n m·ªõi nh·∫•t
                else:
                    log("‚ÑπÔ∏è Username kh√¥ng ƒë·ªïi sau 2 l·∫ßn refresh.")
            except Exception as e:
                log(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c username sau refresh: {e}")
            log("‚úÖ ƒê√£ ƒëi·ªÅn xong form ƒëƒÉng k√Ω")

            wait_all("ƒêi·ªÅn form", thread_id)
            pause_event.wait()
            driver.find_element(By.XPATH, "//button[@type='submit']").click()
            log("‚û°Ô∏è ƒê√£ ·∫•n Ti·∫øp theo")
            time.sleep(get_delay("Next_sleep", 2))

            # === B∆Ø·ªöC 2: T·∫Øt WARP ƒë·ªÉ ch·ªçn ng√†y sinh ===
            pause_event.wait()
            log("üìÖ ƒêang ch·ªù ph·∫ßn ch·ªçn ng√†y sinh...")
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.XPATH, "//select[@title='Month:']"))
            )
            time.sleep(3)
            year = str(random.randint(1999, 2003))
            month = str(random.randint(1, 12))
            day = str(random.randint(1, 28))

            def select_dropdown_value(driver, dropdown_xpath, value):
                dropdown = Select(driver.find_element(By.XPATH, dropdown_xpath))
                dropdown.select_by_value(value)
                time.sleep(2)

            select_dropdown_value(driver, "//select[@title='Month:']", month)
            select_dropdown_value(driver, "//select[@title='Day:']", str(day))
            select_dropdown_value(driver, "//select[@title='Year:']", year)

            log(f"üìÖ ƒê√£ ch·ªçn ng√†y: {day}, th√°ng: {month}, nƒÉm: {year}")

            next_btn = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Next')]") )
            )
            driver.execute_script("arguments[0].click();", next_btn)
            log("‚úÖ ƒê√£ ch·ªçn ng√†y sinh v√† ·∫•n Ti·∫øp theo")
            wait_all("Ch·ªçn ng√†y sinh", thread_id)

            # === B∆Ø·ªöC 3: B·∫≠t WARP ƒë·ªÉ l·∫•y m√£ x√°c minh email ===
            pause_event.wait()
            log("‚è≥ ƒê·ª£i 10 gi√¢y ƒë·ªÉ l·∫•y m√£ x√°c minh t·ª´ email...")
            time.sleep(6)
            # --- H√†m ƒë·ª£i DropMail V·ªöI GI·ªöI H·∫†N ---
            def wait_for_dropmail_code(session_id, max_checks=5, interval=5, overall_timeout=300):
                url = "https://dropmail.me/api/graphql/my_token_123"
                query = """
                query($id: ID!) {
                session(id: $id) {
                    mails { fromAddr headerSubject text }
                }
                }"""
                start_time = time.time()
                checks = 0
                while (time.time() - start_time) < overall_timeout and checks < max_checks:
                    try:
                        resp = requests.post(url, json={"query": query, "variables": {"id": session_id}}, timeout=10)
                        data = resp.json()
                        mails = data["data"]["session"]["mails"]
                        if mails:
                            for mail in mails:
                                text = mail.get("text", "")
                                subject = mail.get("headerSubject", "")
                                match = re.search(r"\b\d{6}\b", text) or re.search(r"\b\d{6}\b", subject)
                                if match:
                                    code = match.group(0)
                                    log(f"üì© Nh·∫≠n ƒë∆∞·ª£c m√£ DropMail: {code}")
                                    return code
                        checks += 1
                        log(f"‚åõ Ch∆∞a c√≥ mail DropMail (l·∫ßn {checks}/{max_checks}), ch·ªù th√™m...")
                    except Exception as e:
                        checks += 1
                        log(f"‚ùå L·ªói khi ki·ªÉm tra DropMail (l·∫ßn {checks}/{max_checks}): {repr(e)}")
                    time.sleep(interval)
                log("‚õî Qu√° 5 l·∫ßn ki·ªÉm tra DropMail m√† ch∆∞a c√≥ m√£ ‚Äî b·ªè phi√™n.")
                return None


            # --- H√†m ƒë·ª£i TempMail V·ªöI GI·ªöI H·∫†N ---
            def wait_for_tempmail_code(email, max_checks=5, interval=5, overall_timeout=300):
                headers = {"accept": "application/json"}
                email_encoded = email.replace("@", "%40")
                mail_url = f"https://free.priyo.email/api/messages/{email_encoded}/7jkmE5NM2VS6GqJ9pzlI"
                start_time = time.time()
                checks = 0
                while (time.time() - start_time) < overall_timeout and checks < max_checks:
                    try:
                        resp = requests.get(mail_url, headers=headers, timeout=10)
                        if resp.status_code == 200:
                            messages = resp.json()
                            if messages:
                                subject = messages[0].get("subject", "")
                                log(f"üì¨ Subject email: {subject}")
                                match = re.search(r"\b\d{6}\b", subject)
                                if match:
                                    code = match.group(0)
                                    log(f"üî¢ Nh·∫≠n ƒë∆∞·ª£c m√£ TempMail: {code}")
                                    return code
                        checks += 1
                        log(f"‚åõ Ch∆∞a c√≥ mail TempMail (l·∫ßn {checks}/{max_checks}), ch·ªù th√™m...")
                    except Exception as e:
                        checks += 1
                        log(f"‚ùå L·ªói khi ki·ªÉm tra TempMail (l·∫ßn {checks}/{max_checks}): {repr(e)}")
                    time.sleep(interval)
                log("‚õî Qu√° 5 l·∫ßn ki·ªÉm tra TempMail m√† ch∆∞a c√≥ m√£ ‚Äî b·ªè phi√™n.")
                return None

            # --- ƒêi·ªÅn code mail ---
            try:
                if dropmail_var.get():
                    code = wait_for_dropmail_code(session_id, max_checks=5, interval=5, overall_timeout=300)
                elif tempmail_var.get():
                    code = wait_for_tempmail_code(email, max_checks=5, interval=5, overall_timeout=300)
                else:
                    code = None

                if not code:
                    log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ x√°c minh sau 5 l·∫ßn ki·ªÉm tra. ƒê√≥ng phi√™n hi·ªán t·∫°i v√† t·∫°o phi√™n m·ªõi.")
                    try:
                        warp_off()
                    except:
                        pass
                    try:
                        release_position(driver)   # ‚úÖ tr·∫£ ch·ªó
                        driver.quit()
                    except:
                        pass
                    # (khuy√™n d√πng continue ƒë·ªÉ kh√¥ng nh√¢n th√™m thread)
                    log("üîÅ Restart phi√™n trong c√πng lu·ªìng.")
                    continue

                # N·∫øu c√≥ code -> nh·∫≠p v√† ti·∫øp t·ª•c nh∆∞ c≈©
                code_input = WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.XPATH, "//input[@placeholder='Confirmation Code']"))
                )
                type_text_slowly(code_input, code, delay=0.3)
                log(f"‚úÖ ƒê√£ nh·∫≠p m√£ x√°c minh: {code}")
                if warp_enabled:
                    warp_change_ip()
                time.sleep(8)
                # Nh·∫•n n√∫t Next nhi·ªÅu l·∫ßn n·∫øu c√≤n
                # ·∫§n n√∫t Next t·ª´ng lu·ªìng c√°ch nhau 10 gi√¢y n·∫øu ch·∫°y nhi·ªÅu lu·ªìng
                if sync_barrier is not None and sync_barrier.parties > 1:
                    global next_press_lock
                    try:
                        next_press_lock
                    except NameError:
                        next_press_lock = threading.Lock()
                    for i in range(5):
                        with next_press_lock:
                            try:
                                next_btn = WebDriverWait(driver, 5).until(
                                    EC.element_to_be_clickable((By.XPATH, "//div[@role='button' and normalize-space(text())='Next']"))
                                )
                                driver.execute_script("arguments[0].click();", next_btn)
                                time.sleep(5)
                                log(f"üîÅ ·∫§n n√∫t Next l·∫ßn {i+1}")
                                time.sleep(2)
                            except:
                                log("‚úÖ Kh√¥ng c√≤n n√∫t Next, ti·∫øp t·ª•c quy tr√¨nh.")
                                break
                        # Ch·ªù 10 gi√¢y gi·ªØa c√°c lu·ªìng
                        time.sleep(10)
                else:
                    for i in range(5):
                        try:
                            next_btn = WebDriverWait(driver, 5).until(
                                EC.element_to_be_clickable((By.XPATH, "//div[@role='button' and normalize-space(text())='Next']"))
                            )
                            driver.execute_script("arguments[0].click();", next_btn)
                            time.sleep(5)
                            log(f"üîÅ ·∫§n n√∫t Next l·∫ßn {i+1}")
                            time.sleep(2)
                        except:
                            log("‚úÖ Kh√¥ng c√≤n n√∫t Next, ti·∫øp t·ª•c quy tr√¨nh.")
                            break

                time.sleep(20)
                wait_all("X√°c minh email", thread_id)

            except Exception as e:
                log(f"‚ùå L·ªói khi nh·∫≠p m√£ x√°c minh: {repr(e)}")

            # === CHECK LIVE/DIE ===
            try:
                global live_count, die_count
                profile_url = f"https://www.instagram.com/{username}/"
                log("üåê ƒêang ki·ªÉm tra tr·∫°ng th√°i Live/Die...")
                driver.get(profile_url)
                time.sleep(6)  # c√≥ th·ªÉ thay b·∫±ng WebDriverWait n·∫øu mu·ªën

                current_url = driver.current_url
                page_source = driver.page_source

                # M·∫∑c ƒë·ªãnh
                status_text = "Unknown"

                # Ph√¢n lo·∫°i tr·∫°ng th√°i
                if "/accounts/login/" in current_url or "Sorry, this page isn't available" in page_source:
                    status_text = "Die"
                elif "checkpoint" in current_url.lower() or "Confirm you're human" in page_source:
                    status_text = "Checkpoint"
                elif (f"@{username}" in page_source) or (f"instagram.com/{username}" in current_url):
                    status_text = "Live"
                else:
                    status_text = "Die"

                # C·∫≠p nh·∫≠t bi·∫øn ƒë·∫øm + log
                if status_text == "Live":
                    live_count += 1
                    live_var.set(str(live_count))
                    update_rate()
                    log("‚úÖ T√†i kho·∫£n Live")
                else:
                    die_count += 1
                    die_var.set(str(die_count))
                    update_rate()
                    log(f"‚ùå {status_text} ‚Äî t√≠nh l√† Die")

                # === L·∫•y Cookie ===
                try:
                    cookies = driver.get_cookies()
                    cookie_str = "; ".join([f"{c['name']}={c['value']}" for c in cookies]) if cookies else ""
                    log("üç™ Cookie hi·ªán t·∫°i:")
                    log(cookie_str if cookie_str else "(empty)")
                    time.sleep(3)
                except Exception as e:
                    cookie_str = ""
                    log(f"‚ùå L·ªói khi l·∫•y cookie: {repr(e)}")

                # N·∫øu KH√îNG ph·∫£i Live th√¨ insert ngay b√¢y gi·ªù
                if status_text.lower() in ("die", "checkpoint", "unknown"):
                    # n·∫øu c√≥ app (Tk root) th√¨:
                    try:
                        app.after(0, lambda: insert_to_tree(status_text, username, password, email, cookie_str, two_fa_code=""))
                    except:
                        insert_to_tree(status_text, username, password, email, cookie_str, two_fa_code="")

                    # L∆∞u file (optional) ‚Äì c√≥ fallback cho save_format
                    try:
                        file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Die.txt")
                        info_map = {"Username": username, "Pass": password, "Mail": email, "Cookie": cookie_str, "2FA": ""}
                        fields = save_format if ('save_format' in globals() and isinstance(save_format, (list,tuple)) and save_format) \
                                else ["Username","Pass","Mail","Cookie","2FA"]
                        line = "|".join([info_map.get(field, "") for field in fields])
                        with open(file_path, "a", encoding="utf-8") as f:
                            f.write(line + "\n")
                        log(f"üíæ (Die early) ƒê√£ l∆∞u th√¥ng tin v√†o '{file_path}'")
                    except Exception as e:
                        log(f"‚ùå (Die early) L·ªói khi l∆∞u file: {repr(e)}")

                    # Quy·∫øt ƒë·ªãnh restart
                    try:
                        warp_off()
                        time.sleep(2)
                        release_position(driver)
                        driver.quit()
                        driver = None
                    except:
                        pass
                    log("üîÅ Kh·ªüi ch·∫°y l·∫°i phi√™n...")
                    continue
                else:
                    log("‚û°Ô∏è LIVE: Ti·∫øp t·ª•c B∆Ø·ªöC TI·∫æP THEO (Follow/‚Ä¶)")

            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi check live/die: {repr(e)}")
        except Exception as e:
            log(f"‚ùå L·ªói tr√¨nh duy·ªát: {repr(e)}")
            try:
                release_position(driver)   # ‚úÖ tr·∫£ ch·ªó
                driver.quit()
            except:
                pass
            log("üîÑ ƒêang ch·∫°y l·∫°i t·ª´ ƒë·∫ßu sau l·ªói tr√¨nh duy·ªát...")
            # Khuy√™n: g·ªçi continue thay v√¨ run(thread_id) (tr√°nh nh√¢n thread)
            continue
        # === B∆Ø·ªöC 7: X·ª≠ l√Ω b·∫≠t 2FA ===
        if twofa_var.get():
            try:
                pause_event.wait()
                log("üîê B·∫Øt ƒë·∫ßu b·∫≠t x√°c th·ª±c hai y·∫øu t·ªë (2FA)...")
                time.sleep(6)

                # Truy c·∫≠p trang b·∫≠t 2FA
                driver.get("https://accountscenter.instagram.com/password_and_security/two_factor/?theme=dark")
                WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                time.sleep(5)

                # Ch·ªçn t√†i kho·∫£n Instagram
                try:
                    account_btn = WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((
                            By.XPATH, "//div[@role='button' and descendant::div[contains(text(),'Instagram')]]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", account_btn)
                    time.sleep(1)
                    account_btn.click()
                    log("‚úÖ ƒê√£ ch·ªçn t√†i kho·∫£n Instagram")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ö†Ô∏è Kh√¥ng ch·ªçn ƒë∆∞·ª£c t√†i kho·∫£n: {repr(e)}")
                    return

                # Nh·∫•n n√∫t "Continue"
                try:
                    continue_btn = WebDriverWait(driver, 20).until(
                        EC.presence_of_element_located((
                            By.XPATH,
                            "//div[@role='button' and descendant::span[normalize-space(text())='Continue']]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", continue_btn)
                    time.sleep(3)
                    driver.execute_script("arguments[0].click();", continue_btn)
                    log("‚úÖ ƒê√£ click n√∫t Continue")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ùå Kh√¥ng th·ªÉ click n√∫t Continue: {repr(e)}")
                    return

                # L·∫•y m√£ 2FA secret
                try:
                    span_xpath = "//div[contains(@class,'x16grhtn')]//span"
                    span_elem = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, span_xpath))
                    )
                    two_fa_code = span_elem.text.strip().replace(" ", "")
                    log(f"üîê M√£ 2FA secret: {two_fa_code}")
                except Exception as e:
                    log(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ 2FA secret: {repr(e)}")
                    return
                time.sleep(3)
                # Nh·∫•n n√∫t Next ƒë·ªÉ chuy·ªÉn t·ªõi nh·∫≠p m√£ OTP
                try:
                    next_btn = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((
                            By.XPATH, "//div[@role='button' and descendant::span[normalize-space(text())='Next']]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_btn)
                    time.sleep(1)
                    driver.execute_script("arguments[0].click();", next_btn)
                    log("‚úÖ ƒê√£ nh·∫•n n√∫t Next ƒë·ªÉ nh·∫≠p m√£ OTP")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ùå Kh√¥ng nh·∫•n ƒë∆∞·ª£c n√∫t Next sau m√£ secret: {repr(e)}")
                    return

                # Sinh m√£ OTP t·ª´ m√£ secret b·∫±ng pyotp
                otp_code = None
                try:
                    totp = pyotp.TOTP(two_fa_code)
                    otp_code = totp.now()
                    log(f"üî¢ M√£ OTP t·∫°o t·ª´ pyotp: {otp_code}")
                except Exception as e:
                    log(f"‚ùå L·ªói khi t·∫°o OTP t·ª´ pyotp: {repr(e)}")
                    return
                time.sleep(3)
                # Nh·∫≠p m√£ OTP v√†o √¥ nh·∫≠p
                if otp_code:
                    try:
                        otp_input = WebDriverWait(driver, 10).until(
                            EC.presence_of_element_located((By.XPATH, "//input[@type='text' and @maxlength='6']"))
                        )
                        otp_input.clear()
                        otp_input.send_keys(otp_code)
                        log("‚úÖ ƒê√£ nh·∫≠p m√£ OTP.")
                        time.sleep(2)
                    except Exception as e:
                        log(f"‚ùå L·ªói khi nh·∫≠p OTP: {repr(e)}")
                    # Nh·∫•n n√∫t Next cu·ªëi c√πng ƒë·ªÉ ho√†n t·∫•t b·∫≠t 2FA
                    try:
                        driver.execute_script("""
                            [...document.querySelectorAll("div[role='button']")].forEach(el => {
                                if (el.innerText.trim() === 'Next') el.click();
                            });
                        """)
                        log("‚úÖ ƒê√£ nh·∫•n n√∫t Next ƒë·ªÉ ho√†n t·∫•t b·∫≠t 2FA")
                        time.sleep(6)
                        wait_all("B·∫≠t 2FA", thread_id)
                    except Exception as e:
                        log(f"‚ùå L·ªói khi nh·∫•n n√∫t Next ho√†n t·∫•t 2FA: {repr(e)}")
                        return
                    driver.execute_script("""
                    const btn = [...document.querySelectorAll("button, div[role=button]")]
                        .find(el => el.textContent.trim() === "Done");

                    if (btn) {
                        btn.click();
                        return true;
                    } else {
                        return false;
                    }
                    """)
            except Exception as e:
                log(f"‚ùå L·ªói to√†n b·ªô b∆∞·ªõc b·∫≠t 2FA: {repr(e)}")
            time.sleep(3)

            # === Insert v√†o Treeview ===
            try:
                status_tag = "LIVE" if status_text.lower() == "live" else "DIE"
                phone_val = locals().get("phone", "")
                token_val = locals().get("token", "")

                tree.insert("", "end", values=(
                    len(tree.get_children())+1, status_text, username, password, email, phone_val, cookie_str,
                    locals().get("two_fa_code", ""), token_val, "127.0.0.1", "NoProxy",
                    "LIVE" if status_tag=="LIVE" else "",
                    "DIE" if status_tag=="DIE" else ""
                ), tags=(status_tag,))
            except Exception as e:
                log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m v√†o Treeview: {repr(e)}")

            # === L∆ØU TH√îNG TIN ===
            try:
                file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Live.txt")

                info_map = {
                    "Username": username,
                    "Pass": password,
                    "Mail": email,
                    "Cookie": cookie_str if 'cookie_str' in locals() else '',
                    "2FA": two_fa_code if 'two_fa_code' in locals() else '',
                }

                # d√πng tr·ª±c ti·∫øp save_format t·ª´ UI
                line = "|".join([info_map.get(field, "") for field in save_format])

                with open(file_path, "a", encoding="utf-8") as f:
                    f.write(line + "\n")

                log(f"üíæ ƒê√£ l∆∞u th√¥ng tin v√†o '{file_path}'")
            except Exception as e:
                log(f"‚ùå L·ªói khi l∆∞u file: {repr(e)}")

        # === B∆Ø·ªöC 5: Follow ===
        if follow_var.get():
            try:
                pause_event.wait()
                log("üöÄ B·∫Øt ƒë·∫ßu follow c√°c link...")
                time.sleep(3)

                follow_links = [
                    "https://www.instagram.com/shx_pe06/",
                    "https://www.instagram.com/wynnieinclouds/",
                    "https://www.instagram.com/ductoan1103/",
                    "https://www.instagram.com/nba/",
                    "https://www.instagram.com/datgia172/",
                    "https://www.instagram.com/cristiano/",
                    "https://www.instagram.com/leomessi/",
                    "https://www.instagram.com/hansara.official/",
                    "https://www.instagram.com/lilbieber/",
                    "https://www.instagram.com/ne9av/",
                    "https://www.instagram.com/joyce.pham1106/",
                    "https://www.instagram.com/khanhvyccf/",
                    "https://www.instagram.com/chaubui_/",
                    "https://www.instagram.com/ngockem_/",
                    "https://www.instagram.com/kyduyen1311/",
                    "https://www.instagram.com/baohannguyenxhelia/",
                    "https://www.instagram.com/linnhhh.m/",
                    "https://www.instagram.com/loungu/",
                    "https://www.instagram.com/_choiiii__/",
                    "https://www.instagram.com/kjmbae/"
                ]

                # L·∫•y s·ªë l∆∞·ª£ng follow t·ª´ √¥ nh·∫≠p
                try:
                    num_follow = int(follow_count_entry.get())
                except:
                    num_follow = 5
                num_follow = min(num_follow, len(follow_links))  

                selected_links = random.sample(follow_links, num_follow)

                for link in selected_links:
                    try:
                        driver.get(link)
                        log(f"üåê ƒê√£ m·ªü link: {link}")
                        time.sleep(5)

                        follow_button = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Follow']"))
                        )
                        follow_button.click()
                        log(f"‚úÖ ƒê√£ follow: {link}")
                        time.sleep(6)
                    except Exception as e:
                        log(f"‚ùå Kh√¥ng th·ªÉ follow {link}: {repr(e)}")

            except Exception as e:
                log(f"‚ùå L·ªói trong qu√° tr√¨nh follow: {repr(e)}")
                wait_all("Follow", thread_id)
        else:
            log("‚è≠ B·ªè qua b∆∞·ªõc Follow")

        # === B∆Ø·ªöC 6: Upload avatar ·ªü giao di·ªán mobile ===
        if bioava_var.get():
            if warp_enabled:
                warp_off()
                time.sleep(4)
        try:
            log("üì± Chuy·ªÉn sang giao di·ªán Mobile (iPhone 15 Pro Max)...")
            driver.execute_cdp_cmd("Emulation.setDeviceMetricsOverride", {
                "mobile": True,
                "width": 390,
                "height": 844,
                "deviceScaleFactor": 3
            })
            driver.execute_cdp_cmd("Emulation.setUserAgentOverride", {
                "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1"
            })
            driver.refresh()
            time.sleep(5)

            # ƒê√≥ng popup Not Now n·∫øu c√≥
            driver.execute_script("""
                let btn = [...document.querySelectorAll("span,button")]
                    .find(el => ["Not now", "Kh√¥ng ph·∫£i b√¢y gi·ªù"].includes(el.innerText.trim()));
                if (btn) btn.click();
            """)
            time.sleep(3)

            # M·ªü trang ch·ªânh s·ª≠a h·ªì s∆°
            log("üë§ M·ªü trang ch·ªânh s·ª≠a h·ªì s∆° ƒë·ªÉ upload avatar...")
            driver.get("https://www.instagram.com/accounts/edit/")
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.XPATH, "//input[@accept='image/jpeg,image/png']"))
            )
            time.sleep(8)
            
            # Nh·∫•n Prefer not to say
            driver.execute_script("""
                const preferEl = document.evaluate(
                    "//div[span[normalize-space(text())='Prefer not to say']]",
                    document,
                    null,
                    XPathResult.FIRST_ORDERED_NODE_TYPE,
                    null
                ).singleNodeValue;
                if (preferEl) {
                    preferEl.click();
                } else {
                    console.warn("‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ 'Prefer not to say'");
                }
                """)
            time.sleep(3)
            # Ch·ªçn female
            driver.execute_script("""
                const femaleOption = document.evaluate(
                    "//span[normalize-space(text())='Female']",
                    document,
                    null,
                    XPathResult.FIRST_ORDERED_NODE_TYPE,
                    null
                ).singleNodeValue;
                if (femaleOption) {
                    femaleOption.click();
                } else {
                    console.warn("‚ùå Kh√¥ng t√¨m th·∫•y option 'Female'");
                }
                """)
            time.sleep(3)

            # ƒêi·ªÅn Bio (theo l·ª±a ch·ªçn GUI) ‚Äî chu·∫©n React (setNativeValue + input/change)
            bio_value = get_bio_text()
            driver.execute_script("""
            (function(val){
                const el = document.querySelector("textarea[name='biography'], #pepBio, textarea[aria-label='Bio'], textarea[aria-label='Ti·ªÉu s·ª≠']");
                if (!el) { console.warn("‚ùå Kh√¥ng t√¨m th·∫•y √¥ Bio (#pepBio/biography)"); return; }
                const proto  = el.tagName === 'TEXTAREA' ? HTMLTextAreaElement.prototype : HTMLInputElement.prototype;
                const setter = Object.getOwnPropertyDescriptor(proto, 'value')?.set;
                if (setter) setter.call(el, val); else el.value = val;  // fallback
                el.dispatchEvent(new Event('input',  {bubbles:true}));
                el.dispatchEvent(new Event('change', {bubbles:true}));
                el.blur();
                console.log("‚úçÔ∏è ƒê√£ ƒëi·ªÅn Bio:", val);
            })(arguments[0]);
            """, bio_value)
            log(f"‚úçÔ∏è ƒê√£ ƒëi·ªÅn Bio: {bio_value}")
            time.sleep(1.5)

            # Nh·∫•n Submit
            driver.execute_script("""
            (function(){
                const xps = [
                "//div[@role='button' and normalize-space(text())='Submit']",
                "//button[normalize-space()='Submit']",
                "//button[normalize-space()='Save']",
                "//button[normalize-space()='L∆∞u']",
                "//div[@role='button' and .//span[normalize-space(text())='Submit']]"
                ];
                for (const xp of xps) {
                const el = document.evaluate(xp, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                if (el) { el.scrollIntoView({block:'center'}); el.click(); console.log("‚û°Ô∏è ƒê√£ click Submit/Save"); return; }
                }
                console.warn("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Submit/Save");
            })();
            """)
            time.sleep(2)

            # L·∫•y ·∫£nh v√† upload
            if not ava_folder_path or not os.path.exists(ava_folder_path):
                log("‚ùå Ch∆∞a ch·ªçn th∆∞ m·ª•c ·∫£nh ho·∫∑c th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i.")
            else:
                image_files = [f for f in os.listdir(ava_folder_path) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
                if image_files:
                    selected_path = os.path.join(ava_folder_path, random.choice(image_files))
                    driver.find_element(By.XPATH, "//input[@accept='image/jpeg,image/png']").send_keys(selected_path)
                    log(f"‚úÖ ƒê√£ upload avatar: {os.path.basename(selected_path)}")
                    time.sleep(3)
                    # L∆∞u avatar
                    WebDriverWait(driver, 15).until(
                        EC.element_to_be_clickable((By.XPATH, "//button[text()='Save']"))
                    ).click()
                    log("üíæ ƒê√£ l∆∞u avatar")
                    time.sleep(10)

                    # N·∫øu c√≥ n√∫t Post th√¨ click
                    try:
                        post_btn = WebDriverWait(driver, 5).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[contains(@class,'_a9--') and text()='Post']"))
                        )
                        driver.execute_script("arguments[0].click();", post_btn)
                        log("‚úÖ ƒê√£ click Post")
                        time.sleep(12)
                    except:
                        log("‚Ñπ Kh√¥ng th·∫•y n√∫t Post, b·ªè qua.")
                else:
                    log("‚ùå Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá trong th∆∞ m·ª•c.")
        except Exception as e:
            log(f"‚ùå L·ªói B∆∞·ªõc 6: {repr(e)}")

        # Quay l·∫°i giao di·ªán Desktop
        log("üñ• Quay l·∫°i giao di·ªán Desktop...")
        driver.execute_cdp_cmd("Emulation.clearDeviceMetricsOverride", {})
        driver.execute_cdp_cmd("Emulation.setUserAgentOverride", {
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
        })
        driver.refresh()
        time.sleep(5)

        # === B·∫¨T CH·∫æ ƒê·ªò CHUY√äN NGHI·ªÜP (Creator -> Personal blog) ===
        if pro_mode_var.get():
            try:
                pause_event.wait()
                log("üíº ƒêang b·∫≠t ch·∫ø ƒë·ªô chuy√™n nghi·ªáp (Creator -> Personal blog)...")
                driver.get("https://www.instagram.com/accounts/convert_to_professional_account/")
                WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                time.sleep(4)

                # 1) Ch·ªçn Creator
                account_type = pro_type_var.get()
                if account_type == "Creator":
                    selector = "IGDSRadioButtonmedia_creator"
                else:
                    selector = "IGDSRadioButtonbusiness"
                try:
                    radio = WebDriverWait(driver, 8).until(
                        EC.element_to_be_clickable((By.ID, selector))
                    )
                    radio.click()
                    log(f"‚úÖ ƒê√£ ch·ªçn {account_type}")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t ch·ªçn {account_type}: {repr(e)}")

                # 2) Nh·∫•n Next qua 2 m√†n h√¨nh gi·ªõi thi·ªáu
                for i in range(2):
                    try:
                        next_btn = WebDriverWait(driver, 5).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Next' or normalize-space()='Ti·∫øp']"))
                        )
                        next_btn.click()
                        log(f"‚û°Ô∏è ƒê√£ nh·∫•n Next {i+1}")
                        time.sleep(1.5)
                    except Exception as e:
                        log(f"‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y Next {i+1}: {repr(e)}")
                        break
                
                # 3) Tick Show category on profile
                driver.execute_script("""
                    document.querySelectorAll('input[type="checkbox"][aria-label="Show category on profile"]').forEach(el => { 
                        if (el.getAttribute("aria-checked") === "false") {
                            el.click();
                        }
                    });
                """)
                time.sleep(3)

                # 4) Tick Category theo l·ª±a ch·ªçn GUI
                category = category_var.get()
                category_map = {
                    "Personal blog": "2700",
                    "Product/service": "2201",
                    "Art": "2903",
                    "Musician/band": "180164648685982",
                    "Shopping & retail": "200600219953504",
                    "Health/beauty": "2214",
                    "Grocery Store": "150108431712141"
                }
                cat_code = category_map.get(category)
                if cat_code:
                    js = f'document.querySelector(\'input[type="radio"][aria-label="{cat_code}"]\').click();'
                    driver.execute_script(js)
                    log(f"‚úÖ ƒê√£ ch·ªçn Category: {category}")
                    time.sleep(3)
                else:
                    log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√£ category cho {category}")

                # 5) Nh·∫•n Done 
                driver.execute_script("""
                    document.querySelectorAll('button[type="button"]').forEach(el => {
                        if (el.innerText.trim() === 'Done') el.click();
                    });
                """)
                time.sleep(3)
                # 6) X√°c nh·∫≠n popup Switch to Professional Account
                driver.execute_script("""
                    document.querySelectorAll('button').forEach(el => { 
                        if (el.innerText.trim() === 'Continue' || el.innerText.trim() === 'Ti·∫øp t·ª•c') {
                            el.click();
                        }
                    });
                """)
                time.sleep(15)
                # 7) Nh·∫•n Done ƒë·ªÉ ho√†n th√†nh 
                driver.execute_script("document.querySelector('button._aswp._aswr._aswu._aswy._asw_._asx2').click()")
                time.sleep(5)
                
            except Exception as e:
                log(f"L·ªói khi b·∫≠t ch·∫ø ƒë·ªô chuy√™n nghi·ªáp: {repr(e)}")

            # === K·∫æT TH√öC PHI√äN ===
            try:
                if warp_enabled:
                    warp_off()
                    time.sleep(2)
                release_position(driver)       # ‚úÖ tr·∫£ ch·ªó
                driver.quit()
                log("üëã ƒê√£ ƒë√≥ng tr√¨nh duy·ªát (driver.quit()).")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi quit driver: {repr(e)}")

# === Giao di·ªán TKinter c√≥ n·ªÅn ===
def open_file_da_reg():
    file_path = "Live.txt"
    if os.path.exists(file_path):
        try:
            os.startfile(file_path)  # M·ªü b·∫±ng ch∆∞∆°ng tr√¨nh m·∫∑c ƒë·ªãnh tr√™n Windows
        except Exception as e:
            log(f"‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c file: {repr(e)}")
    else:
        log("‚ö†Ô∏è File 'Live.txt' ch∆∞a t·ªìn t·∫°i.")

def close_tool():
    try:
        subprocess.run("taskkill /F /IM chrome.exe", shell=True)
        log("üõë ƒê√£ ƒë√≥ng to√†n b·ªô Chrome.")
        all_drivers.clear()
        log("‚úÖ Tool ƒë√£ d·ª´ng ti·∫øn tr√¨nh.")
    except Exception as e:
        log(f"‚ùå L·ªói khi ƒë√≥ng tool: {repr(e)}")

def show_intro(app, main_func):
    intro = tk.Toplevel(app)
    intro.overrideredirect(True)
    intro.attributes("-topmost", True)

    from PIL import Image, ImageTk
    img = Image.open("Autointro.png").convert("RGBA")
    new_w, new_h = 900, 440
    img = img.resize((new_w, new_h), Image.LANCZOS)
    logo = ImageTk.PhotoImage(img)

    sw = intro.winfo_screenwidth()
    sh = intro.winfo_screenheight()
    x = (sw - new_w) // 2
    y = (sh - new_h) // 2
    intro.geometry(f"{new_w}x{new_h}+{x}+{y}")

    trans_color = "magenta"
    intro.config(bg=trans_color)
    lbl = tk.Label(intro, image=logo, bg=trans_color, border=0)
    lbl.image = logo
    lbl.pack(fill="both", expand=True)

    try:
        intro.wm_attributes("-transparentcolor", trans_color)
    except Exception:
        pass

    def fade_in(alpha=0):
        if alpha <= 100:
            intro.attributes("-alpha", alpha / 100)
            intro.after(25, fade_in, alpha + 8)
        else:
            intro.after(1500, fade_out, 100)

    def fade_out(alpha=100):
        if alpha >= 0:
            intro.attributes("-alpha", alpha / 100)
            intro.after(25, fade_out, alpha - 8)
        else:
            try:
                intro.destroy()
            except:
                pass
            main_func()

    intro.attributes("-alpha", 0.0)
    fade_in()

app = tk.Tk()
app.withdraw() 
app.title("Instagram Auto Creator")
app.geometry("1600x900")
app.resizable(True, True)

# --- Bi·∫øn ƒë·∫øm Live/Die/Rate ---
live_var = tk.StringVar(value="0")
die_var  = tk.StringVar(value="0")
rate_var = tk.StringVar(value="0%")

# t·∫°o StringVar sau khi app ƒë√£ t·ªìn t·∫°i
scrcpy_path_var = tk.StringVar(value="(ch∆∞a ch·ªçn scrcpy.exe)")
# bi·∫øn to√†n c·ª•c cho tu·ª≥ ch·ªçn k·∫øt n·ªëi
phone_net_mode = tk.StringVar(value="wifi")

# ƒë·ªçc config ƒë·ªÉ l·∫•y path ƒë√£ l∆∞u (ch·ªâ g√°n v√†o bi·∫øn thu·∫ßn scrcpy_path)
load_scrcpy_config()

# n·∫øu c√≥ path th√¨ ƒë∆∞a l√™n UI
if scrcpy_path:
    scrcpy_path_var.set(scrcpy_path)

# Background (optional)
try:
    bg_image = Image.open("Auto.png").resize((1920, 1080))
    bg_photo = ImageTk.PhotoImage(bg_image)
except Exception:
    bg_photo = None

canvas = tk.Canvas(app, width=1050, height=550)
canvas.pack(fill="both", expand=True)
if bg_photo:
    canvas.create_image(0, 0, image=bg_photo, anchor="nw")

# ========================= KH·ªêI TR√ÅI =========================
left_frame = tk.Frame(app, bg="white")
left_frame.place(x=20, y=20)

btn_container = tk.Frame(left_frame, bg="white")
btn_container.pack(pady=5, fill="x")

# C·ªôt 1: N√∫t ƒëi·ªÅu khi·ªÉn
col1 = tk.Frame(btn_container, bg="white")
col1.grid(row=0, column=0, padx=8, sticky="n")

for text, color, cmd in [
    ("START", "green",        start_process),
    ("PAUSE", "red",          pause),
    ("NEXT", "orange",        resume),
    ("FILE REG", "yellow",    open_file_da_reg),
    ("CLOSE", "deepskyblue",  lambda: threading.Thread(target=restart_tool).start()),
    ("RESTART", "purple",     restart_tool),
]:
    tk.Button(col1, text=text, width=15, bg=color, fg="white", command=cmd).pack(pady=3)

warp_toggle_btn = tk.Button(col1, text="WARP ON", width=15, bg="green", fg="white", command=toggle_warp)
warp_toggle_btn.pack(pady=3)

threads_frame = tk.Frame(col1, bg="white"); threads_frame.pack(pady=5)
tk.Label(threads_frame, text="S·ªê LU·ªíNG", bg="white", font=("Arial", 10, "bold")).pack()
threads_entry = tk.Entry(threads_frame, width=10, justify="center"); threads_entry.insert(0, "1"); threads_entry.pack(pady=2)
tk.Label(threads_frame, text="S·ªê FOLLOW", bg="white", font=("Arial", 10, "bold")).pack()
follow_count_entry = tk.Entry(threads_frame, width=10, justify="center"); follow_count_entry.insert(0, "5"); follow_count_entry.pack(pady=2)

# C·ªôt 2: Giao di·ªán + Chrome/·∫¢nh/Proxy + email
col2 = tk.Frame(btn_container, bg="white")
col2.grid(row=0, column=1, padx=8, sticky="n")

ui_mode_var = tk.StringVar(value="desktop")
ui_frame = tk.LabelFrame(col2, text="GIAO DI·ªÜN", bg="white", font=("Arial", 10, "bold"))
ui_frame.pack(pady=6, fill="x")
tk.Radiobutton(ui_frame, text="Desktop",
               variable=ui_mode_var, value="desktop",
               bg="white", command=_sync_mode_ui).pack(anchor="w", padx=6, pady=2)

tk.Radiobutton(ui_frame, text="Mobile iPhone 15",
               variable=ui_mode_var, value="mobile",
               bg="white", command=_sync_mode_ui).pack(anchor="w", padx=6, pady=2)

tk.Radiobutton(
    ui_frame, text="Phone (Android)",
    variable=ui_mode_var, value="phone",
    bg="white", command=_sync_mode_ui
).pack(anchor="w", padx=6, pady=2)

tk.Button(col2, text="Ch·ªçn th∆∞ m·ª•c Chrome", width=17, bg="lightgreen", command=select_chrome).pack(pady=3)
tk.Button(col2, text="Ch·ªçn th∆∞ m·ª•c ·∫£nh",    width=17, bg="lightblue",  command=select_ava_folder).pack(pady=3)

tk.Label(col2, text="Proxy (IP:PORT)", bg="white", font=("Arial", 9, "bold")).pack(pady=(5,2))
proxy_entry = tk.Entry(col2, width=20, bg="lightgray", justify="center")
proxy_entry.pack(pady=2); proxy_entry.insert(0, "")

tempmail_var = tk.BooleanVar(value=True)
tk.Checkbutton(col2, text="D√πng temp-mail.asia", variable=tempmail_var, bg="white").pack(anchor="w", pady=(2,6))
dropmail_var = tk.BooleanVar(value=False)
tk.Checkbutton(col2, text="D√πng DropMail.me",    variable=dropmail_var,  bg="white").pack(anchor="w", pady=(2,6))

# C·ªôt 3: ƒê·ªãnh d·∫°ng l∆∞u
col3 = tk.Frame(btn_container, bg="white")
col3.grid(row=0, column=2, padx=8, sticky="n")

tk.Label(col3, text="ƒê·ªãnh d·∫°ng l∆∞u:", bg="white", font=("Arial", 10, "bold")).pack(pady=(0,4))

format_boxes = []
def update_save_format():
    global save_format
    save_format = [cb.get() for cb in format_boxes if cb.get()]
    save_config()
    log(f"üíæ ƒê·ªãnh d·∫°ng l∆∞u: {'|'.join(save_format)}")

wanted = ["Username", "Pass", "Mail", "Cookie", "2FA"]
for i in range(5):
    cb = ttk.Combobox(col3, values=format_fields, state="readonly", width=15)
    cb.set(save_format[i] if i < len(save_format) else wanted[i])
    cb.pack(pady=2)
    cb.bind("<<ComboboxSelected>>", lambda e: update_save_format())
    format_boxes.append(cb)

# ========================= KH·ªêI GI·ªÆA: Desktop Settings =========================
desktop_settings = tk.LabelFrame(app, text="Desktop Settings", bg="white", font=("Arial", 11, "bold"))
hidden_chrome_var = tk.BooleanVar(value=False)

def _position_desktop_settings():
    """ƒê·∫∑t Desktop Settings s√°t c·∫°nh 'ƒê·ªãnh d·∫°ng l∆∞u' (kh·ªëi tr√°i)."""
    app.update_idletasks()
    x = left_frame.winfo_x() + left_frame.winfo_width() + 12  # kho·∫£ng c√°ch 12px
    y = 20
    desktop_settings.place(x=x, y=y)

# g·ªçi sau khi kh·ªëi tr√°i render xong
app.after(60, _position_desktop_settings)

# --- C·ªôt tr√°i trong Desktop Settings: 4 checkbox + B1 + B2 + B3 (x·∫øp d·ªçc) ---
col_left = tk.Frame(desktop_settings, bg="white")
col_left.grid(row=0, column=0, padx=6, sticky="n")  # padding nh·ªè ƒë·ªÉ s√°t nh∆∞ h√¨nh
# √î t√≠ch ·∫®n Chrome (headless)
tk.Checkbutton(col_left, text="·∫®n Chrome (Headless)", variable=hidden_chrome_var, bg="white").pack(anchor="w", pady=2)

follow_var   = tk.BooleanVar(value=True)
bioava_var   = tk.BooleanVar(value=True)
pro_mode_var = tk.BooleanVar(value=True)
twofa_var    = tk.BooleanVar(value=True)
gender_var   = tk.StringVar(value="Prefer not to say")

tk.Checkbutton(col_left, text="Follow",                       variable=follow_var,   bg="white").pack(anchor="w", pady=2)
tk.Checkbutton(col_left, text="Gi·ªõi t√≠nh + Bio + Ava + Post", variable=bioava_var,   bg="white").pack(anchor="w", pady=2)
tk.Checkbutton(col_left, text="B·∫≠t Chuy√™n nghi·ªáp",            variable=pro_mode_var, bg="white").pack(anchor="w", pady=2)
tk.Checkbutton(col_left, text="B·∫≠t 2FA",                      variable=twofa_var,    bg="white").pack(anchor="w", pady=2)

# Nh·ªè g·ªçn h√†m t·∫°o d√≤ng delay
delay_entries = {}
def _row_delay(parent, label, type_default, sleep_default):
    fr = tk.Frame(parent, bg="white"); fr.pack(pady=1, fill="x")
    tk.Label(fr, text=f"{label}:", bg="white", width=10, anchor="w").pack(side="left")
    if type_default is not None:
        e1 = tk.Entry(fr, width=5, justify="center"); e1.insert(0, str(type_default))
        e1.pack(side="left", padx=2); delay_entries[f"{label}_type"] = e1
    e2 = tk.Entry(fr, width=5, justify="center"); e2.insert(0, str(sleep_default))
    e2.pack(side="left", padx=4); delay_entries[f"{label}_sleep"] = e2

# B∆Ø·ªöC 1
box_b1 = tk.LabelFrame(col_left, text="B∆Ø·ªöC 1", bg="white", font=("Arial", 10, "bold"))
box_b1.pack(pady=4, fill="x")
hdr1 = tk.Frame(box_b1, bg="white"); hdr1.pack(pady=1, fill="x")
tk.Label(hdr1, text="", bg="white", width=10).pack(side="left")
tk.Label(hdr1, text="ƒêi·ªÅn", bg="white", width=6).pack(side="left")
tk.Label(hdr1, text="Ngh·ªâ", bg="white", width=6).pack(side="left")
for lb,(tp,sl) in {"Mail":(0.18,1),"Pass":(0.18,3),"H·ªç T√™n":(0.18,2),"Username":(0.18,3),"Next":(None,2)}.items():
    _row_delay(box_b1, lb, tp, sl)

# B∆Ø·ªöC 2
box_b2 = tk.LabelFrame(col_left, text="B∆Ø·ªöC 2", bg="white", font=("Arial", 10, "bold"))
box_b2.pack(pady=4, fill="x")
hdr2 = tk.Frame(box_b2, bg="white"); hdr2.pack(pady=1, fill="x")
tk.Label(hdr2, text="", bg="white", width=10).pack(side="left")
tk.Label(hdr2, text="ƒêi·ªÅn", bg="white", width=6).pack(side="left")
tk.Label(hdr2, text="Ngh·ªâ", bg="white", width=6).pack(side="left")
for lb,(tp,sl) in {"Th√°ng":(0.18,2),"Ng√†y":(0.18,2),"NƒÉm":(0.18,2),"Next":(None,2)}.items():
    _row_delay(box_b2, lb, tp, sl)

# B∆Ø·ªöC 3
box_b3 = tk.LabelFrame(col_left, text="B∆Ø·ªöC 3", bg="white", font=("Arial", 10, "bold"))
box_b3.pack(pady=4, fill="x")
hdr3 = tk.Frame(box_b3, bg="white"); hdr3.pack(pady=1, fill="x")
tk.Label(hdr3, text="", bg="white", width=10).pack(side="left")
tk.Label(hdr3, text="ƒêi·ªÅn", bg="white", width=6).pack(side="left")
tk.Label(hdr3, text="Ngh·ªâ", bg="white", width=6).pack(side="left")
_row_delay(box_b3, "ƒêi·ªÅn code", 0.3, 2)

# --- C·ªôt ph·∫£i trong Desktop Settings: Lo·∫°i TK + Category + Bio ---
col_right = tk.Frame(desktop_settings, bg="white")
col_right.grid(row=0, column=1, padx=10, sticky="n")  # kho·∫£ng tr·ªëng h·ª£p l√Ω gi·ªØa hai c·ªôt

# Lo·∫°i t√†i kho·∫£n
pro_type_var = tk.StringVar(value="Creator")
tk.Label(col_right, text="Lo·∫°i t√†i kho·∫£n:", bg="white", font=("Arial", 10, "bold")).pack(anchor="w")
tk.Radiobutton(col_right, text="Creator",  variable=pro_type_var, value="Creator",  bg="white").pack(anchor="w")
tk.Radiobutton(col_right, text="Business", variable=pro_type_var, value="Business", bg="white").pack(anchor="w")

# Category
tk.Label(col_right, text="Category:", bg="white", font=("Arial", 10, "bold")).pack(anchor="w", pady=(10,2))
categories = ["Personal blog","Product/service","Art","Musician/band","Shopping & retail","Health/beauty","Grocery Store"]
category_var = tk.StringVar(value="Personal blog")
for cat in categories:
    tk.Radiobutton(col_right, text=cat, variable=category_var, value=cat, bg="white").pack(anchor="w")

# Bio Options
tk.Label(col_right, text="Bio Options:", bg="white", font=("Arial", 10, "bold")).pack(anchor="w", pady=(10,2))
bio_custom_var = tk.BooleanVar(value=False)
bio_default_var = tk.BooleanVar(value=True)
bio_mode_var    = tk.StringVar(value="random")  # random / sequential
tk.Checkbutton(col_right, text="Bio theo y√™u c·∫ßu", variable=bio_custom_var, bg="white").pack(anchor="w")
tk.Radiobutton(col_right, text="Ng·∫´u nhi√™n", variable=bio_mode_var, value="random",    bg="white").pack(anchor="w", padx=18)
tk.Radiobutton(col_right, text="T·ª´ng d√≤ng",  variable=bio_mode_var, value="sequential",bg="white").pack(anchor="w", padx=18)
tk.Checkbutton(col_right, text="Bio m·∫∑c ƒë·ªãnh", variable=bio_default_var, bg="white").pack(anchor="w")

bio_text = scrolledtext.ScrolledText(col_right, width=20, height=4, bg="lightyellow")
bio_text.pack(pady=(5,10), fill="x")

# ========================= MOBILE SETTINGS (mirror Desktop) =========================
mobile_settings = tk.LabelFrame(app, text="Mobile Settings", bg="white", font=("Arial", 11, "bold"))

def _position_mobile_settings():
    """ƒê·∫∑t Mobile Settings song song v·ªõi Desktop Settings."""
    app.update_idletasks()
    try:
        x = desktop_settings.winfo_x() + desktop_settings.winfo_width() + 20   # c√°ch Desktop 20px
        y = desktop_settings.winfo_y()                                        # c√πng h√†ng v·ªõi Desktop
    except Exception:
        x = left_frame.winfo_x() + left_frame.winfo_width() + 250
        y = 20
    mobile_settings.place(x=x, y=y)

app.after(120, _position_mobile_settings)

# ===== L·∫•y m·∫∑c ƒë·ªãnh t·ª´ Desktop n·∫øu c√≥ =====
def _get_bool(v, fallback=False):
    try: return bool(v.get())
    except: return fallback

def _get_str(v, fallback=""):
    try: return str(v.get())
    except: return fallback

_follow_def   = _get_bool(globals().get("follow_var", None), False)
_fullpack_def = _get_bool(globals().get("gender_bio_ava_post_var", None), False)
_pro_mode_def = _get_bool(globals().get("pro_mode_var", None), False)
_twofa_def    = _get_bool(globals().get("twofa_var", None), False)

_pro_type_def = _get_str(globals().get("pro_type_var", None), "Creator")          # "Creator" | "Business"
_category_def = _get_str(globals().get("category_var", None), "Personal blog")

# ===== Bi·∫øn Mobile (t√°ch ph·∫ßn chung & ph·∫ßn alias BIO) =====
enable_follow        = tk.BooleanVar(value=_follow_def)
enable_avatar        = tk.BooleanVar(value=_fullpack_def)   # ho·∫∑c t√°ch ri√™ng n·∫øu c√≥ bi·∫øn avatar ri√™ng
enable_Chuyen_nghiep = tk.BooleanVar(value=_pro_mode_def)   # ‚úÖ gi·ªØ nguy√™n ‚ÄúB·∫≠t Chuy√™n nghi·ªáp‚Äù
enable_2fa           = tk.BooleanVar(value=_twofa_def)

pro_type_mobile   = tk.StringVar(value=_pro_type_def)       # Mobile v·∫´n c√≥ lo·∫°i TK ri√™ng (Creator/Business)
category_mobile   = tk.StringVar(value=_category_def)

# ===== BIO ALIAS: Mobile d√πng CHUNG bi·∫øn Desktop =====
# C·∫ßn s·∫µn c√°c bi·∫øn Desktop: bio_custom_var, bio_default_var, bio_mode_var, bio_text
m_bio_custom_var  = globals().get("bio_custom_var")   # √¥ t√≠ch "Bio theo y√™u c·∫ßu" (chung Desktop)
m_bio_default_var = globals().get("bio_default_var")  # √¥ t√≠ch "Bio m·∫∑c ƒë·ªãnh"   (chung Desktop)
m_bio_mode_var    = globals().get("bio_mode_var")     # radio 'random' | 'sequential' (chung Desktop)
bio_text_desktop  = globals().get("bio_text")         # Text/ScrolledText c·ªßa Desktop

# √î nh·∫≠p Mobile l√† b·∫£n "giao di·ªán" ‚Äì s·∫Ω sync 2 chi·ªÅu v·ªõi 'bio_text' Desktop
m_bio_text_mirror = None

# ===== B·ªë c·ª•c 2 c·ªôt: tr√°i = toggle + Steps, ph·∫£i = lo·∫°i TK / Category / Bio =====
col_left  = tk.Frame(mobile_settings, bg="white")
col_right = tk.Frame(mobile_settings, bg="white")
col_left.grid(row=0, column=0, padx=6,  pady=6, sticky="n")
# √î t√≠ch ·∫®n Chrome (headless) cho Mobile
tk.Checkbutton(col_left, text="·∫®n Chrome (Headless)", variable=hidden_chrome_var, bg="white").pack(anchor="w", pady=2)
col_right.grid(row=0, column=1, padx=14, pady=6, sticky="n")

# ---- 4 √¥ t√≠ch b√™n tr√°i (d√πng l·∫°i t√™n bi·∫øn c≈©) ----
tk.Checkbutton(col_left, text="Follow (Mobile)",            variable=enable_follow,        bg="white").pack(anchor="w", pady=2)
tk.Checkbutton(col_left, text="Avatar (Mobile)",            variable=enable_avatar,        bg="white").pack(anchor="w", pady=2)
tk.Checkbutton(col_left, text="B·∫≠t Chuy√™n nghi·ªáp (Mobile)", variable=enable_Chuyen_nghiep, bg="white",
               command=lambda: _sync_pro_mobile_state()).pack(anchor="w", pady=2)
tk.Checkbutton(col_left, text="B·∫≠t 2FA (Mobile)",           variable=enable_2fa,           bg="white").pack(anchor="w", pady=2)

# ---- C·ªôt ph·∫£i: Lo·∫°i t√†i kho·∫£n / Category / Bio Options ----
grp_type = tk.LabelFrame(col_right, text="Lo·∫°i t√†i kho·∫£n:", bg="white", font=("Arial", 10, "bold"))
grp_type.pack(fill="x", pady=(0,6))
tk.Radiobutton(grp_type, text="Creator",  variable=pro_type_mobile, value="Creator",  bg="white").pack(anchor="w")
tk.Radiobutton(grp_type, text="Business", variable=pro_type_mobile, value="Business", bg="white").pack(anchor="w")

grp_cat = tk.LabelFrame(col_right, text="Category:", bg="white", font=("Arial", 10, "bold"))
grp_cat.pack(fill="x", pady=(0,6))
CAT_OPTIONS = [
    "Personal blog",
    "Product/service",
    "Art",
    "Musician/band",
    "Shopping & retail",
    "Health/beauty",
    "Grocery Store",
]
for name in CAT_OPTIONS:
    tk.Radiobutton(grp_cat, text=name, variable=category_mobile, value=name, bg="white").pack(anchor="w")

# ==== Bio Options (Mobile) ‚Äì ƒëi·ªÅu khi·ªÉn CHUNG bi·∫øn v·ªõi Desktop ====
grp_bio = tk.LabelFrame(col_right, text="Bio Options:", bg="white", font=("Arial", 10, "bold"))
grp_bio.pack(fill="both", pady=(0,6))

# Hai √¥ t√≠ch & hai radio: d√πng CHUNG bi·∫øn Desktop qua alias
tk.Checkbutton(grp_bio, text="Bio theo y√™u c·∫ßu", variable=m_bio_custom_var, bg="white").pack(anchor="w")
tk.Checkbutton(grp_bio, text="Bio m·∫∑c ƒë·ªãnh",    variable=m_bio_default_var, bg="white").pack(anchor="w")
tk.Radiobutton(grp_bio, text="Ng·∫´u nhi√™n",      variable=m_bio_mode_var,    value="random",    bg="white").pack(anchor="w")
tk.Radiobutton(grp_bio, text="T·ª´ng d√≤ng",       variable=m_bio_mode_var,    value="sequential", bg="white").pack(anchor="w")

# √î nh·∫≠p Bio Mobile ‚Äì MIRROR, c√≥ thanh cu·ªôn, sync 2 chi·ªÅu v·ªõi Desktop
m_bio_text_mirror = scrolledtext.ScrolledText(grp_bio, height=4, width=23, wrap="word", bg="#fffbe6")
m_bio_text_mirror.pack(fill="both", expand=True, padx=4, pady=4)

def _sync_mirror_from_desktop(*_):
    try:
        src = bio_text_desktop.get("1.0", "end") if bio_text_desktop else ""
        dst = m_bio_text_mirror.get("1.0", "end")
        if src != dst:
            m_bio_text_mirror.delete("1.0", "end")
            m_bio_text_mirror.insert("1.0", src)
    except Exception:
        pass

def _sync_desktop_from_mirror(event=None):
    try:
        if not bio_text_desktop: 
            return
        src = m_bio_text_mirror.get("1.0", "end")
        dst = bio_text_desktop.get("1.0", "end")
        if src != dst:
            bio_text_desktop.delete("1.0", "end")
            bio_text_desktop.insert("1.0", src)
    except Exception:
        pass

# 1) G√µ ·ªü Mobile -> ƒë·∫©y v·ªÅ Desktop
m_bio_text_mirror.bind("<KeyRelease>", _sync_desktop_from_mirror)
# 2) G√µ ·ªü Desktop -> k√©o v·ªÅ Mobile (n·∫øu Desktop c√≥ widget)
try:
    if bio_text_desktop:
        bio_text_desktop.bind("<KeyRelease>", lambda e: _sync_mirror_from_desktop())
    _sync_mirror_from_desktop()  # ƒê·ªìng b·ªô l·∫ßn ƒë·∫ßu
except Exception:
    pass

# ---- Khi t·∫Øt Chuy√™n nghi·ªáp th√¨ kh√≥a nh√≥m Lo·∫°i TK + Category ----
def _sync_pro_mobile_state(*_):
    on = enable_Chuyen_nghiep.get()
    for grp in (grp_type, grp_cat):
        for w in grp.winfo_children():
            try: w.configure(state=("normal" if on else "disabled"))
            except Exception:
                try: w.state(["!disabled"] if on else ["disabled"])
                except Exception: pass
    try:
        grp_type.configure(fg=("black" if on else "#888"))
        grp_cat.configure(fg=("black" if on else "#888"))
    except Exception:
        pass

_sync_pro_mobile_state()
enable_Chuyen_nghiep.trace_add("write", _sync_pro_mobile_state)

# ---- H√†m gom c·∫•u h√¨nh Mobile ƒë·ªÉ d√πng trong run_mobile ----
def collect_mobile_profile_config():
    # Bio l·∫•y CHUNG ngu·ªìn Desktop n√™n kh√¥ng c·∫ßn l∆∞u mode/text ri√™ng;
    # v·∫´n tr·∫£ ra cho ti·ªán debug/log.
    return {
        "follow":     bool(enable_follow.get()),
        "avatar":     bool(enable_avatar.get()),
        "pro_mode":   bool(enable_Chuyen_nghiep.get()),
        "pro_type":   str(pro_type_mobile.get()),
        "twofa":      bool(enable_2fa.get()),
        "category":   str(category_mobile.get()),
        # Tham chi·∫øu BIO DESKTOP
        "bio_custom":  bool(m_bio_custom_var.get()) if m_bio_custom_var else False,
        "bio_default": bool(m_bio_default_var.get()) if m_bio_default_var else False,
        "bio_mode":    str(m_bio_mode_var.get())    if m_bio_mode_var    else "random",
        "bio_text":    (bio_text_desktop.get("1.0", "end").strip() if bio_text_desktop else m_bio_text_mirror.get("1.0", "end").strip())
    }

# ==================== MOBILE STEPS (5 b∆∞·ªõc, c√≥ c·ªôt Next b√™n ph·∫£i) ====================
mobile_delay_entries = {}

def _header_mobile(parent):
    """Ti√™u ƒë·ªÅ c·ªôt: [Label] [ƒêi·ªÅn] [Ngh·ªâ] [Next]"""
    hdr = tk.Frame(parent, bg="white"); hdr.pack(pady=1, fill="x")
    tk.Label(hdr, text="",     bg="white", width=12).pack(side="left")
    tk.Label(hdr, text="ƒêi·ªÅn", bg="white", width=6).pack(side="left")
    tk.Label(hdr, text="Ngh·ªâ", bg="white", width=6).pack(side="left")
    tk.Label(hdr, text="Next", bg="white", width=6).pack(side="left")

def _row_delay_mobile(parent, label, type_default, sleep_default, next_default=2):
    """V·∫Ω 1 h√†ng: [Label] [Entry ƒêi·ªÅn] [Entry Ngh·ªâ] [Entry Next]"""
    fr = tk.Frame(parent, bg="white")
    fr.pack(pady=1, fill="x")
    tk.Label(fr, text=f"{label}:", bg="white", width=12, anchor="w").grid(row=0, column=0, padx=(0,4), sticky="w")

    e_type = tk.Entry(fr, width=5, justify="center")
    if type_default is not None:
        e_type.insert(0, str(type_default))
    e_type.grid(row=0, column=1, padx=2, sticky="w")
    mobile_delay_entries[f"{label}_type"] = e_type

    e_sleep = tk.Entry(fr, width=5, justify="center")
    if sleep_default is not None:
        e_sleep.insert(0, str(sleep_default))
    e_sleep.grid(row=0, column=2, padx=4, sticky="w")
    mobile_delay_entries[f"{label}_sleep"] = e_sleep

    e_next = tk.Entry(fr, width=5, justify="center")
    if next_default is not None:
        e_next.insert(0, str(next_default))
    e_next.grid(row=0, column=3, padx=4, sticky="w")
    mobile_delay_entries[f"{label}_next"] = e_next

def get_mobile_delay(key, default):
    try:
        val = mobile_delay_entries[key].get().strip()
        return float(val) if val else default
    except Exception:
        return default

# --- B∆Ø·ªöC 1: Mail ---
box_m1 = tk.LabelFrame(col_left, text="B∆Ø·ªöC 1", bg="white", font=("Arial", 10, "bold"))
box_m1.pack(pady=4, fill="x")
_header_mobile(box_m1)
_row_delay_mobile(box_m1, "Mail",   0.18, 1, next_default=2)

# --- B∆Ø·ªöC 2: Code ---
box_m2 = tk.LabelFrame(col_left, text="B∆Ø·ªöC 2", bg="white", font=("Arial", 10, "bold"))
box_m2.pack(pady=4, fill="x")
_header_mobile(box_m2)
_row_delay_mobile(box_m2, "Code",   0.30, 2, next_default=2)   # gi·ªëng Desktop: ƒêi·ªÅn code 0.3 / 2

# --- B∆Ø·ªöC 3: Pass ---
box_m3 = tk.LabelFrame(col_left, text="B∆Ø·ªöC 3", bg="white", font=("Arial", 10, "bold"))
box_m3.pack(pady=4, fill="x")
_header_mobile(box_m3)
_row_delay_mobile(box_m3, "Pass",   0.18, 3, next_default=2)

# --- B∆Ø·ªöC 4: Tu·ªïi ---
box_m4 = tk.LabelFrame(col_left, text="B∆Ø·ªöC 4", bg="white", font=("Arial", 10, "bold"))
box_m4.pack(pady=4, fill="x")
_header_mobile(box_m4)
_row_delay_mobile(box_m4, "Tu·ªïi",   0.18, 2, next_default=2)

# --- B∆Ø·ªöC 5: H·ªç T√™n ---
box_m5 = tk.LabelFrame(col_left, text="B∆Ø·ªöC 5", bg="white", font=("Arial", 10, "bold"))
box_m5.pack(pady=4, fill="x")
_header_mobile(box_m5)
_row_delay_mobile(box_m5, "H·ªç t√™n", 0.18, 2, next_default=2)

def collect_mobile_step_delays():
    """Tr·∫£ v·ªÅ dict c√°c Entry ƒë·ªÉ d√πng khi ch·∫°y flow mobile (l·∫•y .get())."""
    keys = ["Mail","Code","Pass","Tu·ªïi","H·ªç t√™n"]
    out = {}
    for k in keys:
        out[f"{k}_type"]  = mobile_delay_entries.get(f"{k}_type")
        out[f"{k}_sleep"] = mobile_delay_entries.get(f"{k}_sleep")
        out[f"{k}_next"]  = mobile_delay_entries.get(f"{k}_next")
    return out

# ƒê·ªìng b·ªô kh√≥a/m·ªü theo radio GIAO DI·ªÜN CHROME
app.after(150, _sync_mode_ui)

# ========================= PHONE SETTINGS (SCROLLABLE) =========================
PHONE_PADX = 6
PHONE_PADY = 6
PHONE_WRAP_W = 400     # r·ªông khung hi·ªÉn th·ªã (ch·ªânh tu·ª≥ √Ω)
PHONE_WRAP_H = 520     # cao khung hi·ªÉn th·ªã (ch·ªânh tu·ª≥ √Ω)

# ƒë·∫£m b·∫£o c√°c bi·∫øn state cho Phone c√≥ m·∫∑t v√† tr·ªè ƒë√∫ng master
def ensure_phone_vars():
    global phone_net_mode, phone_ig_app_var
    try:
        phone_net_mode
    except NameError:
        phone_net_mode = tk.StringVar(master=app, value="wifi")          # wifi|warp|proxy|sim
    try:
        phone_ig_app_var
    except NameError:
        phone_ig_app_var = tk.StringVar(master=app, value="instagram")   # instagram|instagram_lite

# g·ªçi sau khi app = tk.Tk() ƒë√£ c√≥
ensure_phone_vars()

# --- Vars m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ ---
try:
    phone_net_mode
except NameError:
    phone_net_mode = tk.StringVar(value="wifi")  # wifi | warp | proxy | sim

try:
    phone_ig_app_var
except NameError:
    phone_ig_app_var = tk.StringVar(master=app, value="instagram")

# ====== ƒê∆Ø·ªúNG D·∫™N & C·∫§U H√åNH ======
PROXY_TXT  = os.path.join(os.getcwd(), "Proxy.txt")

# ============= WRAPPER ƒë·∫∑t b·∫±ng .place =============
phone_settings_wrap = tk.Frame(app, bg="white")

def _position_phone_settings():
    """ƒê·∫∑t Phone Settings song song, n·∫±m b√™n ph·∫£i Mobile Settings (k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh)."""
    app.update_idletasks()
    try:
        x = mobile_settings.winfo_x() + mobile_settings.winfo_width() + 20  # c√°ch Mobile 20px
        y = mobile_settings.winfo_y()
    except Exception:
        x = desktop_settings.winfo_x() + desktop_settings.winfo_width() + 250
        y = desktop_settings.winfo_y()
    phone_settings_wrap.place(x=x, y=y, width=PHONE_WRAP_W, height=PHONE_WRAP_H)

app.after(180, _position_phone_settings)

# ============= Canvas + Scrollbar d·ªçc =============
phone_canvas = tk.Canvas(phone_settings_wrap, bg="white", highlightthickness=0)
phone_vscroll = ttk.Scrollbar(phone_settings_wrap, orient="vertical", command=phone_canvas.yview)
phone_canvas.configure(yscrollcommand=phone_vscroll.set)


# Frame ch·ª©a widget con
phone_settings = tk.LabelFrame(phone_canvas, text="Phone Settings", bg="white", font=("Arial", 11, "bold"))
phone_canvas_window = phone_canvas.create_window((0, 0), window=phone_settings, anchor="nw")

# B·ªë c·ª•c
phone_canvas.grid(row=0, column=0, sticky="nsew")
phone_vscroll.grid(row=0, column=1, sticky="ns")
phone_settings_wrap.grid_rowconfigure(0, weight=1)
phone_settings_wrap.grid_columnconfigure(0, weight=1)

def _fit_canvas_to_wrap(event=None):
    cw = phone_settings_wrap.winfo_width()
    ch = phone_settings_wrap.winfo_height()
    if cw <= 1 or ch <= 1:
        return
    phone_canvas.config(width=cw-12, height=ch)
    phone_canvas.itemconfigure(phone_canvas_window, width=phone_canvas.winfo_width())

def _update_scrollregion(event=None):
    phone_canvas.configure(scrollregion=phone_canvas.bbox("all"))
    _fit_canvas_to_wrap()

phone_canvas.bind("<Configure>", lambda e: phone_canvas.itemconfigure(
    phone_canvas_window, width=phone_canvas.winfo_width()))
phone_settings_wrap.bind("<Configure>", _fit_canvas_to_wrap)
phone_settings.bind("<Configure>", _update_scrollregion)

# Cu·ªôn b·∫±ng chu·ªôt
def _on_phone_mousewheel(event):
    if event.delta:
        phone_canvas.yview_scroll(int(-event.delta/120), "units")
    else:
        phone_canvas.yview_scroll(-1 if event.num == 4 else 1, "units")

phone_canvas.bind("<Enter>", lambda e: app.bind_all("<MouseWheel>", _on_phone_mousewheel))
phone_canvas.bind("<Leave>", lambda e: app.unbind_all("<MouseWheel>"))
phone_canvas.bind("<Button-4>", _on_phone_mousewheel)  # Linux
phone_canvas.bind("<Button-5>", _on_phone_mousewheel)  # Linux

def _init_phone_canvas_once():
    try:
        app.update_idletasks()
        _update_scrollregion()
    except Exception:
        pass

app.after(400, _init_phone_canvas_once)

# ====================== B·∫¢NG THI·∫æT B·ªä 3 C·ªòT ======================
ttk.Label(phone_settings, text="Thi·∫øt b·ªã ADB (ch·ªçn 1 ho·∫∑c nhi·ªÅu):", background="white")\
   .pack(anchor="w", padx=PHONE_PADX, pady=(PHONE_PADY, 2))

cols = ("udid", "view", "pick")
phone_device_tree = ttk.Treeview(phone_settings, columns=cols, show="headings", height=6)
phone_device_tree.heading("udid", text="DANH S√ÅCH THI·∫æT B·ªä")
phone_device_tree.heading("view", text="VIEW")
phone_device_tree.heading("pick", text="CH·ªåN")
phone_device_tree.column("udid", width=260, anchor="w")
phone_device_tree.column("view", width=60, anchor="center")
phone_device_tree.column("pick", width=60, anchor="center")
phone_device_tree.pack(fill="both", expand=True, padx=PHONE_PADX)

phone_device_tree.bind("<Button-1>", _toggle_cell)

ttk.Button(phone_settings, text="Refresh ADB devices", command=refresh_adb_devices_table)\
   .pack(anchor="w", padx=PHONE_PADX, pady=PHONE_PADY)

ttk.Button(phone_settings, text="Kill ADB and Reload", command=lambda: threading.Thread(target=kill_adb_and_reload, daemon=True).start())\
    .pack(anchor="w", padx=PHONE_PADX, pady=(0, PHONE_PADY))
# --- Ch·ªçn k√≠ch th∆∞·ªõc scrcpy ---
ttk.Label(phone_settings, text="Ch·ªçn k√≠ch th∆∞·ªõc hi·ªÉn th·ªã:")\
    .pack(anchor="w", padx=PHONE_PADX, pady=(0, PHONE_PADY))

combo_res = ttk.Combobox(
    phone_settings,
    values=["360x640", "540x960", "720x1280", "1080x1920"],
    state="readonly",
    width=15
)
combo_res.set("540x960")  # m·∫∑c ƒë·ªãnh
combo_res.bind("<<ComboboxSelected>>", change_resolution)
combo_res.pack(anchor="w", padx=PHONE_PADX, pady=(0, PHONE_PADY))

# --- N√∫t m·ªü & s·∫Øp x·∫øp scrcpy ---
ttk.Button(phone_settings, text="S·∫Øp x·∫øp Phone View", command=open_and_arrange)\
    .pack(anchor="w", padx=PHONE_PADX, pady=(0, PHONE_PADY))

# ======================= Network Mode =======================
net_frame = ttk.LabelFrame(phone_settings, text="Network Mode")
net_frame.pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))

for txt, val in [("WiFi", "wifi"), ("WARP", "warp"), ("Proxy", "proxy"), ("SIM 4G", "sim")]:
    ttk.Radiobutton(net_frame, text=txt, value=val, variable=phone_net_mode)\
       .pack(anchor="w", padx=10, pady=2)

# ======================= Proxy Type =======================
proxy_format_var = tk.StringVar(value="ip_port")

# ƒê·∫∑t trace_add sau khi kh·ªüi t·∫°o bi·∫øn proxy_format_var
try:
    proxy_format_var.trace_add('write', lambda *args: save_config())
except Exception:
    pass
proxy_format_frame = ttk.LabelFrame(phone_settings, text="Proxy Type")
proxy_format_frame.pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))

ttk.Radiobutton(proxy_format_frame, text="IP:PORT",
                     variable=proxy_format_var, value="ip_port")\
    .pack(anchor="w", padx=10, pady=2)
ttk.Radiobutton(proxy_format_frame, text="IP:PORT:USER:PASS",
                     variable=proxy_format_var, value="ip_port_userpass")\
    .pack(anchor="w", padx=10, pady=2)

# ======================= HANDLERS / CONFIG =======================
photo_folder_phone = ""

def open_proxy_txt():
    try:
        if not os.path.exists(PROXY_TXT):
            with open(PROXY_TXT, "w", encoding="utf-8") as f:
                f.write("")
        if os.name == "nt":
            os.startfile(PROXY_TXT)
        elif sys.platform == "darwin":
            subprocess.Popen(["open", PROXY_TXT])
        else:
            subprocess.Popen(["xdg-open", PROXY_TXT])
        log(f"üìù ƒê√£ m·ªü: {PROXY_TXT}")
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng m·ªü ƒë∆∞·ª£c Proxy.txt:\n{e}")

def choose_photo_folder_phone():
    global photo_folder_phone
    path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ·∫£nh (Phone)")
    if path:
        photo_folder_phone = path
        save_phone_paths()
        log(f"üìÇ ƒê√£ ch·ªçn folder ·∫£nh (Phone): {path}")
    else:
        log("‚ö†Ô∏è Ch∆∞a ch·ªçn folder ·∫£nh (Phone).")

def load_phone_paths():
    load_config()

def save_phone_paths():
    save_config()

def get_random_photo_from_folder():
    folder = globals().get("photo_folder_phone", "")
    if not folder or not os.path.isdir(folder):
        log("‚ö†Ô∏è Ch∆∞a ch·ªçn folder ·∫£nh (Phone).")
        return None
    pics = [f for f in os.listdir(folder) if f.lower().endswith((".jpg",".jpeg",".png"))]
    if not pics:
        log("‚ö†Ô∏è Folder ·∫£nh kh√¥ng c√≥ file h·ª£p l·ªá.")
        return None
    return os.path.join(folder, random.choice(pics))

def push_photo_for_phone(udid=None, remote_dir="/sdcard/Pictures/AutoPhone"):
    """Push 1 ·∫£nh ng·∫´u nhi√™n v√†o ƒëi·ªán tho·∫°i & g·ª≠i MEDIA_SCANNER"""
    local_path = get_random_photo_from_folder()
    if not local_path:
        return None
    file_name = os.path.basename(local_path)
    remote_path = f"{remote_dir}/{file_name}"
    try:
        adb_mkdir(udid, remote_dir)
        adb_push(udid, local_path, remote_path)
        adb_media_scan(udid, remote_path)
        log(f"‚úÖ ƒê√£ push & scan ·∫£nh: {remote_path}")
        return (local_path, remote_path)
    except Exception as e:
        log(f"‚ùå L·ªói push ·∫£nh: {e}")
        return None

# n·∫°p ngay khi kh·ªüi ƒë·ªông
load_phone_paths()

# ======================= H√ÄNG N√öT 1: Proxy.txt | Ch·ªçn folder ·∫£nh =======================
actions_top = ttk.Frame(phone_settings)
actions_top.pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))
actions_top.grid_columnconfigure(0, weight=1)
actions_top.grid_columnconfigure(1, weight=1)

ttk.Button(actions_top, text="M·ªü Proxy.txt", command=open_proxy_txt)\
   .grid(row=0, column=0, sticky="we", padx=(0, 3))
ttk.Button(actions_top, text="Ch·ªçn folder ·∫£nh", command=choose_photo_folder_phone)\
   .grid(row=0, column=1, sticky="we", padx=(3, 0))

ttk.Separator(phone_settings, orient="horizontal").pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))

# ======================= H√ÄNG N√öT 2: scrcpy.exe | M·ªü View Phone =======================
actions_bottom = ttk.Frame(phone_settings)
actions_bottom.pack(fill="x", padx=PHONE_PADX, pady=(0, PHONE_PADY))
actions_bottom.grid_columnconfigure(0, weight=1)
actions_bottom.grid_columnconfigure(1, weight=1)

ttk.Button(actions_bottom, text="Ch·ªçn scrcpy.exe", command=choose_scrcpy_path)\
   .grid(row=0, column=0, sticky="we", padx=(0, 3))
ttk.Button(actions_bottom, text="M·ªü View Phone",
           command=lambda: open_scrcpy_for_list(get_checked_udids("view")))\
   .grid(row=0, column=1, sticky="we", padx=(3, 0))

# ======================= CH·ªåN APP IG: Instagram | Instagram Lite =======================
def _persist_ig_choice():
    try:
        save_phone_paths()
    except Exception:
        pass

app_select_frame = ttk.LabelFrame(phone_settings, text="App Instagram")
app_select_frame.pack(fill="x", padx=PHONE_PADX, pady=PHONE_PADY)

ttk.Radiobutton(app_select_frame, text="Instagram", value="instagram",
                variable=phone_ig_app_var, command=_persist_ig_choice)\
   .pack(side="left", padx=8, pady=4)

ttk.Radiobutton(app_select_frame, text="Instagram Lite", value="instagram_lite",
                variable=phone_ig_app_var, command=_persist_ig_choice)\
   .pack(side="left", padx=8, pady=4)

# ======================= PROFESSIONAL ACCOUNT SETTINGS (Phone) =======================
pro_settings_frame = ttk.LabelFrame(phone_settings, text="Professional Account", padding=(6,6), style="TLabelframe")
pro_settings_frame.pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))

CATEGORIES = [
    "Artist", "Musician/band", "Blogger", "Clothing (Brand)",
    "Community", "Digital creator", "Education", "Entrepreneur",
    "Health/beauty", "Editor", "Writer", "Personal blog",
    "Product/service", "Gamer", "Restaurant",
    "Beauty, cosmetic & personal care", "Grocery Store",
    "Photographer", "Shopping & retail", "Reel creator"
]
pro_category_var = tk.StringVar(value="Reel creator")
ttk.Label(pro_settings_frame, text="Category:").pack(side="left", padx=(10, 2))
ttk.Combobox(pro_settings_frame, textvariable=pro_category_var, values=CATEGORIES, width=22, state="readonly").pack(side="left")
pro_type_var = tk.StringVar(value="Creator")
ttk.Label(pro_settings_frame, text="Type:").pack(side="left", padx=(10, 2))
ttk.Combobox(pro_settings_frame, textvariable=pro_type_var, values=["Creator", "Business"], width=10, state="readonly").pack(side="left")

# √î nh·∫≠p s·ªë l∆∞·ª£ng follow (m·∫∑c ƒë·ªãnh 10)
phone_follow_count_var = tk.IntVar(value=10)
ttk.Label(phone_settings, text="S·ªë l∆∞·ª£ng follow:").pack(side="left", padx=(10, 2))
ttk.Spinbox(phone_settings, from_=1, to=30, textvariable=phone_follow_count_var, width=5).pack(side="left")

# ======================= PHONE ACTIONS (Enable/Disable) =======================
phone_actions_frame = ttk.LabelFrame(phone_settings, text="Phone Actions (Instagram)", padding=(6,6))
phone_actions_frame.pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))

enable_2faphone    = tk.BooleanVar(value=False)
enable_uppost      = tk.BooleanVar(value=False)
enable_editprofile = tk.BooleanVar(value=False)
enable_autofollow  = tk.BooleanVar(value=False)
enable_proaccount  = tk.BooleanVar(value=False)

ttk.Checkbutton(phone_actions_frame, text="Enable 2FA (Phone/App)", variable=enable_2faphone).pack(anchor="w", padx=10, pady=2)
ttk.Checkbutton(phone_actions_frame, text="Enable Up Post", variable=enable_uppost).pack(anchor="w", padx=10, pady=2)
ttk.Checkbutton(phone_actions_frame, text="Enable Edit Profile", variable=enable_editprofile).pack(anchor="w", padx=10, pady=2)
ttk.Checkbutton(phone_actions_frame, text="Enable Auto Follow", variable=enable_autofollow).pack(anchor="w", padx=10, pady=2)
ttk.Checkbutton(phone_actions_frame, text="Enable Switch to Professional", variable=enable_proaccount).pack(anchor="w", padx=10, pady=2)

# ======================= QU√âT THI·∫æT B·ªä L·∫¶N ƒê·∫¶U =======================
try:
    refresh_adb_devices_table()
except Exception:
    pass

# ========================= KH·ªêI D∆Ø·ªöI =========================
# Chrome size & Scale
chrome_size_frame = tk.Frame(app, bg="white")
chrome_size_frame.pack(side="left", padx=20)

tk.Label(chrome_size_frame, text="Chrome:", bg="white").pack(side="left")
entry_width  = tk.Entry(chrome_size_frame, width=6, justify="center"); entry_width.insert(0, "1200"); entry_width.pack(side="left", padx=2)
tk.Label(chrome_size_frame, text="x", bg="white").pack(side="left")
entry_height = tk.Entry(chrome_size_frame, width=6, justify="center"); entry_height.insert(0, "800");  entry_height.pack(side="left", padx=2)

tk.Label(chrome_size_frame, text="Scale (%):", bg="white").pack(side="left", padx=(10,2))
entry_scale  = tk.Entry(chrome_size_frame, width=4, justify="center"); entry_scale.insert(0, "100"); entry_scale.pack(side="left", padx=2)

# Live/Die/Rate
status_frame = tk.Frame(app, bg="white")
status_frame.pack(side="bottom", anchor="w", pady=5, padx=5)
tk.Label(status_frame, text="LIVE:", fg="green", bg="white", font=("Arial", 11, "bold")).grid(row=0, column=0, padx=5)
tk.Label(status_frame, textvariable=live_var, fg="green", bg="white", font=("Arial", 11, "bold")).grid(row=0, column=1, padx=5)

tk.Label(status_frame, text="DIE:",  fg="red",   bg="white", font=("Arial", 11, "bold")).grid(row=0, column=2, padx=5)
tk.Label(status_frame, textvariable=die_var,  fg="red",   bg="white", font=("Arial", 11, "bold")).grid(row=0, column=3, padx=5)

# RATE d·ªùi sang c·ªôt 6 v√† 7
tk.Label(status_frame, text="RATE:", fg="blue",  bg="white", font=("Arial", 11, "bold")).grid(row=0, column=6, padx=5)
tk.Label(status_frame, textvariable=rate_var, fg="blue",  bg="white", font=("Arial", 11, "bold")).grid(row=0, column=7, padx=5)

# Logs + Accounts
bottom_frame = tk.Frame(app, bg="white")
bottom_frame.pack(fill="both", expand=True, padx=10, pady=10)

log_frame = tk.LabelFrame(bottom_frame, text="Logs", bg="white")
log_frame.pack(side="left", fill="both", expand=True)
log_text = scrolledtext.ScrolledText(log_frame, width=58, height=4, state=tk.DISABLED, bg="black", fg="lime")
log_text.pack(fill="both", expand=True, padx=5, pady=5)

tree_frame = tk.LabelFrame(bottom_frame, text="Accounts", bg="white", font=("Arial", 10, "bold"))
tree_frame.pack(side="right", fill="both", expand=True, padx=5)

cols = ["STT","TR·∫†NG TH√ÅI","USERNAME","PASS","MAIL","PHONE","COOKIE","2FA","TOKEN","IP","PROXY","LIVE","DIE"]
tree = ttk.Treeview(tree_frame, columns=cols, show="headings", height=4)
vsb = ttk.Scrollbar(tree_frame, orient="vertical",   command=tree.yview);  tree.configure(yscrollcommand=vsb.set); vsb.pack(side="right",  fill="y")
hsb = ttk.Scrollbar(tree_frame, orient="horizontal", command=tree.xview);  tree.configure(xscrollcommand=hsb.set); hsb.pack(side="bottom", fill="x")
tree.pack(fill="both", expand=True)

for col in cols:
    tree.heading(col, text=col)
    tree.column(col, width=120, anchor="w")

tree.tag_configure("LIVE", background="lightgreen")
tree.tag_configure("DIE",  background="tomato")
load_config()
def open_main_app():
    try:
        app.deiconify()   # hi·ªán l·∫°i giao di·ªán ch√≠nh
    except Exception:
        pass

# g·ªçi intro tr∆∞·ªõc khi ch·∫°y main loop
show_intro(app, open_main_app)

app.mainloop()
