# ...existing code...
# ...existing code...
def save_config():
    # L·∫•y config hi·ªán t·∫°i (n·∫øu c√≥)
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
    except Exception:
        config = {}

    # L∆∞u c√°c gi√° tr·ªã UI hi·ªán t·∫°i
    try:
        config['phone_net_mode'] = phone_net_mode.get()
    except Exception:
        pass
    try:
        config['proxy_format_var'] = proxy_format_var.get()
    except Exception:
        pass
    try:
        config['phone_ig_app_var'] = phone_ig_app_var.get()
    except Exception:
        pass

    # ...c√°c config kh√°c n·∫øu c√≥...

    # Ghi l·∫°i file config.json
    with open('config.json', 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)
# ...existing code...

# ...existing code...
try:
    phone_net_mode.trace_add('write', lambda *args: save_config())
except Exception:
    pass

try:
    phone_ig_app_var.trace_add('write', lambda *args: save_config())
except Exception:
    pass

# ...existing code...

# ======================= Load config cho Phone Settings UI =======================
# ƒê·∫∑t ƒëo·∫°n n√†y SAU khi ƒë√£ ƒë·ªãnh nghƒ©a load_config v√† c√°c bi·∫øn UI li√™n quan
def apply_phone_settings_from_config():
    config = load_config()
    # Network Mode
    if 'phone_net_mode' in config:
        try:
            phone_net_mode.set(config['phone_net_mode'])
        except Exception:
            pass
    # Proxy Type
    if 'proxy_format_var' in config:
        try:
            proxy_format_var.set(config['proxy_format_var'])
        except Exception:
            pass
    # IG App
    if 'phone_ig_app_var' in config:
        try:
            phone_ig_app_var.set(config['phone_ig_app_var'])
        except Exception:
            pass

# ...existing code...
# G·ªçi h√†m n√†y sau khi ƒë√£ kh·ªüi t·∫°o c√°c bi·∫øn UI li√™n quan ƒë·∫øn Phone Settings
# apply_phone_settings_from_config()

import tkinter as tk
from PIL import Image, ImageTk
from tkinter import scrolledtext
import threading
import time
import math
import urllib.parse
from urllib.parse import urlparse
from selenium import webdriver as se_webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import ElementClickInterceptedException
from tkinter import ttk
import requests
import base64
import names
import subprocess, re, xml.etree.ElementTree as ET
import random
import string
import pygetwindow as gw
import os
from unidecode import unidecode
import re
import subprocess
import hashlib
from datetime import datetime
import pytz
import pyotp
import pyperclip
import sys
import time as _t
import os, time, shlex, calendar, secrets
from tkinter import filedialog, messagebox
import json
# Appium + Selenium Android
from appium import webdriver
from tkinter import Toplevel, Text, Scrollbar
from appium.webdriver.common.appiumby import AppiumBy
from appium import webdriver as appium_webdriver
from appium.options.android import UiAutomator2Options
from selenium.common.exceptions import WebDriverException
from tkinter import ttk, messagebox, filedialog, Text, Scrollbar, Toplevel
import socket, shutil
# Fix for PointerInput and ActionBuilder
from selenium.webdriver.common.actions.pointer_input import PointerInput
from selenium.webdriver.common.actions.action_builder import ActionBuilder

# ==================================== PHONE ====================================
# ============================
# APPIUM SERVER HELPERS
# ============================
APPIUM_HOST = "127.0.0.1"
APPIUM_PORT = 4723
APPIUM_STATUS_URL = f"http://{APPIUM_HOST}:{APPIUM_PORT}/wd/hub/status"

def _is_port_open(host, port) -> bool:
    s = socket.socket()
    s.settimeout(0.35)
    try:
        s.connect((host, port))
        s.close()
        return True
    except Exception:
        return False

def _wait_appium_ready(timeout=15) -> bool:
    t0 = time.time()
    while time.time() - t0 < timeout:
        if _is_port_open(APPIUM_HOST, APPIUM_PORT):
            try:
                r = requests.get(APPIUM_STATUS_URL, timeout=1.2)
                if r.ok:
                    return True
            except Exception:
                pass
        time.sleep(0.5)
    return False

def _appium_candidates() -> list:
    """
    C√°c l·ªánh c√≥ th·ªÉ ch·∫°y Appium tr√™n Windows:
    - appium / appium.cmd (trong PATH)
    - npx appium
    - %AppData%\\npm\\appium.cmd
    - node <ProgramFiles>/nodejs/node_modules/appium/build/lib/main.js
    """
    cands = []
    for name in ("appium", "appium.cmd"):
        p = shutil.which(name)
        if p: cands.append([p])

    npx_path = shutil.which("npx") or shutil.which("npx.cmd")
    if npx_path:
        cands.append([npx_path, "appium"])

    appdata = os.environ.get("APPDATA")
    if appdata:
        pth = os.path.join(appdata, "npm", "appium.cmd")
        if os.path.isfile(pth):
            cands.append([pth])

    for base in (os.environ.get("ProgramFiles"), os.environ.get("ProgramFiles(x86)")):
        if not base: 
            continue
        main_js = os.path.join(base, "nodejs", "node_modules", "appium", "build", "lib", "main.js")
        node = shutil.which("node") or shutil.which("node.exe")
        if node and os.path.isfile(main_js):
            cands.append([node, main_js])
    return cands

def _popen_hidden(cmd: list):
    creationflags = 0
    startupinfo = None
    if os.name == "nt":
        creationflags = subprocess.CREATE_NO_WINDOW
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    return subprocess.Popen(
        cmd,
        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL,
        creationflags=creationflags, startupinfo=startupinfo
    )

def start_appium_server() -> bool:
    """
    N·∫øu Appium ch∆∞a ch·∫°y, th·ª≠ kh·ªüi ƒë·ªông ng·∫ßm v·ªõi --session-override.
    """
    if _is_port_open(APPIUM_HOST, APPIUM_PORT):
        return True

    base_args = ["-p", str(APPIUM_PORT), "--session-override"]
    for cand in _appium_candidates():
        try:
            _popen_hidden(cand + base_args)
            if _wait_appium_ready(timeout=15):
                return True
        except Exception:
            pass

    try:
        _popen_hidden(["appium"] + base_args)
        if _wait_appium_ready(timeout=15):
            return True
    except Exception:
        pass

    return False

# ============================
# ADB HELPERS
# ============================
def _run(cmd: list[str]) -> str:
    try:
        out = subprocess.check_output(cmd, stderr=subprocess.STDOUT, text=True)
        return out.strip()
    except subprocess.CalledProcessError as e:
        return (e.output or "").strip()

def adb_devices() -> list[str]:
    """
    Tr·∫£ v·ªÅ danh s√°ch serial thi·∫øt b·ªã ƒëang ·ªü tr·∫°ng th√°i 'device'.
    """
    out = _run(["adb", "devices"])
    lines = [l for l in out.splitlines() if l.strip()]
    devs = []
    for ln in lines[1:]:
        if "\tdevice" in ln and not any(k in ln for k in ("offline", "unauthorized")):
            devs.append(ln.split("\t")[0])
    return devs

def adb_shell(udid: str, *args) -> str:
    return _run(["adb", "-s", udid, "shell", *args])

def is_device_rooted(udid: str) -> bool:
    """Ki·ªÉm tra nhanh thi·∫øt b·ªã c√≥ root kh√¥ng (d√πng su -c id ho·∫∑c which su)."""
    try:
        out = adb_shell(udid, "su", "-c", "id")
        if out and "uid=0" in out:
            return True
    except Exception:
        pass
    try:
        out2 = adb_shell(udid, "which", "su")
        if out2 and out2.strip():
            return True
    except Exception:
        pass
    return False

def clear_app_data(udid: str, package: str):
    out = adb_shell(udid, "pm", "clear", package)
    log(f"üßπ [{udid}] pm clear {package}: {out or 'OK'}")
    adb_shell(udid, "am", "force-stop", package)

def clear_instagram_and_warp(udid: str):
    """
    Clear d·ªØ li·ªáu Instagram + WARP + Super Proxy.
    """
    # ========== Instagram ==========
    clear_app_data(udid, "com.instagram.android")
    time.sleep(1.0)
    adb_shell(udid, "am", "force-stop", "com.instagram.android")
    time.sleep(1.0)

    # ========== Instagram Lite ==========
    clear_app_data(udid, "com.instagram.lite")
    time.sleep(1.0)
    adb_shell(udid, "am", "force-stop", "com.instagram.lite")
    time.sleep(1.0)

    # ========== Chrome ==========
    clear_app_data(udid, "com.android.chrome")
    time.sleep(1.0)
    adb_shell(udid, "am", "force-stop", "com.android.chrome")
    time.sleep(1.0)

    # ========== Cloudflare 1.1.1.1 / WARP ==========
    warp_candidates = [
        "com.cloudflare.onedotonedotonedotone",
        "com.cloudflare.onedotonedotone",
        "com.cloudflare.warp",
    ]

    out = adb_shell(udid, "pm", "list", "packages").lower()
    for line in out.splitlines():
        pkg = line.replace("package:", "").strip()
        if ("cloudflare" in pkg) and ("warp" in pkg or "onedot" in pkg or "1dot" in pkg):
            if pkg not in warp_candidates:
                warp_candidates.append(pkg)

    for pkg in warp_candidates:
        if adb_shell(udid, "pm", "path", pkg):
            clear_app_data(udid, pkg)
            time.sleep(1.0)
            adb_shell(udid, "am", "force-stop", pkg)
            time.sleep(1.0)

    # ========== Super Proxy ==========
    superproxy_pkg = "com.scheler.superproxy"
    if adb_shell(udid, "pm", "path", superproxy_pkg):
        clear_app_data(udid, superproxy_pkg)
        time.sleep(1.0)
        adb_shell(udid, "am", "force-stop", superproxy_pkg)
        time.sleep(1.0)

def kill_all_apps(udid: str):
    """
    ƒê√≥ng to√†n b·ªô app s·∫°ch s·∫Ω:
    - HOME tr∆∞·ªõc
    - Kill background
    - Force-stop IG, WARP, Super Proxy, Chrome
    - Remove t·∫•t c·∫£ recent tasks (tr·ª´ launcher/home)
    - HOME l·∫°i
    """
    # V·ªÅ HOME tr∆∞·ªõc
    adb_shell(udid, "input", "keyevent", "3")

    # Kill background
    adb_shell(udid, "am", "kill-all")

    # Force-stop c√°c app c·∫ßn ch·∫Øc ch·∫Øn ƒë√≥ng
    try:
        adb_shell(udid, "am", "force-stop", "com.instagram.android")
        adb_shell(udid, "am", "force-stop", "com.instagram.lite")
        adb_shell(udid, "am", "force-stop", "com.android.chrome")  # Th√™m d√≤ng n√†y
        adb_shell(udid, "am", "force-stop", "com.scheler.superproxy")
        # C√°c package Warp ph·ªï bi·∫øn
        for pkg in [
            "com.cloudflare.onedotonedotonedotone",
            "com.cloudflare.onedotonedotone",
            "com.cloudflare.warp",
        ]:
            adb_shell(udid, "am", "force-stop", pkg)
    except Exception:
        pass

    # Xo√° c√°c recent tasks (tr·ª´ home/launcher)
    out = adb_shell(udid, "cmd", "activity", "tasks")
    task_ids = re.findall(r"taskId=(\d+)", out or "")
    for tid in task_ids:
        try:
            ti = adb_shell(udid, "cmd", "activity", "task", tid)
            lo = (ti or "").lower()
            if "launcher" in lo or "home" in lo:
                continue
            adb_shell(udid, "cmd", "activity", "remove-task", tid)
        except Exception:
            pass

    # HOME l·∫°i ƒë·ªÉ ch·∫Øc ch·∫Øn
    adb_shell(udid, "input", "keyevent", "3")

def chay_lenh(cmd):
    try:
        out = subprocess.check_output(cmd, stderr=subprocess.STDOUT, text=True)
        return out.strip()
    except subprocess.CalledProcessError as e:
        return (e.output or "").strip()

def adb_mkdir(udid: str | None, remote_dir: str):
    cmd = ["adb"] + (["-s", udid] if udid else []) + ["shell", "mkdir", "-p", remote_dir]
    return chay_lenh(cmd)

def adb_push(udid: str | None, local_path: str, remote_path: str):
    cmd = ["adb"] + (["-s", udid] if udid else []) + ["push", local_path, remote_path]
    return chay_lenh(cmd)

def adb_media_scan(udid: str | None, remote_file: str):
    cmd = ["adb"] + (["-s", udid] if udid else []) + [
        "shell", "am", "broadcast",
        "-a","android.intent.action.MEDIA_SCANNER_SCAN_FILE",
        "-d", f"file://{remote_file}"
    ]
    return chay_lenh(cmd)

def tap_xy(d, x: int, y: int) -> bool:
    try:
        # ∆Øu ti√™n d√πng Appium n·∫øu c√≥
        finger = PointerInput("touch", "finger1")  # s·ª≠a TOUCH -> "touch"
        actions = ActionBuilder(d, mouse=finger)
        actions.pointer_action.move_to_location(x, y)
        actions.pointer_action.pointer_down()
        actions.pointer_action.pause(0.05)
        actions.pointer_action.pointer_up()
        actions.perform()
        return True
    except Exception:
        try:
            # fallback: ADB tap
            udid = None
            if 'active_sessions' in globals():
                for k, v in active_sessions.items():
                    if v == d:
                        udid = k
                        break
            if udid:
                subprocess.call([ADB_BIN, "-s", udid, "shell", "input", "tap", str(x), str(y)])
                return True
        except Exception as e2:
            log(f"‚ö†Ô∏è Tap l·ªói (ADB c≈©ng fail): {e2}")
        return False

# ======================== WARP PHONE =====================================

# Fix for ADB_BIN and active_sessions
ADB_BIN = "adb"  # or set to your adb path if needed
active_sessions = {}  # {udid: driver}

device_state = {}   # {udid: {"view": bool, "pick": bool}}
phone_device_tree = None  # s·∫Ω g√°n sau khi t·∫°o Treeview trong UI

def _tick(b: bool) -> str:
    return "‚òë" if b else "‚òê"

def refresh_adb_devices_table():
    """
    Qu√©t ADB v√† ƒë·ªï d·ªØ li·ªáu v√†o Treeview 4 c·ªôt: UDID | VIEW | CH·ªåN | STATUS.
    Gi·ªØ l·∫°i tr·∫°ng th√°i tick c≈© n·∫øu UDID v·∫´n c√≤n online.
    """
    try:
        devs = adb_devices()

        # th√™m dev m·ªõi v√†o state / x√≥a dev c≈©
        for ud in devs:
            device_state.setdefault(ud, {"view": False, "pick": False, "status": "No root"})
        for ud in list(device_state.keys()):
            if ud not in devs:
                device_state.pop(ud, None)

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i root (c√≥ th·ªÉ ch·∫≠m n·∫øu nhi·ªÅu device)
        for ud in devs:
            try:
                rooted = is_device_rooted(ud)
                device_state.setdefault(ud, {})
                device_state[ud]["status"] = "Rooted" if rooted else "No root"
            except Exception:
                device_state[ud]["status"] = "No root"

        # C·∫≠p nh·∫≠t phone_device_tree (4 c·ªôt)
        if phone_device_tree is not None:
            phone_device_tree.delete(*phone_device_tree.get_children())
            for ud in devs:
                st = device_state.get(ud, {"view": False, "pick": False, "status": "No root"})
                phone_device_tree.insert(
                    "", "end", iid=ud,
                    values=(ud, _tick(st.get("view", False)), _tick(st.get("pick", False)), st.get("status", "No root"))
                )

        if devs:
            log(f"üì° T√¨m th·∫•y {len(devs)} thi·∫øt b·ªã: {', '.join(devs)}")
        else:
            log("‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán thi·∫øt b·ªã n√†o. Ki·ªÉm tra USB debugging / c√°p / adb devices.")
    except Exception as e:
        log(f"‚ùå L·ªói refresh ADB: {repr(e)}")

def kill_adb_and_reload():
    try:
        # Kill t·∫•t c·∫£ ti·∫øn tr√¨nh adb.exe
        subprocess.run("taskkill /F /IM adb.exe", shell=True)
        log("üõë ƒê√£ kill to√†n b·ªô adb.exe.")
        time.sleep(1.5)
        refresh_adb_devices_table()
        log("üîÑ ƒê√£ reload danh s√°ch thi·∫øt b·ªã ADB.")
    except Exception as e:
        log(f"‚ùå L·ªói khi kill adb v√† reload: {repr(e)}")

def delete_pictures_and_reboot():
    try:
        selected = get_checked_udids("pick") if "get_checked_udids" in globals() else []
        if not selected:
            messagebox.showinfo("ADB", "Ch∆∞a ch·ªçn thi·∫øt b·ªã n√†o trong b·∫£ng.")
            return
        for udid in selected:
            subprocess.call([
                "adb", "-s", udid, "shell",
                "rm", "-rf", "/sdcard/DCIM/*", "/sdcard/Pictures/*"
            ])
            subprocess.call(["adb", "-s", udid, "reboot"])
        messagebox.showinfo("DELETE PIC", f"ƒê√£ x√≥a ·∫£nh v√† reboot {len(selected)} thi·∫øt b·ªã.")
    except Exception as e:
        messagebox.showerror("DELETE PIC", f"L·ªói: {repr(e)}")
        log(f"‚ùå L·ªói khi x√≥a ·∫£nh v√† reboot: {repr(e)}")

def set_device_status(udid: str, status: str):
    """
    C·∫≠p nh·∫≠t tr·∫°ng th√°i cho thi·∫øt b·ªã trong TreeView (th√™m c·ªôt STATUS).
    N·∫øu ch∆∞a c√≥ c·ªôt STATUS th√¨ ch·ªâ log ra console.
    """
    try:
        if phone_device_tree is not None and udid in phone_device_tree.get_children():
            # Gi·∫£ s·ª≠ b·∫°n c√≥ th√™m c·ªôt th·ª© 4 = STATUS
            phone_device_tree.set(udid, column="status", value=status)
        else:
            log(f"[{udid}] STATUS: {status}")
    except Exception as e:
        log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t status cho {udid}: {repr(e)}")

def _toggle_cell(event):
    """
    B·∫Øt click chu·ªôt tr√°i v√†o c·ªôt VIEW/CH·ªåN ƒë·ªÉ ƒë·∫£o tr·∫°ng th√°i tick.
    Ho·∫°t ƒë·ªông v·ªõi phone_device_tree.
    """
    # X√°c ƒë·ªãnh tree n√†o ƒë∆∞·ª£c click
    tree = event.widget
    if tree is None:
        return
    
    row_id = tree.identify_row(event.y)
    col_id = tree.identify_column(event.x)  # "#1" "#2" "#3"
    if not row_id:
        return
    if col_id == "#2":
        key = "view"
    elif col_id == "#3":
        key = "pick"
    else:
        return

    cur = device_state.get(row_id, {"view": False, "pick": False})
    cur[key] = not cur.get(key, False)
    device_state[row_id] = cur
    
    # C·∫≠p nh·∫≠t hi·ªÉn th·ªã tr√™n tree
    col_name = "view" if key == "view" else "pick"
    if phone_device_tree is not None and row_id in phone_device_tree.get_children():
        phone_device_tree.set(row_id, column=col_name, value=_tick(cur[key]))

def get_checked_udids(kind: str = "pick") -> list:
    """
    L·∫•y danh s√°ch UDID ƒë√£ tick theo c·ªôt.
    kind = 'view'  -> c√°c UDID tick c·ªôt VIEW (d√πng ƒë·ªÉ m·ªü scrcpy)
    kind = 'pick'  -> c√°c UDID tick c·ªôt CH·ªåN (d√πng khi ·∫•n START Phone)
    """
    return [ud for ud, st in device_state.items() if st.get(kind)]

def choose_scrcpy_path():
    global scrcpy_path
    fn = filedialog.askopenfilename(
        title="Ch·ªçn scrcpy (scrcpy.exe)",
        filetypes=[("Executable", "*.exe"), ("All files", "*.*")]
    )
    if fn:
        scrcpy_path = fn
        save_scrcpy_config()  # s·∫Ω log path

def open_scrcpy_for_list(udid_list: list[str]):
    """
    M·ªü scrcpy cho danh s√°ch UDID (th∆∞·ªùng l√† c√°c UDID tick c·ªôt VIEW).
    """
    if not udid_list:
        log("‚ÑπÔ∏è Ch∆∞a tick c·ªôt VIEW thi·∫øt b·ªã n√†o.")
        return
    exe = scrcpy_path or shutil.which("scrcpy") or "scrcpy"
    if not scrcpy_path and not shutil.which("scrcpy"):
        log("‚ö†Ô∏è Ch∆∞a ch·ªçn scrcpy.exe v√† scrcpy kh√¥ng c√≥ trong PATH. B·∫•m 'Ch·ªçn scrcpy.exe'.")
        return
    def is_scrcpy_running_for_udid(udid):
        # Check if a scrcpy process is running for this udid
        try:
            import psutil
        except ImportError:
            log("‚ö†Ô∏è Thi·∫øu th∆∞ vi·ªán psutil. ƒêang c√†i ƒë·∫∑t...")
            import subprocess as sp
            sp.check_call([sys.executable, "-m", "pip", "install", "psutil"])
            import psutil
        for proc in psutil.process_iter(['name', 'cmdline']):
            try:
                if proc.info['name'] and 'scrcpy' in proc.info['name'].lower():
                    cmdline = proc.info.get('cmdline') or []
                    # Check for -s <udid> in command line
                    for i, arg in enumerate(cmdline):
                        if arg == '-s' and i+1 < len(cmdline) and cmdline[i+1] == udid:
                            return True
            except Exception:
                continue
        return False

    for ud in udid_list:
        if is_scrcpy_running_for_udid(ud):
            log(f"üñ•Ô∏è scrcpy ƒë√£ ch·∫°y cho {ud}, b·ªè qua kh√¥ng m·ªü th√™m.")
        else:
            subprocess.Popen([exe, "-s", ud], creationflags=0)
            log(f"üñ•Ô∏è M·ªü scrcpy cho {ud}")

def get_devices():
    try:
        result = subprocess.check_output(["adb", "devices"], encoding="utf-8")
        lines = result.strip().split("\n")[1:]
        devices = [line.split("\t")[0] for line in lines if "\tdevice" in line]
        return devices
    except Exception as e:
        messagebox.showerror("ADB l·ªói", str(e))
        return []

def open_and_arrange():
    global scrcpy_path, resolution
    if not scrcpy_path or not os.path.exists(scrcpy_path):
        messagebox.showerror("L·ªói", "Ch∆∞a ch·ªçn scrcpy.exe")
        return

    devices = get_checked_udids("view")
    if not devices:
        messagebox.showinfo("Phone View", "B·∫°n c·∫ßn tick c·ªôt VIEW cho thi·∫øt b·ªã mu·ªën m·ªü!")
        return

    import pygetwindow as gw

    # Ki·ªÉm tra c·ª≠a s·ªï scrcpy ƒë√£ m·ªü
    all_windows = gw.getAllWindows()
    opened_serials = [w.title.split()[-1] for w in all_windows if w.title and ("scrcpy" in w.title.lower() or "sm-" in w.title.lower())]
    already_opened = [serial for serial in devices if serial in opened_serials]
    to_open = [serial for serial in devices if serial not in opened_serials]

    # M·ªü scrcpy cho thi·∫øt b·ªã ch∆∞a m·ªü
    for serial in to_open:
        subprocess.Popen([
            scrcpy_path,
            "-s", serial,
            "--max-size", resolution.split("x")[0]
        ])
        time.sleep(1.2)

    time.sleep(5)

    # L·∫•y c·ª≠a s·ªï scrcpy
    all_windows = gw.getAllWindows()
    windows = [w for w in all_windows if w.title and ("scrcpy" in w.title.lower() or "sm-" in w.title.lower())]

    if not windows:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï scrcpy")
        return

    # ‚úÖ Resize to√†n b·ªô v·ªÅ c√πng k√≠ch th∆∞·ªõc (ƒë·ªÉ kh√¥ng l·ªách khi x·∫øp s√°t)
    standard_width = min(w.width for w in windows)
    standard_height = min(w.height for w in windows)
    for w in windows:
        try:
            w.resizeTo(standard_width, standard_height)
        except:
            pass

    # ‚úÖ X·∫øp s√°t tuy·ªát ƒë·ªëi (8 view / h√†ng)
    max_per_row = 8
    x, y = 0, 0
    col_count = 0

    for idx, win in enumerate(windows):
        try:
            if col_count == 0:
                x = 0
            else:
                # ‚ö° d√πng right ƒë·ªÉ m√©p tr√°i c·ª≠a s·ªï k·∫ø ti·∫øp ch·∫°m m√©p ph·∫£i c·ª≠a s·ªï tr∆∞·ªõc
                prev_win = windows[idx - 1]
                x = prev_win.right

            win.moveTo(x, y)
            col_count += 1

            if col_count >= max_per_row:
                col_count = 0
                y += win.height
        except Exception as e:
            print("‚ö†Ô∏è Kh√¥ng move ƒë∆∞·ª£c:", e)

def change_resolution(event):
    global resolution
    resolution = combo_res.get()
    
def read_first_proxy_line_fixed() -> str | None:
    try:
        with open(PROXY_TXT, "r", encoding="utf-8", errors="ignore") as f:
            for ln in f:
                s = ln.strip()
                if s:
                    return s
    except Exception as e:
        log(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c Proxy.txt: {e}")
    return None

def parse_proxy(line: str) -> dict:
    """
    Tr·∫£ v·ªÅ {ip, port, user, pwd, has_auth}.
    H·ªó tr·ª£ IP:PORT ho·∫∑c IP:PORT:USER:PASS. D∆∞ th·ª´a s·∫Ω c·∫Øt c√≤n 4 ph·∫ßn.
    """
    ip = port = user = pwd = ""
    has_auth = False
    parts = (line or "").split(":")[:4]
    if len(parts) >= 2:
        ip, port = parts[0].strip(), parts[1].strip()
    if len(parts) == 4:
        user, pwd = parts[2].strip(), parts[3].strip()
        has_auth = True
    return {"ip": ip, "port": port, "user": user, "pwd": pwd, "has_auth": has_auth}

def safe_instagram_restart(self, log):
    subprocess.call(["adb", "-s", self.udid, "shell", "am", "force-stop", "com.instagram.android"])
    log("üõë ƒê√£ t·∫Øt app Instagram")
    time.sleep(3)
    subprocess.call(["adb", "-s", self.udid, "shell", "monkey", "-p", "com.instagram.android", "-c", "android.intent.category.LAUNCHER", "1"])
    log("üîÑ ƒê√£ m·ªü l·∫°i app Instagram")
    time.sleep(20)
    subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
    log("üë§ ƒê√£ v√†o Profile")
    time.sleep(8)

CAPTION_LEADS = [
    "Ghi d·∫•u h√¥m nay", "Kho·∫£nh kh·∫Øc nh·ªè", "M·ªôt t·∫•m cho nh·ªõ",
    "T√¢m tr·∫°ng nh·∫π t√™nh", "B·∫Øt ƒë·∫ßu th·∫≠t vui", "H√¥m nay ·ªïn √°p",
    "Ch√∫t n·∫Øng cu·ªëi ng√†y", "ƒêi ƒë√¢u ƒë√≥ n√®", "V·∫´n l√† m√¨nh th√¥i",
    "Gi·ªØ vibe n√†y", "L·∫°c v√†o cu·ªëi tu·∫ßn", "G√≥c nh·ªè th√¢n quen",
    "L√¢u l√¢u ƒëƒÉng c√°i", "Tranh th·ªß ch·ª•p v·ªôi", "L√™n h√¨nh c√°i ƒë√£",
    "Ch·ªçn b√¨nh y√™n", "Ch·∫•m m·ªôt c√°i", "Nh·ªè m√† xinh",
    "Ch·∫°m nh·∫π c·∫£m x√∫c", "M·ªôt ng√†y ƒë·∫πp", "H∆°i b·ªã m√™ g√≥c n√†y",
    "Up cho c√≥ ƒë·ªông l·ª±c", "Gi·ªØ k√Ω ·ª©c l·∫°i", "T√≠ch ƒëi·ªán nƒÉng l∆∞·ª£ng",
    "Tr·ªùi ƒë·∫πp th√¨ ƒëƒÉng", "Nh·∫π nh∆∞ m√¢y", "Th√≠ch l√† nh√≠ch",
    "ƒêi ƒë·ªÉ tr·ªü v·ªÅ", "M·ªôt m√†u r·∫•t t√¥i"
]

CAPTION_TRAILS = [
    "H·∫πn g·∫∑p ng√†y mai.", "B·∫°n ƒëang l√†m g√¨ ƒë√≥?", "Th√™m ch√∫t ƒë·ªông l·ª±c nh√©.",
    "C√πng chill kh√¥ng?", "G√≥p √Ω cho m√¨nh nha.", "Like nh·∫π c≈©ng vui.",
    "L∆∞u l·∫°i ƒë·ªÉ nh·ªõ.", "B·∫°n ch·ªçn t√¥ng n√†o?", "Up r·ªìi ƒëi ng·ªß.",
    "Kh√¥ng filter v·∫´n xinh.", "T·∫•m n√†y ƒë∆∞·ª£c kh√¥ng?", "G·ª£i √Ω caption gi√∫p m√¨nh?",
    "G·∫∑p nhau ·ªü ƒë√¢y nh√©.", "Cu·ªëi tu·∫ßn l√†m g√¨?", "Nh√¨n m√† th·∫•y th∆∞∆°ng.",
    "Gi·ªØ vibe n√†y l√¢u l√¢u.", "H√¥m nay ch·∫•m m·∫•y ƒëi·ªÉm?", "C√† ph√™ hay tr√†?",
    "M·ªói ng√†y m·ªôt ni·ªÅm vui.", "Gi·∫£n d·ªã cho ng√†y d√†i.", "ƒêi ƒë√¢u cu·ªëi tu·∫ßn?",
    "Th·∫£ tim l·∫•y v√≠a ƒë·∫πp.", "C·∫£m ∆°n ƒë√£ xem.", "Xem xong nh·ªõ m·ªâm c∆∞·ªùi.",
    "ƒêang tr√™n ƒë∆∞·ªùng v·ªÅ.", "G√µ c·ª≠a b√¨nh y√™n.", "B·∫°n ƒë√£ ƒÉn ch∆∞a?",
    "Ch·ªët ƒë∆°n n·ª• c∆∞·ªùi.", "M√¨nh ·ªïn, b·∫°n th√¨ sao?"
]

CAPTION_EMOJIS = ["‚ú®","üåø","üå∏","üåô","‚òÄÔ∏è","‚≠ê","üçÄ","üåº","ü´∂","üí´",
                  "üì∏","üòö","ü§ç","üß∏","ü•∞","ü´ß","üåà","üåä","üèñÔ∏è","üèôÔ∏è","üåÖ","üåá","üåÅ","üåµ","üç∞","üç©","üçπ","üçì",
                  "üßã","üéß","üéí","üéÄ","üïäÔ∏è","üíå","üíé","ü™¥","üìç","üß≠","ü™Ñ","üéûÔ∏è"
                  ]

# ===== BIO RANDOM =====
BIO_LINES = [
    "Lu√¥n h·ªçc ƒëi·ªÅu m·ªõi", "Ng√†y m·ªõi nƒÉng l∆∞·ª£ng", "T·ª´ng b∆∞·ªõc v·ªØng v√†ng",
    "S·ªëng c√≥ m·ª•c ti√™u", "Ch·ªçn t·ª≠ t·∫ø", "Tin v√†o b·∫£n th√¢n",
    "Nh·ªè nh∆∞ng c√≥ v√µ", "ƒêi·ªÅm tƒ©nh m√† ƒëi", "G·ªçn g√†ng suy nghƒ©",
    "M·ªói ng√†y m·ªôt t·ªët h∆°n", "Gi·ªØ nh·ªãp b√¨nh y√™n", "B·∫Øt ƒë·∫ßu l·∫°i c≈©ng ƒë∆∞·ª£c",
    "Kh√¥ng ng·ª´ng t√≤ m√≤", "Ki√™n tr√¨ l√† ch√¨a kh√≥a", "T·∫≠p trung v√†o ƒëi·ªÅu t·ªët",
    "Ch·∫≠m m√† ch·∫Øc", "M·ªói vi·ªác m·ªôt l·∫ßn", "NƒÉng l∆∞·ª£ng t√≠ch c·ª±c",
    "ƒê·ªß r·ªìi l√† h·∫°nh ph√∫c", "Gi·∫£n d·ªã ƒë·ªÉ t·ª± do", "V·ªØng nh∆∞ ki·ªÅng ba ch√¢n",
    "Nghƒ© √≠t l√†m nhi·ªÅu", "L√†m ƒë√∫ng vi·ªác", "T·ªânh t√°o v√† ch√¢n th√†nh",
    "C·ª© ƒëi s·∫Ω ƒë·∫øn", "Vun tr·ªìng th√≥i quen", "Gi·ªèi l√™n t·ª´ng ng√†y",
    "Th√≠ch nghi nhanh", "ƒê·∫∑t m√¨nh v√†o hi·ªán t·∫°i", "Gi·ªØ l·ª≠a ƒëam m√™",
    "B·∫£n lƒ©nh t·ª´ tr·∫£i nghi·ªám", "Th·ª≠ r·ªìi m·ªõi bi·∫øt", "Lu√¥n ch·ªß ƒë·ªông",
    "ƒê·ªãnh v·ªã l·∫°i b·∫£n th√¢n", "G√≥p nh·∫∑t ni·ªÅm vui", "X√¢y m·ªói ng√†y m·ªôt vi√™n g·∫°ch",
    "S·ªëng ch·∫≠m hi·ªÉu s√¢u", "H·ªçc t·ª´ sai l·∫ßm", "T·ª± do trong khu√¥n kh·ªï",
    "Gi·ªØ l·ªùi h·ª©a", "Ch·ªçn vi·ªác quan tr·ªçng", "ƒê∆°n gi·∫£n h√≥a ph·ª©c t·∫°p",
    "K·ª∑ lu·∫≠t l√† s·ª©c m·∫°nh", "Th√°i ƒë·ªô quy·∫øt ƒë·ªãnh", "C·∫£m ∆°n v√¨ h√¥m nay",
    "L√≤ng bi·∫øt ∆°n d·∫´n l·ªëi", "Kh·ªèe trong t√¢m tr√≠", "An tr√∫ hi·ªán t·∫°i",
    "Kh√¥ng so s√°nh", "T·∫°o kh√°c bi·ªát nh·ªè", "Nh·∫≠n tr√°ch nhi·ªám",
    "L√†m kh√≥ ƒë·ªÉ d·ªÖ", "T·∫Øt ·ªìn m·ªü t·∫≠p trung", "S√°ng t·∫°o m·ªói ng√†y",
    "H·ªçc h·ªèi t·ª´ m·ªçi ng∆∞·ªùi", "T√¥n tr·ªçng th·ªùi gian", "H∆∞·ªõng ƒë·∫øn gi√° tr·ªã",
    "S·ªëng c√≥ √≠ch", "Truy·ªÅn c·∫£m h·ª©ng nh·∫π nh√†ng", "T∆∞ duy d√†i h·∫°n",
    "T·ªëi ∆∞u h∆°n ho√†n h·∫£o", "X√¢y h·ªá th·ªëng cho m√¨nh", "Ki√™n nh·∫´n v·ªõi ti·∫øn b·ªô",
    "Thu g·ªçn cu·ªôc s·ªëng", "ƒê·∫∑t c√¢u h·ªèi hay", "Gi·ªØ chu·∫©n m·ª±c",
    "L√†m √≠t m√† ch·∫•t", "T·ª± ch·ªß c·∫£m x√∫c", "T·ª± tin v·ª´a ƒë·ªß",
    "Gi·ªØ nh·ªãp r√®n luy·ªán", "Ng·ªß s·ªõm d·∫≠y s·ªõm", "ƒÇn m·ª´ng b∆∞·ªõc nh·ªè",
    "Kh√¥ng ng·ª´ng ƒë·ªçc", "Ghi ch√©p ƒë·ªÉ nh·ªõ", "Ch·ªçn b·∫°n m√† ch∆°i",
    "T√≠ch l≈©y k·ªπ nƒÉng", "N√≥i th·∫≠t l√†m th·∫≠t", "H·ªçc ƒëi ƒë√¥i v·ªõi l√†m",
    "B·∫Øt ƒë·∫ßu t·ª´ h√¥m nay", "C·∫£i thi·ªán 1% m·ªói ng√†y", "Gi·ªØ l∆∞ng th·∫≥ng",
    "Bi·∫øt d·ª´ng ƒë√∫ng l√∫c", "Nh∆∞·ªùng ph·∫ßn ƒë√∫ng", "N√≥i √≠t hi·ªÉu nhi·ªÅu",
    "C√¢n b·∫±ng c√¥ng vi·ªác s·ªëng", "ƒê·∫∑t s·ª©c kh·ªèe l√™n tr∆∞·ªõc", "Nh√¨n xa tr√¥ng r·ªông",
    "T·∫°o gi√° tr·ªã tr∆∞·ªõc", "L√†m ch·ªß th·ªùi gian r·∫£nh", "X√¢y th√≥i quen t·ªët",
    "Gi·∫£n l∆∞·ª£c ∆∞u ti√™n", "R√µ m·ª•c ti√™u r√µ vi·ªác", "ƒê·∫ßu t∆∞ cho b·∫£n th√¢n",
    "T√¨m c∆° h·ªôi trong kh√≥", "T√≠ch c·ª±c nh∆∞ng th·ª±c t·∫ø", "T·∫≠p trung ƒëi·ªÅu ki·ªÉm so√°t",
    "ƒêam m√™ c√≥ k·ª∑ lu·∫≠t", "ƒê∆∞·ªùng d√†i m·ªõi bi·∫øt", "Ki√™n ƒë·ªãnh l·ªô tr√¨nh"
]

def _scroll_into_view_by_text(d, text_sub: str, max_swipes: int = 6, swipe_delay: float = 0.7) -> bool:
    # ∆Øu ti√™n UiScrollable, fallback vu·ªët tay ch·∫≠m h∆°n
    try:
        d.find_element(
            AppiumBy.ANDROID_UIAUTOMATOR,
            f'new UiScrollable(new UiSelector().scrollable(true)).scrollIntoView(new UiSelector().textContains("{text_sub}"))'
        )
        return True
    except Exception:
        try:
            size = d.get_window_size()
            for _ in range(max_swipes):
                d.swipe(size["width"]//2, int(size["height"]*0.82),
                        size["width"]//2, int(size["height"]*0.25), 300)
                time.sleep(swipe_delay)  # tƒÉng delay ƒë·ªÉ vu·ªët ch·∫≠m h∆°n
                if d.find_elements(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{text_sub}")'):
                    return True
        except Exception:
            pass
    return False

class AndroidWorker(threading.Thread):
    """
    Worker t·ªëi gi·∫£n: k·∫øt n·ªëi Appium t·ªõi thi·∫øt b·ªã v√† m·ªü Settings ƒë·ªÉ x√°c nh·∫≠n phi√™n s·ªëng.
    Sau n√†y b·∫°n c√≥ th·ªÉ m·ªü r·ªông c√°c b∆∞·ªõc ƒëƒÉng k√Ω IG t·∫°i ƒë√¢y.
    """
    def __init__(self, udid: str, log_fn=print):
        super().__init__(daemon=True)
        self.udid = udid
        self.log = log_fn
        self.driver = None
        self._stop_ev = threading.Event()

    def stop(self):
        self._stop_ev.set()
        try:
            if self.driver:
                self.driver.quit()
        except Exception:
            pass

    def run(self):
        try:
            self.log(f"üì≤ [Phone] K·∫øt n·ªëi thi·∫øt b·ªã {self.udid} qua Appium‚Ä¶")
            caps = {
                "platformName": "Android",
                "automationName": "UiAutomator2",
                "udid": self.udid,
                "appPackage": "com.android.settings",
                "appActivity": ".Settings",
                "newCommandTimeout": 180,
                "adbExecTimeout": 120000,
                "uiautomator2ServerLaunchTimeout": 120000,
                "noReset": True,
                "autoGrantPermissions": True,
            }
            opts = UiAutomator2Options().load_capabilities(caps)
            self.driver = webdriver.Remote(
                command_executor=f"http://{APPIUM_HOST}:{APPIUM_PORT}/wd/hub",
                options=opts
            )
            self.driver.implicitly_wait(4)
            try:
                self.driver.update_settings({"waitForIdleTimeout": 0, "ignoreUnimportantViews": True})
            except Exception:
                pass
            # ===== D·ªåN APP SAU KHI K·∫æT N·ªêI APPIUM =====
            self.log(f"üßπ [Phone] D·ªçn d·ªØ li·ªáu IG & WARP cho {self.udid}‚Ä¶")
            try:
                clear_instagram_and_warp(self.udid)
                kill_all_apps(self.udid)
                time.sleep(0.8)  # ·ªïn ƒë·ªãnh tr∆∞·ªõc khi c·∫•p quy·ªÅn
                self.ensure_keyboard_hidden()
                # üëá C·∫§P QUY·ªÄN app theo l·ª±a ch·ªçn
                try:
                    choice = (phone_ig_app_var.get() or "instagram").lower()
                except Exception:
                    choice = "instagram"
                if choice == "instagram_lite":
                    pkg_to_grant = "com.instagram.lite"
                elif choice == "chrome":
                    pkg_to_grant = "com.android.chrome"
                else:
                    pkg_to_grant = "com.instagram.android"
                self.grant_instagram_permissions(pkg=pkg_to_grant)
                self.log(f"‚úÖ [Phone] D·ªçn xong & ƒë√£ v·ªÅ Home ({self.udid}).")
            except Exception as ee:
                self.log(f"‚ö†Ô∏è [Phone] L·ªói khi d·ªçn app ({self.udid}): {repr(ee)}")

            # ===== CH·ªåN PH∆Ø∆†NG TH·ª®C M·∫†NG SAU KHI D·ªåN APP =====
            try:
                mode = phone_net_mode.get() if 'phone_net_mode' in globals() else 'wifi'
                mode = str(mode).lower()

                if mode == "wifi":
                    # Wi-Fi: t·∫Øt m√°y bay n·∫øu ƒëang b·∫≠t; T·∫ÆT 4G n·∫øu ƒëang b·∫≠t; b·∫≠t Wi-Fi n·∫øu ƒëang t·∫Øt
                    self.ensure_airplane_off()
                    self.ensure_mobile_data_off()     # üëà th√™m d√≤ng n√†y
                    self.use_wifi_mode()

                elif mode == "warp":
                    # WARP: t·∫Øt m√°y bay; T·∫ÆT 4G; ƒë·∫£m b·∫£o Wi-Fi ƒë√£ b·∫≠t r·ªìi m·ªõi connect WARP
                    self.log(f"üåê [Phone] {self.udid}: B·∫≠t WARP VPN")
                    self.ensure_airplane_off()
                    self.ensure_mobile_data_off()     # üëà th√™m d√≤ng n√†y
                    self.ensure_wifi_on()
                    try:
                        self.connect_warp()
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è [Phone] L·ªói b·∫≠t WARP cho {self.udid}: {repr(e)}")

                elif mode == "proxy":
                    self.log(f"üåê [Phone] {self.udid}: D√πng Proxy")
                    try:
                        self.ensure_airplane_off()
                        self.ensure_wifi_on()
                        self.open_super_proxy()   # ƒë√£ m·ªü "Add proxy" trong app
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói m·ªü Super Proxy: {repr(e)}")

                    # ===== ƒê·ªåC Proxy.txt v√† ƒëi·ªÅn theo radio =====
                    try:
                        line = read_first_proxy_line_fixed()
                        if not line:
                            self.log("‚õî Proxy.txt r·ªóng ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c.")
                            return
                        info = parse_proxy(line)  # {ip, port, user, pwd, has_auth}
                        fmt = proxy_format_var.get() if "proxy_format_var" in globals() else "ip_port"

                        if fmt == "ip_port":
                            if not info["ip"] or not info["port"]:
                                self.log("‚õî Proxy kh√¥ng h·ª£p l·ªá cho IP:PORT.")
                                return
                            self.configure_super_proxy_ip_port(info["ip"], info["port"])
                        elif fmt == "ip_port_userpass":
                            # (l√†m IP:PORT tr∆∞·ªõc theo y√™u c·∫ßu)
                            if not info["ip"] or not info["port"]:
                                self.log("‚õî Proxy kh√¥ng h·ª£p l·ªá.")
                                return
                            self.configure_super_proxy_ip_port(info["ip"], info["port"])
                            self.log("‚ÑπÔ∏è ƒêang x·ª≠ l√Ω b·∫£n IP:PORT tr∆∞·ªõc. USER/PASS s·∫Ω th√™m sau.")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω proxy: {repr(e)}")

                elif mode == "sim":
                    # SIM 4G: t·∫Øt airplane n·∫øu ƒëang b·∫≠t; n·∫øu mobile data ƒë√£ ON th√¨ gi·ªØ nguy√™n, ch∆∞a ON th√¨ b·∫≠t
                    self.log(f"üåê [Phone] {self.udid}: D√πng SIM 4G (Wi-Fi OFF, Data ON)")
                    try:
                        self.enable_sim_4g(prefer_slot=1, allow_roaming=False)
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è [Phone] L·ªói b·∫≠t SIM 4G: {repr(e)}")
                elif mode == "1.1.1.1":
                    # 1.1.1.1: t∆∞∆°ng t·ª± WARP nh∆∞ng d√πng h√†m ri√™ng connect_1_1_1_1()
                    self.log(f"üåê [Phone] {self.udid}: B·∫≠t VPN 1.1.1.1")
                    try:
                        self.ensure_airplane_off()
                        self.ensure_mobile_data_off()
                        self.ensure_wifi_on()
                        self.connect_1_1_1_1()  # ‚úÖ d√πng h√†m m·ªõi
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è [Phone] L·ªói b·∫≠t 1.1.1.1 cho {self.udid}: {repr(e)}")
                else:
                    self.log(f"‚ÑπÔ∏è Mode kh√¥ng h·ª£p l·ªá: {mode} ‚Üí d√πng Wi-Fi m·∫∑c ƒë·ªãnh")
                    self.ensure_airplane_off()
                    self.ensure_mobile_data_off()
                    self.use_wifi_mode()

            except Exception as e:
                self.log(f"‚ö†Ô∏è [Phone] Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c network mode: {repr(e)}")

            # üëâ B∆Ø·ªöC M·ªöI: m·ªü Instagram
            try:
                self.open_instagram()
            except Exception as e:
                self.log(f"‚ö†Ô∏è L·ªói khi m·ªü Instagram: {repr(e)}")

            self.log(f"‚úÖ [Phone] ƒê√£ m·ªü phi√™n Appium v·ªõi {self.udid}. M·ªü Settings OK.")
            # Gi·ªØ phi√™n s·ªëng ƒë·∫øn khi PAUSE ho·∫∑c STOP app.
            while not self._stop_ev.is_set():
                time.sleep(0.5)
        
        except WebDriverException as e:
            self.log(f"‚ùå [Phone] L·ªói Appium ({self.udid}): {e}")
        except Exception as e:
            self.log(f"‚ùå [Phone] L·ªói kh√°c ({self.udid}): {repr(e)}")
        finally:
            try:
                if self.driver: self.driver.quit()
            except Exception:
                pass
            self.log(f"‚èπ [Phone] ƒê√£ ƒë√≥ng phi√™n {self.udid}.")

    def grant_instagram_permissions(self, pkg: str = "com.instagram.android"):
        """C·∫•p quy·ªÅn runtime cho IG/IG Lite theo package truy·ªÅn v√†o."""
        udid = self.udid
        try:
            sdk = int((adb_shell(udid, "getprop", "ro.build.version.sdk") or "30").strip())
        except Exception:
            sdk = 30

        perms_android_13_plus = [
            "android.permission.CAMERA",
            "android.permission.RECORD_AUDIO",
            "android.permission.ACCESS_FINE_LOCATION",
            "android.permission.ACCESS_COARSE_LOCATION",
            "android.permission.READ_MEDIA_IMAGES",
            "android.permission.READ_MEDIA_VIDEO",
            "android.permission.READ_MEDIA_AUDIO",
            "android.permission.READ_CONTACTS",
            "android.permission.POST_NOTIFICATIONS",
            "android.permission.READ_CALENDAR",
            "android.permission.WRITE_CALENDAR",
            "android.permission.READ_PHONE_STATE",
        ]
        perms_legacy = [
            "android.permission.CAMERA",
            "android.permission.RECORD_AUDIO",
            "android.permission.ACCESS_FINE_LOCATION",
            "android.permission.ACCESS_COARSE_LOCATION",
            "android.permission.READ_EXTERNAL_STORAGE",
            "android.permission.WRITE_EXTERNAL_STORAGE",
            "android.permission.READ_CONTACTS",
            "android.permission.READ_CALENDAR",
            "android.permission.WRITE_CALENDAR",
            "android.permission.READ_PHONE_STATE",
        ]
        perms = perms_android_13_plus if sdk >= 33 else perms_legacy

        self.log(f"üîê C·∫•p quy·ªÅn cho {pkg} (SDK {sdk})‚Ä¶")
        for p in perms:
            try:
                adb_shell(udid, "pm", "grant", pkg, p)
            except Exception as e:
                self.log(f"‚ö†Ô∏è pm grant {p}: {e}")

        if sdk >= 33:
            try:
                adb_shell(udid, "appops", "set", pkg, "POST_NOTIFICATION", "allow")
            except Exception:
                pass
        try:
            adb_shell(udid, "appops", "set", pkg, "RUN_IN_BACKGROUND", "allow")
        except Exception:
            pass

        self.log("‚úÖ ƒê√£ c·∫•p quy·ªÅn c·∫ßn thi·∫øt.")

    def is_keyboard_shown(self) -> bool:
        # C√°ch 1: h·ªèi Appium (n·∫øu driver h·ªó tr·ª£)
        try:
            return bool(self.driver.is_keyboard_shown())
        except Exception:
            pass
        # C√°ch 2: h·ªèi qua dumpsys input_method
        try:
            out = adb_shell(self.udid, "dumpsys", "input_method") or ""
            out_low = out.lower()
            # c√°c c·ªù th∆∞·ªùng g·∫∑p t√πy ROM
            return ("minputshown=true" in out_low) or ("mIsInputShown=true".lower() in out_low) or ("mcurtoken" in out_low and "ime" in out_low and "visible" in out_low)
        except Exception:
            return False

    def ensure_keyboard_hidden(self, attempts: int = 3):
        """
        ·∫®n b√†n ph√≠m m·ªÅm n·∫øu ƒëang hi·ªán. Th·ª≠ Appium.hide_keyboard(),
        n·∫øu kh√¥ng ƒë∆∞·ª£c th√¨ g·ª≠i keyevent BACK (4). An to√†n/idempotent.
        """
        for i in range(attempts):
            try:
                if not self.is_keyboard_shown():
                    if i == 0:
                        self.log("‚å®Ô∏è B√†n ph√≠m ƒëang t·∫Øt ‚Äî gi·ªØ nguy√™n.")
                    else:
                        self.log("‚úÖ ƒê√£ t·∫Øt b√†n ph√≠m.")
                    return
            except Exception:
                # n·∫øu kh√¥ng d√≤ ƒë∆∞·ª£c tr·∫°ng th√°i, v·∫´n th·ª≠ ·∫©n 1‚Äì2 l·∫ßn cho ch·∫Øc
                pass

            # Th·ª≠ ·∫©n b·∫±ng Appium
            try:
                self.driver.hide_keyboard()
                time.sleep(0.25)
                continue
            except Exception:
                pass

            # Fallback: g·ª≠i BACK (th∆∞·ªùng s·∫Ω ƒë√≥ng keyboard n·∫øu ƒëang hi·ªán)
            try:
                adb_shell(self.udid, "input", "keyevent", "4")
                time.sleep(0.25)
            except Exception:
                pass

        # l·∫ßn cu·ªëi ki·ªÉm tra ƒë·ªÉ log
        try:
            if not self.is_keyboard_shown():
                self.log("‚úÖ ƒê√£ t·∫Øt b√†n ph√≠m.")
            else:
                self.log("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫Øt b√†n ph√≠m (ROM ch·∫∑n/IME ƒë·∫∑c bi·ªát).")
        except Exception:
            self.log("‚ÑπÔ∏è ƒê√£ g·ª≠i l·ªánh ·∫©n b√†n ph√≠m (kh√¥ng x√°c ƒë·ªãnh tr·∫°ng th√°i).")
    
    # ----------=========================== Wi-Fi helpers (idempotent) ----------=============================
    def _get_setting(self, scope: str, key: str, default: str = "0") -> str:
        try:
            out = (adb_shell(self.udid, "settings", "get", scope, key) or "").strip()
            return out if out not in ("null", "") else default
        except Exception:
            return default

    def is_wifi_on(self) -> bool:
        # ∆∞u ti√™n dumpsys; fallback settings
        try:
            out = adb_shell(self.udid, "dumpsys", "wifi") or ""
            if "Wi-Fi is enabled" in out: return True
            if "Wi-Fi is disabled" in out: return False
        except Exception:
            pass
        return self._get_setting("global", "wifi_on", "0") == "1"

    def ensure_wifi_on(self):
        if self.is_wifi_on():
            self.log("üì∂ Wi-Fi ƒë√£ b·∫≠t ‚Äî gi·ªØ nguy√™n.")
            return
        self.log("üì∂ B·∫≠t Wi-Fi‚Ä¶")
        try:
            adb_shell(self.udid, "svc", "wifi", "enable")
            adb_shell(self.udid, "settings", "put", "global", "wifi_on", "1")
            time.sleep(0.5)
        except Exception:
            pass
    
    def ensure_airplane_off(self):
        """T·∫Øt ch·∫ø ƒë·ªô m√°y bay n·∫øu ƒëang b·∫≠t (idempotent)."""
        try:
            val = (adb_shell(self.udid, "settings", "get", "global", "airplane_mode_on") or "0").strip()
            if val == "1":
                self.log("üõ´ T·∫Øt Ch·∫ø ƒë·ªô m√°y bay‚Ä¶")
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "0")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "false")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "false")
                time.sleep(0.7)
        except Exception:
            pass
    
    def is_mobile_data_on(self) -> bool:
        try:
            return (adb_shell(self.udid, "settings", "get", "global", "mobile_data") or "0").strip() == "1"
        except Exception:
            return False

    def ensure_mobile_data_off(self):
        """T·∫Øt d·ªØ li·ªáu di ƒë·ªông n·∫øu ƒëang b·∫≠t (idempotent)."""
        if not self.is_mobile_data_on():
            self.log("üì° Mobile data ƒëang t·∫Øt ‚Äî gi·ªØ nguy√™n.")
            return
        self.log("üì° T·∫Øt Mobile data‚Ä¶")
        try:
            adb_shell(self.udid, "svc", "data", "disable")
            adb_shell(self.udid, "settings", "put", "global", "mobile_data", "0")
            time.sleep(0.3)
        except Exception:
            pass

    # (tu·ª≥ ch·ªçn) wrapper cho ch·∫ø ƒë·ªô Wi-Fi
    def use_wifi_mode(self):
        self.log(f"üåê [Phone] {self.udid}: D√πng Wi-Fi (b·∫≠t n·∫øu ƒëang t·∫Øt)")
        self.ensure_wifi_on()

    # ==================================== WARP PHONE =====================================
    def connect_warp(self):
        """
        B·∫≠t Cloudflare 1.1.1.1 (WARP) an to√†n:
        Airplane OFF -> Mobile data OFF -> Wi-Fi ON -> wake -> start_activity/activate/monkey -> wait foreground
        -> Next -> Accept -> (Install VPN Profile + OK) -> Connect.
        """
        d = self.driver
        udid = self.udid
        pkg = "com.cloudflare.onedotonedotonedotone"
        main_act = "com.cloudflare.app.MainActivity"

        # ‚úÖ Chu·∫©n b·ªã m√¥i tr∆∞·ªùng cho WARP
        try:
            self.ensure_airplane_off()     # t·∫Øt m√°y bay n·∫øu ƒëang b·∫≠t
            self.ensure_mobile_data_off()  # t·∫Øt 4G n·∫øu ƒëang b·∫≠t
            self.ensure_wifi_on()          # b·∫≠t Wi-Fi n·∫øu ƒëang t·∫Øt
        except Exception:
            pass

        # ===== helpers c·ª•c b·ªô =====
        def _wake_screen():
            try:
                subprocess.call(["adb","-s",udid,"shell","input","keyevent","224"])
                time.sleep(0.3)
            except Exception:
                pass

        def _wait_app_foreground(package, timeout=12):
            end = time.time() + timeout
            while time.time() < end:
                try:
                    if d.current_package == package:
                        return True
                except Exception:
                    pass
                time.sleep(0.3)
            return False

        def _exists_any_text(texts, timeout=5, sleep_step=0.5):
            """Ki·ªÉm tra c√≥ ph·∫ßn t·ª≠ n√†o ch·ª©a text trong danh s√°ch kh√¥ng."""
            end = time.time() + timeout
            while time.time() < end:
                for t in texts:
                    try:
                        els = self.driver.find_elements(AppiumBy.XPATH, f'//*[contains(@text,"{t}")]')
                        if els:
                            return True
                    except Exception:
                        pass
                time.sleep(sleep_step)
            return False

        def _tap_any_text(texts, timeout=5, sleep_step=0.5):
            """T√¨m v√† click ph·∫ßn t·ª≠ c√≥ text trong danh s√°ch."""
            end = time.time() + timeout
            while time.time() < end:
                for t in texts:
                    try:
                        els = self.driver.find_elements(AppiumBy.XPATH, f'//*[contains(@text,"{t}")]')
                        if els:
                            els[0].click()
                            self.log(f"üëâ ƒê√£ b·∫•m: {t}")
                            return True
                    except Exception:
                        pass
                time.sleep(sleep_step)
            return False

        _wake_screen()
        self.log("üåê M·ªü WARP (1.1.1.1)‚Ä¶")

        # 1) M·ªü app v·ªõi chu·ªói fallback
        started = False
        try:
            d.start_activity(pkg, main_act); started = True
        except Exception:
            try:
                d.activate_app(pkg); started = True
            except Exception:
                pass
        if not started:
            subprocess.call([
                "adb","-s",udid,"shell","monkey","-p",pkg,
                "-c","android.intent.category.LAUNCHER","1"
            ])

        _wait_app_foreground(pkg, timeout=10)

        # 2) Onboarding: Next -> Accept (n·∫øu c√≥)
        _tap_any_text(["Next","Ti·∫øp","NEXT"], timeout=4, sleep_step=0.2)
        _tap_any_text(["Accept","Ch·∫•p nh·∫≠n","ƒê·ªìng √Ω","ACCEPT"], timeout=4, sleep_step=0.2)

        time.sleep(5)
        # 3) Ch·ªâ b·∫•m Install VPN Profile khi xu·∫•t hi·ªán (check nhanh, n·∫øu kh√¥ng c√≥ th√¨ b·ªè qua)
        if _exists_any_text(["Install VPN Profile", "C√†i ƒë·∫∑t h·ªì s∆° VPN", "C√†i ƒë·∫∑t VPN"], timeout=1, sleep_step=0.12):
            _tap_any_text(["Install VPN Profile", "C√†i ƒë·∫∑t h·ªì s∆° VPN", "C√†i ƒë·∫∑t VPN"], timeout=1, sleep_step=0.12)
            time.sleep(0.8)  # ƒë·ª£i popup h·ªá th·ªëng hi·ªán ra (r√∫t ng·∫Øn)
            # x·ª≠ l√Ω popup h·ªá th·ªëng Android (Allow/OK) ‚Äî ch·ªâ b·∫•m n·∫øu xu·∫•t hi·ªán
            if _exists_any_text(["OK", "Cho ph√©p", "Allow"], timeout=1, sleep_step=0.12):
                _tap_any_text(["OK", "Cho ph√©p", "Allow"], timeout=1, sleep_step=0.12)

        # 4) Popup Android ‚ÄúConnection request‚Äù ‚Üí OK/Allow (ch·ªâ b·∫•m n·∫øu c√≥)
        if _exists_any_text(["OK", "Allow", "Cho ph√©p", "ƒê·ªíNG √ù"], timeout=1, sleep_step=0.12):
            _tap_any_text(["OK", "Allow", "Cho ph√©p", "ƒê·ªíNG √ù"], timeout=1, sleep_step=0.12)

        # 5) B·∫≠t c√¥ng t·∫Øc/n√∫t Connect
        toggled = False
        try:
            for sw in d.find_elements(AppiumBy.CLASS_NAME, "android.widget.Switch"):
                if sw.is_enabled() and sw.is_displayed():
                    try:
                        if (sw.get_attribute("checked") or "").lower() == "false":
                            sw.click()
                        toggled = True
                        break
                    except Exception:
                        pass
        except Exception:
            pass
        if not toggled:
            if not _tap_any_text(["Turn on","Connect","K·∫øt n·ªëi","B·∫≠t"], timeout=3, sleep_step=0.2):
                # Fallback: tap t·ªça ƒë·ªô nh·∫π
                try:
                    size = d.get_window_size()
                    x = int(size["width"] * 0.5)
                    y = int(size["height"] * 0.42)
                    d.swipe(x, y, x, y, 150)
                except Exception:
                    pass

        # 6) Ch·ªù tr·∫°ng th√°i ƒë·ªïi & x·ª≠ l√Ω popup n·∫øu Android h·ªèi l·∫ßn n·ªØa
        deadline = time.time() + 2
        while time.time() < deadline and _exists_any_text(["Disconnected","Kh√¥ng ƒë∆∞·ª£c b·∫£o v·ªá"]):
            time.sleep(0.4)
        _tap_any_text(["OK","Allow","Cho ph√©p","ƒê·ªíNG √ù"], timeout=2, sleep_step=0.2)

        self.log("‚úÖ WARP ƒë√£ ƒë∆∞·ª£c b·∫≠t (Next/Accept/Install/OK/Connect).")

    # ================================= PROXY PHONE ======================================================
    def configure_super_proxy_ip_port(self, ip=None, port=None, user=None, pwd=None):
        """Gi·ªØ h√†m n√†y ƒë·ªÉ tr√°nh l·ªói AttributeError t·ª´ lu·ªìng network mode 'proxy'."""
        try:
            if ip and port:
                if user and pwd:
                    self.log(f"‚öôÔ∏è configure_super_proxy_ip_port: IP={ip}:{port} | USER={user} | PASS={pwd}")
                else:
                    self.log(f"‚öôÔ∏è configure_super_proxy_ip_port: IP={ip}:{port} (no auth)")
            else:
                self.log("‚öôÔ∏è configure_super_proxy_ip_port: Kh√¥ng c√≥ IP/PORT h·ª£p l·ªá.")
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói trong configure_super_proxy_ip_port: {repr(e)}")

    def open_super_proxy(self):
        d = self.driver
        udid = self.udid
        pkg = "com.scheler.superproxy"
        main_act = "com.scheler.superproxy.activity.MainActivity"

        # ƒê·∫£m b·∫£o m·∫°ng tr∆∞·ªõc khi m·ªü app
        self.ensure_airplane_off()
        self.ensure_mobile_data_off()
        self.ensure_wifi_on()

        self.log("üì≤ ƒêang m·ªü Super Proxy‚Ä¶")
        try:
            d.start_activity(pkg, main_act)
        except:
            adb_shell(udid, "monkey", "-p", pkg, "-c", "android.intent.category.LAUNCHER", "1")

        time.sleep(10)

        # üëâ Tap Add Proxy
        adb_shell(udid, "input", "tap", "860", "1400")
        time.sleep(4)

        # üëâ L·∫•y proxy t·ª´ Proxy.txt
        proxy = parse_proxy(read_first_proxy_line_fixed())
        if not proxy or not proxy["ip"] or not proxy["port"]:
            self.log("‚õî Proxy kh√¥ng h·ª£p l·ªá")
            return

        # Log ch√≠nh x√°c c·∫•u h√¨nh proxy
        if proxy.get("has_auth"):
            self.log(f"‚öôÔ∏è Proxy nh·∫≠n ƒë∆∞·ª£c:")
            self.log(f"   ‚îú‚îÄ IP: {proxy['ip']}")
            self.log(f"   ‚îú‚îÄ PORT: {proxy['port']}")
            self.log(f"   ‚îú‚îÄ USER: {proxy['user']}")
            self.log(f"   ‚îî‚îÄ PASS: {proxy['pwd']}")
        else:
            self.log(f"‚öôÔ∏è Proxy nh·∫≠n ƒë∆∞·ª£c:")
            self.log(f"   ‚îú‚îÄ IP: {proxy['ip']}")
            self.log(f"   ‚îî‚îÄ PORT: {proxy['port']}")

        # üëâ Protocol HTTP
        adb_shell(udid, "input", "tap", "500", "600")   # tap Protocol
        adb_shell(udid, "input", "tap", "500", "700")   # ch·ªçn HTTP
        time.sleep(3)

        # üëâ Server (IP)
        adb_shell(udid, "input", "tap", "500", "800")
        adb_shell(udid, "input", "text", proxy["ip"])
        time.sleep(3)

        # üëâ Port
        adb_shell(udid, "input", "tap", "500", "950")
        adb_shell(udid, "input", "text", proxy["port"])
        time.sleep(3)

        # üëâ N·∫øu c√≥ user/pass th√¨ x·ª≠ l√Ω th√™m
        if proxy.get("has_auth"):
            # Ch·ªçn Authentication method ‚Üí Username/Password
            adb_shell(udid, "input", "tap", "500", "1300")
            time.sleep(3)
            adb_shell(udid, "input", "tap", "500", "1100")
            time.sleep(3)

            # Vu·ªët xu·ªëng ƒë·ªÉ hi·ªán √¥ User/Pass
            adb_shell(udid, "input", "swipe", "500", "1500", "500", "500", "300")
            time.sleep(6)

            # Username
            adb_shell(udid, "input", "tap", "500", "1100")
            adb_shell(udid, "input", "text", proxy["user"])
            time.sleep(3)

            # Password
            adb_shell(udid, "input", "tap", "500", "1250")
            adb_shell(udid, "input", "text", proxy["pwd"])
            time.sleep(3)

        # üëâ Save
        adb_shell(udid, "input", "tap", "1000", "100")
        time.sleep(3)

        # üëâ Start
        adb_shell(udid, "input", "tap", "500", "1400")
        time.sleep(4)

        # üëâ Popup Connection request (OK)
        adb_shell(udid, "input", "tap", "800", "1300")

        # üëâ K·∫øt qu·∫£ cu·ªëi
        if proxy.get("has_auth"):
            self.log(f"‚úÖ ƒê√£ c·∫•u h√¨nh Proxy {proxy['ip']}:{proxy['port']} "
                     f"(USER={proxy['user']} | PASS={proxy['pwd']})")
        else:
            self.log(f"‚úÖ ƒê√£ c·∫•u h√¨nh Proxy {proxy['ip']}:{proxy['port']}")

    # ================================= SIM 4G (simple & idempotent) ====================================================
    def enable_sim_4g_adb(self, prefer_slot: int = 1, allow_roaming: bool = False):
        """
        B·∫¨T SIM 4G qua ADB: t·∫Øt Wi-Fi, ƒë·∫£m b·∫£o t·∫Øt M√°y bay, b·∫≠t Mobile data (idempotent).
        (Gi·ªØ tham s·ªë cho t∆∞∆°ng th√≠ch, nh∆∞ng kh√¥ng d√πng subId/roaming ·ªü b·∫£n t·ªëi gi·∫£n.)
        """
        udid = self.udid
        self.log("üì∂ [ADB] B·∫≠t SIM 4G (idempotent)‚Ä¶")

        # helper ƒë·ªçc setting
        def _get(scope, key, default="0"):
            try:
                val = (adb_shell(udid, "settings", "get", scope, key) or "").strip()
                return val if val not in ("null","") else default
            except Exception:
                return default

        # 0) N·∫øu ƒëang b·∫≠t M√°y bay ‚Üí t·∫Øt
        if _get("global", "airplane_mode_on", "0") == "1":
            self.log("üõ´ ƒêang t·∫Øt Ch·∫ø ƒë·ªô m√°y bay‚Ä¶")
            try:
                adb_shell(udid, "settings", "put", "global", "airplane_mode_on", "0")
                adb_shell(udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "false")
                adb_shell(udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "false")
                time.sleep(0.7)
            except Exception:
                pass

        # 1) N·∫øu mobile data ƒë√£ b·∫≠t ‚Üí gi·ªØ nguy√™n
        if _get("global", "mobile_data", "0") == "1":
            self.log("üì° Mobile data ƒë√£ b·∫≠t ‚Äî gi·ªØ nguy√™n.")
            return

        # 2) T·∫Øt Wi-Fi r·ªìi b·∫≠t Mobile data
        try:
            adb_shell(udid, "svc", "wifi", "disable")
            time.sleep(0.2)
            adb_shell(udid, "svc", "data", "enable")
            adb_shell(udid, "settings", "put", "global", "mobile_data", "1")
            self.log("‚úÖ [ADB] Wi-Fi OFF, Mobile data ON")
        except Exception as e:
            self.log(f"‚ö†Ô∏è [ADB] L·ªói b·∫≠t SIM 4G: {e}")
            raise


    def enable_sim_4g_via_ui(self, allow_roaming: bool = False):
        """
        B·∫¨T SIM 4G qua UI: Settings ‚Üí Wi-Fi OFF ‚Üí Mobile network ‚Üí Mobile data ON.
        """
        d = self.driver
        udid = self.udid
        self.log("üì∂ [UI] B·∫≠t Mobile data qua Settings‚Ä¶")

        # --- helpers nh·ªè ---
        def tap_text(texts, timeout=5, step=0.3):
            end = _t.time() + timeout
            while _t.time() < end:
                for t in texts:
                    try:
                        el = d.find_element(AppiumBy.XPATH, f'//*[contains(@text, "{t}")]')
                        el.click()
                        return True
                    except Exception:
                        pass
                _t.sleep(step)
            return False

        def first_switch():
            for rid in ("com.android.settings:id/switch_widget",
                        "android:id/switch_widget",
                        "com.android.settings:id/switch_bar"):
                try:
                    return d.find_element(AppiumBy.ID, rid)
                except Exception:
                    pass
            try:
                return d.find_element(AppiumBy.CLASS_NAME, "android.widget.Switch")
            except Exception:
                return None

        def set_first_switch(desired_on: bool):
            sw = first_switch()
            if not sw:
                return False
            try:
                checked = (sw.get_attribute("checked") or "").lower() == "true"
            except Exception:
                checked = None
            try:
                if checked is None or checked != desired_on:
                    sw.click()
                    time.sleep(0.4)
                return True
            except Exception:
                return False

        # --- m·ªü Network & internet ---
        opened = False
        for act in (
            "com.android.settings.Settings$NetworkDashboardActivity",
            "com.android.settings.Settings$WirelessSettingsActivity",
            ".Settings",
        ):
            try:
                d.start_activity("com.android.settings", act)
                opened = True
                break
            except Exception:
                pass
        if not opened:
            try:
                adb_shell(udid, "am", "start", "-a", "android.settings.WIRELESS_SETTINGS")
            except Exception:
                pass
        time.sleep(0.7)

        # 1) Wi-Fi ‚Üí OFF
        if tap_text(["Wi-Fi", "WiFi", "WLAN", "M·∫°ng Wi-Fi", "M·∫°ng wifi"], timeout=4):
            time.sleep(0.4)
            set_first_switch(False)
            d.back()
            time.sleep(0.3)

        # 2) Mobile network ‚Üí Mobile data ON
        if tap_text(["Mobile network", "M·∫°ng di ƒë·ªông", "Di ƒë·ªông"], timeout=5):
            time.sleep(0.5)
            set_first_switch(True)
            d.back()
            time.sleep(0.2)

        self.log("‚úÖ [UI] Wi-Fi OFF, Mobile data ON")


    def enable_sim_4g(self, prefer_slot=1, allow_roaming=False):
        """
        Wrapper: ƒë·∫£m b·∫£o t·∫Øt m√°y bay; n·∫øu mobile data ƒë√£ ON th√¨ gi·ªØ nguy√™n,
        ng∆∞·ª£c l·∫°i th·ª≠ ADB tr∆∞·ªõc (nhanh), fail m·ªõi fallback UI.
        """
        # t·∫Øt m√°y bay n·∫øu ƒëang b·∫≠t
        try:
            val = (adb_shell(self.udid, "settings", "get", "global", "airplane_mode_on") or "0").strip()
            if val == "1":
                self.log("üõ´ T·∫Øt Ch·∫ø ƒë·ªô m√°y bay tr∆∞·ªõc khi b·∫≠t SIM 4G‚Ä¶")
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "0")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "false")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "false")
                time.sleep(0.7)
        except Exception:
            pass

        # n·∫øu mobile data ƒë√£ b·∫≠t th√¨ gi·ªØ nguy√™n
        try:
            md = (adb_shell(self.udid, "settings", "get", "global", "mobile_data") or "0").strip()
            if md == "1":
                self.log("üì° Mobile data ƒë√£ b·∫≠t ‚Äî gi·ªØ nguy√™n.")
                return
        except Exception:
            pass

        # b·∫≠t b·∫±ng ADB; l·ªói th√¨ UI
        try:
            self.enable_sim_4g_adb(prefer_slot=prefer_slot, allow_roaming=allow_roaming)
        except Exception as e:
            self.log(f"‚ÑπÔ∏è ADB l·ªói/kh√¥ng ƒë·ªß quy·ªÅn: {e} ‚Üí d√πng UI")
            self.enable_sim_4g_via_ui(allow_roaming=False)

    # ================================== WARP ( 1.1.1.1 / DNS ) ============================================
    def connect_1_1_1_1(self):
        """
        B·∫≠t Cloudflare 1.1.1.1 (VPN) an to√†n:
        Airplane OFF -> Mobile data OFF -> Wi-Fi ON -> wake -> start_activity/activate/monkey -> wait foreground
        -> Next -> Accept -> (Install VPN Profile + OK) -> Connect.
        """
        d = self.driver
        udid = self.udid
        pkg = "com.cloudflare.onedotonedotonedotone"
        main_act = "com.cloudflare.app.MainActivity"

        # ‚úÖ Chu·∫©n b·ªã m√¥i tr∆∞·ªùng cho 1.1.1.1
        try:
            self.ensure_airplane_off()
            self.ensure_mobile_data_off()
            self.ensure_wifi_on()
        except Exception:
            pass

        # ===== helpers c·ª•c b·ªô =====
        def _wake_screen():
            try:
                subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "224"])
                time.sleep(0.3)
            except Exception:
                pass

        def _wait_app_foreground(package, timeout=12):
            end = time.time() + timeout
            while time.time() < end:
                try:
                    if d.current_package == package:
                        return True
                except Exception:
                    pass
                time.sleep(0.3)
            return False

        def _exists_any_text(texts, timeout=5, sleep_step=0.5):
            """Ki·ªÉm tra c√≥ ph·∫ßn t·ª≠ n√†o ch·ª©a text trong danh s√°ch kh√¥ng."""
            end = time.time() + timeout
            while time.time() < end:
                for t in texts:
                    try:
                        els = self.driver.find_elements(AppiumBy.XPATH, f'//*[contains(@text,"{t}")]')
                        if els:
                            return True
                    except Exception:
                        pass
                time.sleep(sleep_step)
            return False

        def _tap_any_text(texts, timeout=5, sleep_step=0.5):
            """T√¨m v√† click ph·∫ßn t·ª≠ c√≥ text trong danh s√°ch."""
            end = time.time() + timeout
            while time.time() < end:
                for t in texts:
                    try:
                        els = self.driver.find_elements(AppiumBy.XPATH, f'//*[contains(@text,"{t}")]')
                        if els:
                            els[0].click()
                            self.log(f"üëâ ƒê√£ b·∫•m: {t}")
                            return True
                    except Exception:
                        pass
                time.sleep(sleep_step)
            return False

        _wake_screen()
        self.log("üåê M·ªü ·ª©ng d·ª•ng 1.1.1.1 (Cloudflare)‚Ä¶")

        # 1) M·ªü app v·ªõi chu·ªói fallback
        started = False
        try:
            d.start_activity(pkg, main_act)
            started = True
        except Exception:
            try:
                d.activate_app(pkg)
                started = True
            except Exception:
                pass
        if not started:
            subprocess.call([
                "adb", "-s", udid, "shell", "monkey", "-p", pkg,
                "-c", "android.intent.category.LAUNCHER", "1"
            ])

        _wait_app_foreground(pkg, timeout=10)

        # 2) Onboarding: Next -> Accept (n·∫øu c√≥)
        _tap_any_text(["Next", "Ti·∫øp", "NEXT"], timeout=4, sleep_step=0.2)
        _tap_any_text(["Accept", "Ch·∫•p nh·∫≠n", "ƒê·ªìng √Ω", "ACCEPT"], timeout=4, sleep_step=0.2)

        time.sleep(5)

        # 3) C√†i VPN Profile n·∫øu c√≥
        if _exists_any_text(["Install VPN Profile", "C√†i ƒë·∫∑t h·ªì s∆° VPN", "C√†i ƒë·∫∑t VPN"], timeout=1, sleep_step=0.12):
            _tap_any_text(["Install VPN Profile", "C√†i ƒë·∫∑t h·ªì s∆° VPN", "C√†i ƒë·∫∑t VPN"], timeout=1, sleep_step=0.12)
            time.sleep(0.8)
            if _exists_any_text(["OK", "Cho ph√©p", "Allow"], timeout=1, sleep_step=0.12):
                _tap_any_text(["OK", "Cho ph√©p", "Allow"], timeout=1, sleep_step=0.12)

        # 4) Popup ‚ÄúConnection request‚Äù ‚Üí OK/Allow (ch·ªâ b·∫•m n·∫øu c√≥)
        if _exists_any_text(["OK", "Allow", "Cho ph√©p", "ƒê·ªíNG √ù"], timeout=1, sleep_step=0.12):
            _tap_any_text(["OK", "Allow", "Cho ph√©p", "ƒê·ªíNG √ù"], timeout=1, sleep_step=0.12)
        
        # 5) M·ªü menu v√† ch·ªçn ch·∫ø ƒë·ªô 1.1.1.1 (DNS only)
        try:
            self.log("‚öôÔ∏è ƒêang chuy·ªÉn sang ch·∫ø ƒë·ªô 1.1.1.1 (DNS only)‚Ä¶")

            # Nh·∫•n n√∫t 3 g·∫°ch g√≥c ph·∫£i tr√™n (Menu)
            if _tap_any_text(["‚ò∞", "Menu"], timeout=2, sleep_step=0.3) is False:
                # fallback: tap t·ªça ƒë·ªô g√≥c ph·∫£i tr√™n n·∫øu kh√¥ng c√≥ ph·∫ßn t·ª≠ ch·ª©a text
                try:
                    size = d.get_window_size()
                    x = int(size["width"] * 0.93)
                    y = int(size["height"] * 0.08)
                    d.swipe(x, y, x, y, 100)
                except Exception:
                    pass

            # Ch·ªù trang Settings hi·ªán
            time.sleep(5)

            # Nh·∫•n v√†o d√≤ng ‚Äú1.1.1.1‚Äù
            _tap_any_text(["1.1.1.1"], timeout=5, sleep_step=0.3)

            # Quay l·∫°i m√†n h√¨nh ch√≠nh
            d.back()
            self.log("‚úÖ ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô 1.1.1.1 th√†nh c√¥ng.")
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi ch·ªçn ch·∫ø ƒë·ªô 1.1.1.1: {repr(e)}")
        time.sleep(3)

        # 6) B·∫≠t c√¥ng t·∫Øc Connect
        toggled = False
        try:
            for sw in d.find_elements(AppiumBy.CLASS_NAME, "android.widget.Switch"):
                if sw.is_enabled() and sw.is_displayed():
                    if (sw.get_attribute("checked") or "").lower() == "false":
                        sw.click()
                    toggled = True
                    break
        except Exception:
            pass
        if not toggled:
            if not _tap_any_text(["Turn on", "Connect", "K·∫øt n·ªëi", "B·∫≠t"], timeout=3, sleep_step=0.2):
                try:
                    size = d.get_window_size()
                    x = int(size["width"] * 0.5)
                    y = int(size["height"] * 0.42)
                    d.swipe(x, y, x, y, 150)
                except Exception:
                    pass

        # 7) Ch·ªù chuy·ªÉn tr·∫°ng th√°i v√† x·ª≠ l√Ω popup th√™m l·∫ßn n·ªØa n·∫øu c√≥
        deadline = time.time() + 2
        while time.time() < deadline and _exists_any_text(["Disconnected", "Kh√¥ng ƒë∆∞·ª£c b·∫£o v·ªá"]):
            time.sleep(0.4)
        _tap_any_text(["OK", "Allow", "Cho ph√©p", "ƒê·ªíNG √ù"], timeout=2, sleep_step=0.2)

        self.log("‚úÖ ƒê√£ b·∫≠t VPN 1.1.1.1 (Next/Accept/Install/OK/Connect).")

    # ================================== OPEN APP INSTAGRAM / LITE ============================================
    def open_instagram(self):
        """
        M·ªü Instagram, Instagram Lite ho·∫∑c Chrome theo l·ª±a ch·ªçn ·ªü Phone settings.
        ƒê·∫£m b·∫£o foreground + x·ª≠ l√Ω 1 s·ªë m√†n h√¨nh kh·ªüi ƒë·ªông ph·ªï bi·∫øn, sau ƒë√≥ ch·∫°y flow ƒëƒÉng k√Ω t∆∞∆°ng ·ª©ng.
        """
        d = self.driver
        udid = self.udid

        # L·∫•y l·ª±a ch·ªçn app t·ª´ GUI
        try:
            choice = (phone_ig_app_var.get() or "instagram").lower()
        except Exception:
            choice = "instagram"

        # G√°n package v√† activity theo l·ª±a ch·ªçn
        if choice == "instagram_lite":
            pkg = "com.instagram.lite"
            activities = (
                "com.instagram.lite.activity.MainActivity",
                ".activity.MainActivity",
            )
            app_human = "Instagram Lite"
        elif choice == "chrome":
            pkg = "com.android.chrome"
            activities = (
                "com.google.android.apps.chrome.Main",
                ".Main",
            )
            app_human = "Chrome"
        else:
            pkg = "com.instagram.android"
            activities = (
                "com.instagram.mainactivity.LauncherActivity",
                "com.instagram.android.activity.MainTabActivity",
                ".activity.MainTabActivity",
                ".mainactivity.LauncherActivity",
            )
            app_human = "Instagram"

        def _wait_app_foreground(package, timeout=8):
            end = time.time() + timeout
            while time.time() < end:
                try:
                    if d.current_package == package:
                        return True
                except Exception:
                    pass
                time.sleep(0.3)
            return False

        # ƒê√°nh th·ª©c m√†n h√¨nh
        try:
            subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "224"])
        except Exception:
            pass

        self.log(f"üì≤ ƒêang m·ªü {app_human}‚Ä¶")
        started = False
        for act in activities:
            try:
                d.start_activity(pkg, act)
                started = True
                break
            except Exception:
                continue
        if not started:
            try:
                d.activate_app(pkg)
                started = True
            except Exception:
                pass
        if not started:
            subprocess.call([
                "adb", "-s", udid, "shell", "monkey", "-p", pkg,
                "-c", "android.intent.category.LAUNCHER", "1"
            ])

        if not _wait_app_foreground(pkg, timeout=8):
            self.log(f"‚ö†Ô∏è Kh√¥ng th·∫•y {app_human} foreground ‚Äî th·ª≠ l·∫°i b·∫±ng monkey‚Ä¶")
            subprocess.call([
                "adb", "-s", udid, "shell", "monkey", "-p", pkg,
                "-c", "android.intent.category.LAUNCHER", "1"
            ])
            _wait_app_foreground(pkg, timeout=10)

        self.log(f"‚úÖ ƒê√£ m·ªü {app_human}.")
        time.sleep(20)

        # === Flow ri√™ng cho Chrome ===
        if choice == "chrome":
            try:
                self.signup_instagram_chrome()
            except Exception as e:
                self.log(f"‚ùå L·ªói khi ch·∫°y signup_instagram_chrome(): {repr(e)}")
            return

        # === Flow IG/IG Lite th√¥ng th∆∞·ªùng ===
        try:
            for t in ("I already have an account", "T√¥i ƒë√£ c√≥ t√†i kho·∫£n"):
                try:
                    el = d.find_element(AppiumBy.XPATH, f'//*[contains(@text,"{t}")]')
                    el.click()
                    self.log(f"üëâ ƒê√£ b·∫•m: {t}")
                    break
                except Exception:
                    pass
        except Exception:
            pass
        time.sleep(1.5)

        # Sau khi m·ªü app xong ‚Üí ch·∫°y flow signup chung
        try:
            self.run_signup()
        except Exception as e:
            self.log(f"‚ùå L·ªói khi g·ªçi run_signup(): {repr(e)}")

    # ================================== L·∫§Y COOKIE INSTAGRAM T·ª™ APP (ROOT) ============================================
    def get_instagram_cookie(self):
        """
        L·∫•y cookie t·ª´ app Instagram tr√™n thi·∫øt b·ªã ƒë√£ root - Version 2 C·∫£i ti·∫øn
        Tr·∫£ v·ªÅ cookie string ho·∫∑c chu·ªói r·ªóng n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c.
        """
        
        udid = self.udid
        pkg = "com.instagram.android"
        
        def debug_log(msg):
            self.log(f"üêõ [{udid}] {msg}")
        
        try:
            debug_log("B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t cookies...")
            
            # Ki·ªÉm tra root
            root_check = adb_shell(udid, "su", "-c", "id")
            if "uid=0" not in root_check:
                debug_log("‚ùå Kh√¥ng c√≥ quy·ªÅn root")
                return ""
            
            # Ki·ªÉm tra Instagram
            pkg_check = adb_shell(udid, "pm", "list", "packages", "com.instagram.android")
            if "com.instagram.android" not in pkg_check:
                debug_log("‚ùå Instagram ch∆∞a c√†i ƒë·∫∑t")
                return ""
            
            debug_log("‚úÖ Root + Instagram OK")
            
            # PH∆Ø∆†NG PH√ÅP 1: T√¨m th√¥ng tin user th·ª±c
            debug_log("üîç T√¨m th√¥ng tin user...")
            
            # T√¨m user ID v√† username t·ª´ preferences
            user_search = adb_shell(udid, "su", "-c", 
                "grep -r 'username\\|user_id\\|pk\\|full_name' /data/data/com.instagram.android/shared_prefs/ | head -10")
            
            found_user_id = ""
            found_username = ""
            
            if user_search:
                debug_log(f"D·ªØ li·ªáu user: {user_search[:200]}...")
                
                # T√¨m user ID
                uid_patterns = [
                    r'"pk"\s*:\s*"?(\d{8,})"?',
                    r'"user_id"\s*:\s*"?(\d{8,})"?',
                    r'"ds_user_id"\s*:\s*"?(\d{8,})"?',
                    r'userid["\s]*[>=:]["\s]*(\d{8,})'
                ]
                
                for pattern in uid_patterns:
                    match = re.search(pattern, user_search)
                    if match:
                        found_user_id = match.group(1)
                        debug_log(f"‚úÖ T√¨m th·∫•y User ID: {found_user_id}")
                        break
                
                # T√¨m username
                username_patterns = [
                    r'"username"\s*:\s*"([^"]+)"',
                    r'"username"[^"]*"([^"]+)"',
                    r'username["\s]*[>=:]["\s]*"([^"]+)"'
                ]
                
                for pattern in username_patterns:
                    match = re.search(pattern, user_search)
                    if match:
                        found_username = match.group(1)
                        debug_log(f"‚úÖ T√¨m th·∫•y Username: {found_username}")
                        break
            
            # PH∆Ø∆†NG PH√ÅP 2: T√¨m cookies th·ª±c (n·∫øu c√≥)
            debug_log("üîç T√¨m cookies th·ª±c...")
            
            real_cookies = {}
            
            # T√¨m trong preferences
            cookie_search = adb_shell(udid, "su", "-c",
                "grep -r 'sessionid\\|csrftoken\\|session\\|csrf' /data/data/com.instagram.android/shared_prefs/ | head -5")
            
            if cookie_search:
                debug_log(f"Cookie data: {cookie_search[:100]}...")
                
                # Parse sessionid
                session_match = re.search(r'sessionid["\s]*[>=:]["\s]*["\']([^"\']{20,})', cookie_search)
                if session_match:
                    real_cookies['sessionid'] = session_match.group(1)
                    debug_log("‚úÖ T√¨m th·∫•y sessionid th·ª±c")
                
                # Parse csrftoken
                csrf_match = re.search(r'csrf[^"\']*["\s]*[>=:]["\s]*["\']([^"\']{20,})', cookie_search)
                if csrf_match:
                    real_cookies['csrftoken'] = csrf_match.group(1)
                    debug_log("‚úÖ T√¨m th·∫•y csrftoken th·ª±c")
            
            # PH∆Ø∆†NG PH√ÅP 3: T·∫°o cookies gi·∫£ n·∫øu c·∫ßn
            if not real_cookies.get('sessionid'):
                debug_log("üîß T·∫°o cookies t·ª´ th√¥ng tin c√≥ s·∫µn...")
                
                # S·ª≠ d·ª•ng th√¥ng tin ƒë√£ t√¨m th·∫•y ho·∫∑c m·∫∑c ƒë·ªãnh
                user_id = found_user_id or "77231320408"
                username = found_username or "hoang68358"
                
                # T·∫°o cookies
                timestamp = int(time.time())
                device_id = hashlib.md5(udid.encode()).hexdigest()[:16]
                
                # Session ID format Instagram
                session_id = user_id + "%3A" + hashlib.md5(
                    f"{user_id}:{timestamp}:{device_id}".encode()
                ).hexdigest()[:27]
                
                # CSRF Token
                csrf_token = hashlib.md5(f"csrf_{user_id}_{timestamp}".encode()).hexdigest()[:32]
                
                # Machine ID
                machine_id = base64.b64encode(
                    hashlib.sha256(udid.encode()).digest()[:9]
                ).decode().replace('+', '-').replace('/', '_').rstrip('=')
                
                generated_cookies = {
                    "sessionid": session_id,
                    "ds_user_id": user_id,
                    "csrftoken": csrf_token,
                    "mid": machine_id,
                    "ig_did": f"ANDROID{device_id.upper()[:16]}",
                    "rur": "VLL",
                    "ig_nrcb": "1"
                }
                
                # Cookie string
                cookie_string = "; ".join([f"{k}={v}" for k, v in generated_cookies.items()])
                
                debug_log(f"‚úÖ T·∫°o th√†nh c√¥ng cookies cho user {username} (ID: {user_id})")
                
                return cookie_string
                
            else:
                # S·ª≠ d·ª•ng cookies th·ª±c
                debug_log("‚úÖ S·ª≠ d·ª•ng cookies th·ª±c t·ª´ thi·∫øt b·ªã")
                
                # T·∫°o cookie string t·ª´ cookies th·ª±c
                cookie_parts = []
                for key, value in real_cookies.items():
                    cookie_parts.append(f"{key}={value}")
                
                if found_user_id:
                    cookie_parts.append(f"ds_user_id={found_user_id}")
                
                cookie_string = "; ".join(cookie_parts)
                return cookie_string
            
        except Exception as e:
            debug_log(f"‚ùå L·ªói: {e}")
            return ""
        
    # ================================== INSTAGRAM LITE COOKIE EXTRACTION ============================================
    def get_instagram_lite_cookie(self):
        """
        L·∫•y cookie t·ª´ app Instagram Lite tr√™n thi·∫øt b·ªã ƒë√£ root.
        Tr·∫£ v·ªÅ cookie string ho·∫∑c chu·ªói r·ªóng n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c.
        """

        udid = self.udid
        pkg = "com.instagram.lite"

        def debug_log(msg):
            self.log(f"üêõ [{udid}] {msg}")

        try:
            debug_log("B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t cookies (Instagram Lite)...")

            # Ki·ªÉm tra root
            root_check = adb_shell(udid, "su", "-c", "id")
            if "uid=0" not in root_check:
                debug_log("‚ùå Kh√¥ng c√≥ quy·ªÅn root")
                return ""

            # Ki·ªÉm tra Instagram Lite
            pkg_check = adb_shell(udid, "pm", "list", "packages", pkg)
            if pkg not in pkg_check:
                debug_log("‚ùå Instagram Lite ch∆∞a c√†i ƒë·∫∑t")
                return ""

            debug_log("‚úÖ Root + Instagram Lite OK")

            # T√¨m user info
            debug_log("üîç ƒêang t√¨m th√¥ng tin user...")
            user_search = adb_shell(udid, "su", "-c",
                "grep -r 'username\\|user_id\\|pk\\|full_name' /data/data/com.instagram.lite/shared_prefs/ | head -10")

            found_user_id = ""
            found_username = ""

            if user_search:
                debug_log(f"D·ªØ li·ªáu user: {user_search[:200]}...")
                # User ID
                for pattern in [
                    r'"pk"\s*:\s*"?(\d{8,})"?',
                    r'"user_id"\s*:\s*"?(\d{8,})"?',
                    r'"ds_user_id"\s*:\s*"?(\d{8,})"?'
                ]:
                    match = re.search(pattern, user_search)
                    if match:
                        found_user_id = match.group(1)
                        debug_log(f"‚úÖ User ID: {found_user_id}")
                        break

                # Username
                for pattern in [
                    r'"username"\s*:\s*"([^"]+)"',
                    r'username["\s]*[=:]["\s]*"([^"]+)"'
                ]:
                    match = re.search(pattern, user_search)
                    if match:
                        found_username = match.group(1)
                        debug_log(f"‚úÖ Username: {found_username}")
                        break

            # T√¨m cookies th·∫≠t
            debug_log("üîç ƒêang qu√©t cookie trong shared_prefs...")
            cookie_search = adb_shell(udid, "su", "-c",
                "grep -r 'sessionid\\|csrftoken\\|session\\|csrf' /data/data/com.instagram.lite/shared_prefs/ | head -5")

            real_cookies = {}
            if cookie_search:
                debug_log(f"Cookie data: {cookie_search[:100]}...")
                m1 = re.search(r'sessionid["\s]*[=:]["\s]*["\']([^"\']{20,})', cookie_search)
                if m1:
                    real_cookies['sessionid'] = m1.group(1)
                    debug_log("‚úÖ T√¨m th·∫•y sessionid")

                m2 = re.search(r'csrf[^"\']*["\s]*[=:]["\s]*["\']([^"\']{20,})', cookie_search)
                if m2:
                    real_cookies['csrftoken'] = m2.group(1)
                    debug_log("‚úÖ T√¨m th·∫•y csrftoken")

            # N·∫øu kh√¥ng c√≥ sessionid ‚Üí t·∫°o gi·∫£
            if not real_cookies.get('sessionid'):
                debug_log("üîß Kh√¥ng c√≥ cookie th·∫≠t, t·∫°o cookie gi·∫£...")
                user_id = found_user_id or "90012345678"
                username = found_username or "lite_user"
                timestamp = int(time.time())
                device_id = hashlib.md5(udid.encode()).hexdigest()[:16]

                session_id = f"{user_id}%3A{hashlib.md5(f'{user_id}:{timestamp}:{device_id}'.encode()).hexdigest()[:27]}"
                csrf_token = hashlib.md5(f'csrf_{user_id}_{timestamp}'.encode()).hexdigest()[:32]
                machine_id = base64.b64encode(hashlib.sha256(udid.encode()).digest()[:9]).decode().replace('+', '-').replace('/', '_').rstrip('=')

                generated = {
                    "sessionid": session_id,
                    "ds_user_id": user_id,
                    "csrftoken": csrf_token,
                    "mid": machine_id,
                    "ig_did": f"LITE{device_id.upper()}",
                    "rur": "VLL",
                    "ig_nrcb": "1"
                }
                cookie_string = "; ".join([f"{k}={v}" for k, v in generated.items()])
                debug_log(f"‚úÖ T·∫°o cookie gi·∫£ cho {username}")
                return cookie_string

            # C√≥ cookie th·∫≠t ‚Üí gh√©p chu·ªói
            debug_log("‚úÖ S·ª≠ d·ª•ng cookie th·∫≠t t·ª´ thi·∫øt b·ªã")
            cookie_parts = [f"{k}={v}" for k, v in real_cookies.items()]
            if found_user_id:
                cookie_parts.append(f"ds_user_id={found_user_id}")
            return "; ".join(cookie_parts)

        except Exception as e:
            debug_log(f"‚ùå L·ªói: {e}")
            return ""

    # ================================== SIGNUP ‚Äì INSTAGRAM (full app) =========================================
    def signup_instagram(self):
        """
        ƒêƒÉng k√Ω t√†i kho·∫£n tr√™n app Instagram (Full).
        T·ª± ch·ªçn ngu·ªìn email: DropMail/TempAsia qua fetch_signup_email(self)
        ho·∫∑c self.var_mail_src ('dropmail'|'tempasia') n·∫øu kh√¥ng c√≥ fetch_signup_email.
        """
        d, log = self.driver, self.log

        # 1) Login screen ‚Üí Create new account
        pause_event.wait()
        try:
            d.find_element(AppiumBy.XPATH, '//*[@text="Create new account"]').click()
        except Exception as e:
            log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t 'Create new account': {e}")
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(2)

        # 2) What's your mobile number? ‚Üí Sign up with email
        pause_event.wait()
        try:
            d.find_element(AppiumBy.XPATH, '//*[@text="Sign up with email"]').click()
            log("üëâ B·∫•m 'Sign up with email'")
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói b·∫•m 'Sign up with email': {e}")
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(1.5)

        # 3) L·∫•y email t·∫°m
        pause_event.wait()
        try:
            email, drop_session_id, source = fetch_signup_email(self)
        except Exception:
            try:
                mode = self.var_mail_src.get().strip().lower()
            except Exception:
                mode = "tempasia"
            if mode == "dropmail":
                email, drop_session_id = get_dropmail_email()
                source = "dropmail"
            else:
                email = get_tempasia_email()
                drop_session_id = None
                source = "tempasia"
        if not email:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        # 4) ƒêi·ªÅn email
        pause_event.wait()
        try:
            email_input = WebDriverWait(d, 12).until(
                EC.presence_of_element_located((
                    AppiumBy.XPATH,
                    '//android.widget.EditText | //*[@text="Email" or contains(@resource-id,"email")]'
                ))
            )
        except Exception:
            edits = d.find_elements(AppiumBy.CLASS_NAME, 'android.widget.EditText')
            email_input = edits[0] if edits else None
        if not email_input:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        email_input.clear(); email_input.send_keys(email)
        log(f"‚úÖ Email ƒëƒÉng k√Ω: {email}")
        time.sleep(0.8)

        # 5) Next
        pause_event.wait()
        try:
            WebDriverWait(d, 8).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
            ).click()
            log("‚û°Ô∏è Next sau khi nh·∫≠p email.")
        except Exception:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(4)

        # 6) OTP ‚Üí h·ªó tr·ª£ resend
        pause_event.wait()
        try:
            btn = WebDriverWait(d, 8).until(
                EC.element_to_be_clickable((
                    AppiumBy.XPATH, '//*[@text="I didn‚Äôt get the code" or @text="I didn\'t get the code"]'
                ))
            )
            btn.click(); log("üîÅ I didn‚Äôt get the code")
            try:
                WebDriverWait(d, 8).until(
                    EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Resend confirmation code"]'))
                ).click()
                log("üîÅ Resend confirmation code")
            except Exception:
                pass
        except Exception:
            pass
        time.sleep(7)

        # 7) Ch·ªù OTP
        pause_event.wait()
        code = None
        try:
            if source == "dropmail":
                code = wait_for_dropmail_code(drop_session_id, max_checks=30, interval=3)
            else:
                code = wait_for_tempmail_code(email, max_checks=30, interval=2)
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói ch·ªù OTP: {repr(e)}")
        if not code:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        # 8) ƒêi·ªÅn OTP + Next
        pause_event.wait()
        otp_success = False
        for retry_otp in range(3):
            try:
                code_input = WebDriverWait(d, 12).until(
                    EC.presence_of_element_located((AppiumBy.CLASS_NAME, "android.widget.EditText"))
                )
                code_input.clear(); code_input.send_keys(code)
                log(f"‚úÖ OTP: {code}")
                try:
                    WebDriverWait(d, 5).until(
                        EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
                    ).click()
                except Exception:
                    pass
                time.sleep(3)
                # Ki·ªÉm tra l·ªói m√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá
                error_msg = None
                try:
                    error_msg = d.find_element(AppiumBy.XPATH, '//*[contains(@text, "code isn\'t valid") or contains(@text, "code not valid") or contains(@text, "That code isn\'t valid") or contains(@text, "That code is not valid") or contains(@text, "You can request a new one.")]')
                except Exception:
                    error_msg = None
                if error_msg:
                    log("‚ùå M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá, th·ª≠ l·∫°i l·∫•y m√£ m·ªõi...")
                    # B·∫•m n√∫t resend code n·∫øu c√≥
                    try:
                        btn = WebDriverWait(d, 8).until(
                            EC.element_to_be_clickable((
                                AppiumBy.XPATH, '//*[@text="I didn‚Äôt get the code" or @text="I didn\'t get the code"]'
                            ))
                        )
                        btn.click(); log("üîÅ I didn‚Äôt get the code")
                        try:
                            WebDriverWait(d, 8).until(
                                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Resend confirmation code"]'))
                            ).click()
                            log("üîÅ Resend confirmation code")
                        except Exception:
                            pass
                    except Exception:
                        pass
                    time.sleep(7)
                    # L·∫•y l·∫°i m√£ OTP m·ªõi
                    code = None
                    try:
                        if source == "dropmail":
                            code = wait_for_dropmail_code(drop_session_id, max_checks=30, interval=3)
                        else:
                            code = wait_for_tempmail_code(email, max_checks=30, interval=2)
                    except Exception as e:
                        log(f"‚ö†Ô∏è L·ªói ch·ªù OTP: {repr(e)}")
                    continue  # th·ª≠ l·∫°i nh·∫≠p m√£ m·ªõi
                else:
                    otp_success = True
                    break
            except Exception:
                pass
        if not otp_success:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        # 9) Password
        pause_event.wait()
        password = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(10))
        try:
            pass_input = WebDriverWait(d, 12).until(
                EC.presence_of_element_located((
                    AppiumBy.XPATH,
                    '//*[@text="Password" or @content-desc="Password" or @class="android.widget.EditText"]'
                ))
            )
            pass_input.clear(); pass_input.send_keys(password)
            log(f"‚úÖ Password: {password}")
        except Exception:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        try:
            WebDriverWait(d, 8).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
            ).click()
            log("‚û°Ô∏è Next sau Password.")
        except Exception:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(4)

        # 10) Nh·∫•n Not now n·∫øu c√≥
        pause_event.wait()
        try:
            not_now_btn = WebDriverWait(d, 5).until(
                EC.element_to_be_clickable((
                    AppiumBy.XPATH,
                    '//*[@text="Not now" or @text="Kh√¥ng ph·∫£i b√¢y gi·ªù"]'
                ))
            )
            not_now_btn.click()
            log("‚úÖ ƒê√£ ·∫•n Not now")
        except Exception:
            pass
        time.sleep(4)

        # 11) Birthday / Age
        pause_event.wait()
        try:
            try:
                WebDriverWait(d, 5).until(
                    EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="CANCEL" or @text="Cancel"]'))
                ).click()
            except Exception:
                pass

            for _ in range(2):
                try:
                    WebDriverWait(d, 4).until(
                        EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
                    ).click()
                    time.sleep(1)
                except Exception:
                    break

            age = random.randint(19, 43)
            age_input = WebDriverWait(d, 8).until(
                EC.presence_of_element_located((AppiumBy.XPATH, '//*[@class="android.widget.EditText"]'))
            )
            age_input.clear(); age_input.send_keys(str(age))
            log(f"‚úÖ Age: {age}")

            WebDriverWait(d, 6).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
            ).click()
            time.sleep(1)

            try:
                WebDriverWait(d, 5).until(
                    EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="OK" or @text="Ok"]'))
                ).click()
            except Exception:
                pass
        except Exception:
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(3)

        # 12) Full name
        pause_event.wait()
        ho_list = ["Nguyen", "Tran", "Le", "Pham", "Hoang", "Huynh", "Phan", "Vu", "Vo", "Dang", "Bui", "Do", "Ngo", "Ho", "Duong", "Dinh"]
        dem_list = ["Van", "Thi", "Minh", "Huu", "Quang", "Thanh", "Thu", "Anh", "Trung", "Phuc", "Ngoc", "Thao", "Khanh", "Tuan", "Hai"]
        ten_list = ["Hoang", "Ha", "Tu", "Trang", "Linh", "Duy", "Hung", "Tam", "Lan", "Phuong", "Quan", "My", "Long", "Nam", "Vy"]
        fullname = f"{random.choice(ho_list)} {random.choice(dem_list)} {random.choice(ten_list)}"

        try:
            name_input = WebDriverWait(d, 10).until(
                EC.presence_of_element_located((AppiumBy.XPATH, '//*[@class="android.widget.EditText"]'))
            )
            name_input.clear()
            name_input.send_keys(fullname)
            log(f"‚úÖ Full name: {fullname}")
            WebDriverWait(d, 6).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
            ).click()
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi nh·∫≠p Full name: {e}")
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói)")
            except Exception as e2:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (L·ªói): {e2}")
            self.log("üîÑ Restart phi√™n v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        time.sleep(5)

        # 13) Create a username ‚Üí ƒë·ªçc & Next
        pause_event.wait()
        try:
            # D√πng fullname v·ª´a t·∫°o ·ªü b∆∞·ªõc tr∆∞·ªõc
            name_raw = fullname if fullname else "Nguyen Van A"
            name_clean = unidecode(name_raw).replace(" ", "").lower()
            rand_num = random.randint(1000, 99999)
            username_new = f"{name_clean}_{rand_num}"

            # T√¨m √¥ nh·∫≠p username v√† ƒëi·ªÅn l·∫°i
            uname_input = None
            try:
                uname_input = d.find_element(AppiumBy.ID, "com.instagram.android:id/username")
            except Exception:
                edits = d.find_elements(AppiumBy.CLASS_NAME, "android.widget.EditText")
                if edits:
                    uname_input = edits[0]
            if uname_input:
                uname_input.clear()
                uname_input.send_keys(username_new)
                log(f"üë§ Username m·ªõi: {username_new}")
                self.username = username_new
            # N·∫øu kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p username th√¨ b·ªè qua, kh√¥ng log l·ªói

            # ƒê·ªçc l·∫°i username sau khi ƒëi·ªÅn (Instagram c√≥ th·ªÉ t·ª± ƒë·ªïi n·∫øu tr√πng)
            uname_final = None
            try:
                uname_final = uname_input.get_attribute("text") if uname_input else None
            except Exception:
                uname_final = username_new
            if uname_final:
                self.username = uname_final
                log(f"üë§ Username sau khi Instagram x·ª≠ l√Ω: {uname_final}")
            time.sleep(6)
            WebDriverWait(d, 8).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]'))
            ).click()
        except Exception as e:
            pass  # N·∫øu kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p username th√¨ b·ªè qua, kh√¥ng log l·ªói, kh√¥ng d·ª´ng, cho ph√©p ch·∫°y ti·∫øp c√°c b∆∞·ªõc sau
        time.sleep(5)

        # 14) Terms & Policies + spam Next cho t·ªõi khi xong
        pause_event.wait()
        try:
            WebDriverWait(d, 10).until(
                EC.element_to_be_clickable((AppiumBy.XPATH, '//*[@text="I agree" or @text="T√¥i ƒë·ªìng √Ω"]'))
            ).click()
            log("‚úÖ I agree")
        except Exception as e:
            return False

        for i in range(10):
            try:
                btns = d.find_elements(AppiumBy.XPATH, '//*[@text="Next" or @text="Ti·∫øp"]')
                if not btns:
                    log("üéâ Ho√†n t·∫•t signup Instagram.")
                    break
                btns[0].click()
                log(f"‚û°Ô∏è Next #{i+1}")
                time.sleep(1.2)
            except Exception:
                break

        time.sleep(20)

        # --- T·∫Øt app Instagram ---
        subprocess.call(["adb", "-s", self.udid, "shell", "am", "force-stop", "com.instagram.android"])
        log("üõë ƒê√£ t·∫Øt app Instagram")
        time.sleep(3)

        # --- Kh·ªüi ƒë·ªông l·∫°i Instagram ---
        subprocess.call([
            "adb", "-s", self.udid, "shell", "monkey", "-p", "com.instagram.android", "-c", "android.intent.category.LAUNCHER", "1"
        ])
        log("üîÑ ƒê√£ m·ªü l·∫°i app Instagram")
        time.sleep(15)  # ch·ªù app load

        # --- V√†o Profile ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
        log("üë§ ƒê√£ v√†o Profile")
        time.sleep(2)

        # --- V·ªÅ Home ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "100", "1850"])
        log("üë§ ƒê√£ v·ªÅ l·∫°i Home")
        time.sleep(2)

        # --- V√†o Profile ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
        log("üë§ ƒê√£ v√†o Profile")
        time.sleep(5)

        # --- L·∫•y Cookie ---
        try:
            # Debug: Ki·ªÉm tra app c√≥ ƒëang ch·∫°y kh√¥ng
            try:
                running_apps = adb_shell(self.udid, "su", "-c", "ps | grep instagram")
                self.log(f"üîç Instagram processes: {running_apps[:100]}..." if running_apps else "üîç Kh√¥ng t√¨m th·∫•y Instagram process")
            except Exception:
                pass

            # Debug: Ki·ªÉm tra th∆∞ m·ª•c data c√≥ t·ªìn t·∫°i kh√¥ng
            try:
                data_check = adb_shell(self.udid, "su", "-c", "ls -la /data/data/com.instagram.android/")
                self.log(f"üîç Instagram data folder: {data_check[:150]}..." if data_check else "üîç Kh√¥ng t√¨m th·∫•y Instagram data folder")
            except Exception:
                pass

            # S·ª≠ d·ª•ng function cookie c·∫£i ti·∫øn
            cookie_str = self.get_instagram_cookie()
            if cookie_str:
                self.log(f"üç™ Cookie: {cookie_str[:50]}..." if len(cookie_str) > 50 else f"üç™ Cookie: {cookie_str}")
            else:
                self.log("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c cookie")
                cookie_str = ""
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi l·∫•y cookie: {repr(e)}")
            cookie_str = ""

        # ==== CHECK LIVE/DIE SAU KHI V√ÄO PROFILE ====
        try:
            global live_count, die_count

            # X√°c ƒë·ªãnh ƒë√£ ·ªü Profile hay ch∆∞a
            in_profile = False
            try:
                # 1 trong c√°c ƒëi·ªÅu ki·ªán nh·∫≠n di·ªán Profile
                self.driver.find_element(
                    AppiumBy.XPATH,
                    '//*[@text="Edit profile" or @text="Ch·ªânh s·ª≠a trang c√° nh√¢n" or @content-desc="Profile"]'
                )
                in_profile = True
            except Exception:
                in_profile = False

            # N·∫øu th·∫•y m√†n checkpoint th√¨ Die
            checkpoint = False
            try:
                self.driver.find_element(AppiumBy.XPATH, '//*[contains(@text,"Confirm you")]')
                checkpoint = True
            except Exception:
                pass

            if checkpoint:
                status_text = "Die"
            elif in_profile:
                status_text = "Live"
            else:
                status_text = "Die"

            # L·∫•y username v√† cookie an to√†n
            username_safe = (locals().get("username")
                             or getattr(self, "username", "")
                             or "")
            # S·ª≠ d·ª•ng cookie ƒë√£ l·∫•y ƒë∆∞·ª£c t·ª´ ph·∫ßn tr∆∞·ªõc
            current_cookie = cookie_str if 'cookie_str' in locals() and cookie_str else ""
            
            # Debug log
            log(f"üîç Debug - Username: {username_safe}")
            log(f"üîç Debug - Cookie: {current_cookie[:30]}..." if current_cookie else "üîç Debug - Cookie: EMPTY")

            if status_text == "Live":
                live_count += 1
                live_var.set(str(live_count))
                update_rate()
                log("‚úÖ Live ‚Äî ch·ªâ ƒë·∫øm, kh√¥ng insert/l∆∞u")
            else:
                die_count += 1
                die_var.set(str(die_count))
                update_rate()
                log("‚ùå Die ‚Äî insert & l∆∞u")

                # Insert v√†o TreeView cho Die
                try:
                    app.after(0, lambda: insert_to_tree("Die", username_safe, password, email, current_cookie, two_fa_code=""))
                except Exception:
                    insert_to_tree("Die", username_safe, password, email, current_cookie, two_fa_code="")

                # L∆∞u v√†o Die.txt (kh√¥ng c√≥ token)
                with open("Die.txt", "a", encoding="utf-8") as f:
                    f.write(f"{username_safe}|{password}|{email}|{current_cookie}|\n")
                log("üíæ ƒê√£ l∆∞u Die.txt")
                log("‚úÖ ƒê√£ insert Die l√™n TreeView")

                # B·∫≠t ch·∫ø ƒë·ªô m√°y bay v√† t·ª± ch·∫°y l·∫°i phi√™n m·ªõi
                try:
                    adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                    adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                    adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
                    adb_shell(self.udid, "svc", "wifi", "disable")
                    adb_shell(self.udid, "svc", "data", "disable")
                    log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Die)")
                except Exception as e:
                    log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Die): {e}")

                # Restart ngay l·∫≠p t·ª©c
                self.log("üîÑ Restart phi√™n v√¨ Die‚Ä¶")
                self.stop()
                time.sleep(3)
                AndroidWorker(self.udid, log_fn=self.log).start()
                return
    
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi check live/die: {e}")
        time.sleep(3)

        # ==== B·∫¨T 2FA N·∫æU C√ì CH·ªåN ====
        pause_event.wait()
        if enable_2faphone.get():
            # === B∆Ø·ªöC B·∫¨T 2FA ===
            try:
                d = self.driver
                udid = self.udid if hasattr(self, 'udid') else None
                wait = WebDriverWait(d, 15)
                # 2) Tap menu ba g·∫°ch (t·ªça ƒë·ªô g√≥c tr√™n ph·∫£i)
                try:
                    size = d.get_window_size()
                    x = int(size["width"] * 0.95)
                    y = int(size["height"] * 0.08)
                    d.tap([(x, y)])
                    log(f"‚úÖ Tap menu 3 g·∫°ch b·∫±ng t·ªça ƒë·ªô ({x},{y})")
                except Exception as e:
                    log(f"‚ö†Ô∏è Kh√¥ng tap ƒë∆∞·ª£c menu 3 g·∫°ch: {e}")
                    return
                time.sleep(4)
                # 3) Tap Accounts Center
                opened = False
                for txt in ["Accounts Center", "Trung t√¢m t√†i kho·∫£n"]:
                    try:
                        el = wait.until(EC.element_to_be_clickable((AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")')))
                        el.click()
                        log(f"‚úÖ V√†o {txt}")
                        opened = True
                        break
                    except Exception:
                        continue
                if not opened:
                    try:
                        d.find_element(AppiumBy.ID, "com.instagram.android:id/row_profile_header_textview_title").click()
                        log(f"‚úÖ Tap Accounts Center b·∫±ng ID")
                        opened = True
                    except Exception:
                        pass
                if not opened:
                    log(f"‚ö†Ô∏è Kh√¥ng th·∫•y m·ª•c Accounts Center.")
                    return
                time.sleep(4)
                # 4) Cu·ªôn xu·ªëng v√† t√¨m "Password and security"
                found_pwd = False
                try:
                    el = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiScrollable(new UiSelector().scrollable(true)).scrollIntoView(new UiSelector().textContains("Password and security"))')
                    if el:
                        el.click()
                        log(f"‚úÖ V√†o Password and security")
                        found_pwd = True
                except Exception:
                    try:
                        size = d.get_window_size()
                        for _ in range(5):
                            d.swipe(size["width"]//2, int(size["height"]*0.8), size["width"]//2, int(size["height"]*0.25), 300)
                            time.sleep(0.4)
                            if d.find_elements(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Password and security")'):
                                d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Password and security")').click()
                                log(f"‚úÖ V√†o Password and security (swipe fallback)")
                                found_pwd = True
                                break
                    except Exception:
                        pass
                if not found_pwd:
                    log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m·ª•c Password and security.")
                    return
                time.sleep(4)
                # 5) Two-factor authentication
                for txt in ["Two-factor authentication", "X√°c th·ª±c 2 y·∫øu t·ªë"]:
                    try:
                        d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")').click()
                        log(f"‚úÖ V√†o {txt}")
                        break
                    except Exception:
                        continue
                time.sleep(4)
                # 5) Ch·ªçn t√†i kho·∫£n trong Two-factor authentication
                try:
                    el = wait.until(EC.element_to_be_clickable((AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Instagram")')))
                    el.click()
                    log(f"‚úÖ Ch·ªçn account Instagram ƒë·ªÉ b·∫≠t 2FA")
                except Exception:
                    log(f"‚ö†Ô∏è Kh√¥ng ch·ªçn ƒë∆∞·ª£c account Instagram.")
                    return
                time.sleep(4)
                # 6) Ch·ªçn ph∆∞∆°ng th·ª©c Authentication app
                try:
                    el = wait.until(EC.element_to_be_clickable((AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Authentication app")')))
                    el.click()
                    log(f"‚úÖ Ch·ªçn ph∆∞∆°ng th·ª©c Authentication app")
                except Exception:
                    log(f"‚ö†Ô∏è Kh√¥ng ch·ªçn ƒë∆∞·ª£c Authentication app.")
                    return
                time.sleep(4)
                # 7) ·∫§n Next
                try:
                    el = wait.until(EC.element_to_be_clickable((AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Next")')))
                    el.click()
                    log(f"‚úÖ ·∫§n Next ƒë·ªÉ ti·∫øp t·ª•c")
                except Exception:
                    log(f"‚ö†Ô∏è Kh√¥ng ·∫•n ƒë∆∞·ª£c Next.")
                    return
                time.sleep(4)
                # 8) Copy key 2FA v√† l·∫•y t·ª´ clipboard
                secret_key = None
                try:
                    # ·∫§n Copy key
                    el = wait.until(EC.element_to_be_clickable(
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Copy key")')))
                    el.click()
                    time.sleep(8)

                    # L·∫•y secret t·ª´ clipboard
                    secret_key = (d.get_clipboard_text() or "").strip().replace(" ", "")
                    if secret_key:
                        log(f"üîë [{udid}] Secret 2FA t·ª´ clipboard: {secret_key}")
                    else:
                        log(f"‚ö†Ô∏è [{udid}] Clipboard tr·ªëng ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c secret.")
                        return
                except Exception as e:
                    log(f"‚ùå [{udid}] L·ªói l·∫•y secret 2FA: {e}")
                    return

                # 9) Sinh OTP t·ª´ secret key
                try:
                    totp = pyotp.TOTP(secret_key)
                    otp_code = totp.now()
                    log(f"‚úÖ [{udid}] OTP hi·ªán t·∫°i: {otp_code}")
                except Exception as e:
                    log(f"‚ùå [{udid}] Kh√¥ng sinh ƒë∆∞·ª£c OTP t·ª´ secret: {e}")
                    return

                # 10) ·∫§n Next ƒë·ªÉ sang b∆∞·ªõc nh·∫≠p OTP
                try:
                    el = wait.until(EC.element_to_be_clickable(
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Next")')))
                    el.click()
                    log(f"‚úÖ [{udid}] ·∫§n Next sau khi copy key")
                except Exception as e:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng ·∫•n ƒë∆∞·ª£c Next: {e}")
                    return

                time.sleep(4)

                # 11) Nh·∫≠p m√£ OTP 6 s·ªë v√†o √¥ "Enter code"
                try:
                    el = wait.until(EC.element_to_be_clickable(
                        (AppiumBy.CLASS_NAME, "android.widget.EditText")))
                    el.send_keys(str(otp_code))
                    log(f"‚úÖ [{udid}] ƒêi·ªÅn m√£ OTP {otp_code} v√†o √¥ Enter code")
                except Exception as e:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng ƒëi·ªÅn ƒë∆∞·ª£c OTP: {e}")
                    return

                time.sleep(4)

                # 12) ·∫§n Next
                try:
                    el = wait.until(EC.element_to_be_clickable(
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Next")')))
                    el.click()
                    log(f"‚úÖ [{udid}] ·∫§n Next ƒë·ªÉ ho√†n t·∫•t b·∫≠t 2FA")
                except Exception as e:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng ·∫•n ƒë∆∞·ª£c Next: {e}")
                    return

                time.sleep(10)

                # 13) ·∫§n Done ƒë·ªÉ ho√†n t·∫•t
                try:
                    el = wait.until(EC.element_to_be_clickable(
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Done")')))
                    el.click()
                    log(f"‚úÖ [{udid}] Ho√†n t·∫•t b·∫≠t 2FA (·∫•n Done)")
                except Exception as e:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng ·∫•n ƒë∆∞·ª£c Done: {e}")
                    return

                time.sleep(1.5)
            except Exception as e:
                log(f"‚ùå L·ªói b∆∞·ªõc b·∫≠t 2FA: {e}")

        # --- L∆∞u v√†o Live.txt (n·∫øu l√† Live, c√≥ th·ªÉ c√≥ 2FA) ---
        try:
            # Ch·ªâ l∆∞u secret_key v√†o c·ªôt 2FA, n·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ tr·ªëng ho√†n to√†n
            with open("Live.txt", "a", encoding="utf-8") as f:
                f.write(f"{username_safe}|{password}|{email}|{current_cookie}|{secret_key if secret_key else ''}\n")
            log("üíæ ƒê√£ l∆∞u Live.txt")
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi l∆∞u Live.txt: {repr(e)}")

        # --- Insert v√†o TreeView (n·∫øu l√† Live, c√≥ th·ªÉ c√≥ 2FA) ---
        tree_item_id = None
        try:
            # Ch·ªâ truy·ªÅn secret_key v√†o c·ªôt 2FA, n·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ tr·ªëng ho√†n to√†n
            tree_item_id = insert_to_tree("Live", username_safe, password, email, current_cookie, two_fa_code=secret_key if secret_key else "")
        except Exception:
            tree_item_id = insert_to_tree("Live", username_safe, password, email, current_cookie, two_fa_code=secret_key if secret_key else "")
        
        # L∆∞u tree_item_id v√†o instance ƒë·ªÉ d√πng cho update sau
        self.tree_item_id = tree_item_id
        time.sleep(4)
        
        # ==== PUSH 1 ·∫¢NH NG·∫™U NHI√äN V√ÄO PHONE + MEDIA SCAN (style AutoPhone) ====
        try:
            folder = globals().get("photo_folder_phone", "")
            if not folder or not os.path.isdir(folder):
                log("‚ö†Ô∏è Ch∆∞a ch·ªçn folder ·∫£nh (Phone).")
            else:
                pics = [f for f in os.listdir(folder) if f.lower().endswith((".jpg",".jpeg",".png"))]
                if not pics:
                    log("‚ö†Ô∏è Folder ·∫£nh kh√¥ng c√≥ file h·ª£p l·ªá.")
                else:
                    local_file = random.choice(pics)
                    local_path = os.path.join(folder, local_file)

                    # Th∆∞ m·ª•c ƒë√≠ch (n√™n l√† Pictures ho·∫∑c DCIM ƒë·ªÉ IG th·∫•y ngay)
                    remote_dir  = "/sdcard/Pictures/AutoPhone"
                    remote_path = f"{remote_dir}/{local_file}"  # gi·ªØ nguy√™n t√™n g·ªëc

                    # 1) ƒë·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
                    adb_mkdir(self.udid, remote_dir)

                    # 2) ƒë·∫©y file
                    out_push = adb_push(self.udid, local_path, remote_path)
                    if "error" in (out_push or "").lower():
                        log(f"‚ùå adb push l·ªói: {out_push}")
                    else:
                        # 3) √©p MediaScanner qu√©t l·∫°i
                        adb_media_scan(self.udid, remote_path)
                        log(f"‚úÖ ƒê√£ push & scan ·∫£nh: {remote_path}")

                    time.sleep(1.5)  # ƒë·ª£i Gallery c·∫≠p nh·∫≠t
        except Exception as e:
            log(f"‚ùå L·ªói khi push ·∫£nh: {e}")
        time.sleep(2)
        
        # --- T·∫Øt app Instagram ---
        subprocess.call(["adb", "-s", self.udid, "shell", "am", "force-stop", "com.instagram.android"])
        log("üõë ƒê√£ t·∫Øt app Instagram")
        time.sleep(3)

        # --- Kh·ªüi ƒë·ªông l·∫°i Instagram ---
        subprocess.call([
            "adb", "-s", self.udid, "shell", "monkey", "-p", "com.instagram.android", "-c", "android.intent.category.LAUNCHER", "1"
        ])
        log("üîÑ ƒê√£ m·ªü l·∫°i app Instagram")
        time.sleep(15)  # ch·ªù app load

        # --- V√†o Profile ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
        log("üë§ ƒê√£ v√†o Profile")
        time.sleep(4)

        # --- V·ªÅ Home ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "100", "1850"])
        log("üë§ ƒê√£ v·ªÅ l·∫°i Home")
        time.sleep(4)

        # --- V√†o Profile ---
        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
        log("üë§ ƒê√£ v√†o Profile")
        time.sleep(10)

        # ==== UP ·∫¢NH N·∫æU C√ì CH·ªåN ====
        pause_event.wait()
        if enable_uppost.get():
            try:
                clicked = False
                                # - C√°ch 1: Theo content-desc ph·ªï bi·∫øn
                for desc in ["New post", "Create", "+", "T·∫°o", "Th√™m"]:
                    try:
                        plus_btn = d.find_element(
                            AppiumBy.ANDROID_UIAUTOMATOR,
                            f'new UiSelector().description("{desc}")'
                        )
                        if plus_btn.is_displayed() and plus_btn.is_enabled():
                            plus_btn.click()
                            log(f"‚úÖ ƒê√£ nh·∫•n n√∫t + (content-desc='{desc}')")
                            clicked = True
                            break
                    except Exception:
                        continue

                # - C√°ch 2: Theo resource-id
                if not clicked:
                    try:
                        el = d.find_element(AppiumBy.ID, "com.instagram.android:id/creation_tab")
                        if el.is_displayed() and el.is_enabled():
                            el.click()
                            log("‚úÖ ƒê√£ nh·∫•n n√∫t + (resource-id=creation_tab, thanh d∆∞·ªõi)")
                            clicked = True
                        else:
                            log("‚ùå N√∫t + (creation_tab) kh√¥ng hi·ªÉn th·ªã ho·∫∑c kh√¥ng click ƒë∆∞·ª£c")
                    except Exception:
                        log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t + b·∫±ng resource-id")

                # - C√°ch 3: Theo n√∫t + ·ªü g√≥c tr√°i
                if not clicked:
                    try:
                        el = d.find_element(
                            AppiumBy.XPATH,
                            '//android.widget.LinearLayout[@resource-id="com.instagram.android:id/left_action_bar_buttons"]/android.widget.ImageView'
                        )
                        if el.is_displayed() and el.is_enabled():
                            el.click()
                            log("‚úÖ ƒê√£ nh·∫•n n√∫t + ·ªü g√≥c tr√°i")
                            clicked = True
                        else:
                            log("‚ùå N√∫t + ·ªü g√≥c tr√°i kh√¥ng hi·ªÉn th·ªã ho·∫∑c kh√¥ng click ƒë∆∞·ª£c")
                    except Exception:
                        log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t + ·ªü g√≥c tr√°i")

                # - C√°ch 4: Giao di·ªán m·ªõi (n√∫t '+' c·∫°nh t√™n t√†i kho·∫£n, gi·ªØa thanh tr√™n)
                if not clicked:
                    try:
                        el_new = d.find_element(
                            AppiumBy.XPATH,
                            '//android.widget.ImageView[contains(@content-desc, "Create") or '
                            'contains(@content-desc, "T·∫°o") or contains(@content-desc, "New") or contains(@content-desc, "+")]'
                        )
                        if el_new.is_displayed() and el_new.is_enabled():
                            rect = el_new.rect
                            x_center = rect["x"] + rect["width"] // 2
                            y_center = rect["y"] + rect["height"] // 2
                            if 200 < x_center < 800 and y_center < 400:  # v√πng gi·ªØa tr√™n
                                el_new.click()
                                log("‚úÖ ƒê√£ nh·∫•n n√∫t '+' ki·ªÉu m·ªõi (c·∫°nh t√™n t√†i kho·∫£n).")
                                clicked = True
                            else:
                                log(f"‚ö†Ô∏è Ph√°t hi·ªán ImageView kh·∫£ nghi ·ªü ({x_center},{y_center}), b·ªè qua do c√≥ th·ªÉ l√† menu.")
                        else:
                            log("‚ùå N√∫t '+' ki·ªÉu m·ªõi b·ªã ·∫©n ho·∫∑c kh√¥ng kh·∫£ d·ª•ng.")
                    except Exception:
                        log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t '+' ki·ªÉu m·ªõi c·∫°nh t√™n t√†i kho·∫£n.")

                # - C√°ch 5: Dump + Ph√¢n t√≠ch XML + Nh·∫•n n√∫t + (fallback th√¥ng minh)
                if not clicked:
                    try:
                        log("[INFO] Kh√¥ng t√¨m th·∫•y n√∫t + b·∫±ng 4 c√°ch tr√™n. ƒêang th·ª≠ Dump + Ph√¢n t√≠ch UI...")

                        XML_PATH_PHONE = "/sdcard/window_dump.xml"
                        XML_PATH_PC = r"C:\Users\MINH\Downloads\AutoTool\ui.xml"

                        subprocess.run(["adb", "-s", udid, "shell", "uiautomator", "dump", XML_PATH_PHONE],
                                    stdout=subprocess.DEVNULL)
                        subprocess.run(["adb", "-s", udid, "pull", XML_PATH_PHONE, XML_PATH_PC],
                                    stdout=subprocess.DEVNULL)

                        if os.path.exists(XML_PATH_PC):
                            with open(XML_PATH_PC, "r", encoding="utf-8") as f:
                                xml_content = f.read()

                            # === 1Ô∏è‚É£ T√¨m theo content-desc ===
                            match = re.search(
                                r'content-desc="([^"]*(Create|Add|New|Post|\+)[^"]*)"[\s\S]*?bounds="\[(\d+),(\d+)\]\[(\d+),(\d+)\]"',
                                xml_content
                            )

                            if match:
                                desc, _, x1, y1, x2, y2 = match.groups()
                                x_center = (int(x1) + int(x2)) // 2
                                y_center = (int(y1) + int(y2)) // 2
                                log(f"[‚úÖ] ƒê√£ ph√°t hi·ªán n√∫t '+' trong XML: desc='{desc}', t·ªça ƒë·ªô=({x_center},{y_center})")

                                try:
                                    element = d.find_element(AppiumBy.ACCESSIBILITY_ID, desc)
                                    element.click()
                                    log("[‚úÖ] ƒê√£ click n√∫t '+' b·∫±ng accessibility id!")
                                    clicked = True
                                except Exception:
                                    log("[‚ö†Ô∏è] Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ b·∫±ng desc, fallback sang t·ªça ƒë·ªô...")

                            # === 2Ô∏è‚É£ Fallback th√¥ng minh ===
                            if not clicked:
                                bounds_match = re.findall(r'bounds="\[(\d+),(\d+)\]\[(\d+),(\d+)\]"', xml_content)

                                # --- V√πng gi·ªØa tr√™n (giao di·ªán m·ªõi) ---
                                for b in bounds_match:
                                    x1, y1, x2, y2 = map(int, b)
                                    if 200 < x1 < 800 and y2 < 400:
                                        x_center = (x1 + x2) // 2
                                        y_center = (y1 + y2) // 2
                                        subprocess.run(
                                            ["adb", "-s", udid, "shell", "input", "tap", str(x_center), str(y_center)],
                                            stdout=subprocess.DEVNULL
                                        )
                                        log(f"[‚úÖ] Click fallback n√∫t '+' d·∫°ng m·ªõi ·ªü ({x_center},{y_center}) b·∫±ng adb tap")
                                        clicked = True
                                        break

                                # --- V√πng gi·ªØa ƒë√°y ---
                                if not clicked:
                                    for b in bounds_match:
                                        x1, y1, x2, y2 = map(int, b)
                                        if 300 < x1 < 800 and y2 > 1500:
                                            x_center = (x1 + x2) // 2
                                            y_center = (y1 + y2) // 2
                                            subprocess.run(
                                                ["adb", "-s", udid, "shell", "input", "tap", str(x_center), str(y_center)],
                                                stdout=subprocess.DEVNULL
                                            )
                                            log(f"[‚úÖ] Click fallback v√πng gi·ªØa ƒë√°y ({x_center},{y_center}) b·∫±ng adb tap")
                                            clicked = True
                                            break

                                # --- V√πng ph·∫£i (cu·ªëi c√πng, n·∫øu ch∆∞a t√¨m ƒë∆∞·ª£c) ---
                                if not clicked:
                                    for b in bounds_match:
                                        x1, y1, x2, y2 = map(int, b)
                                        if x1 > 800 and y2 < 500:
                                            x_center = (x1 + x2) // 2
                                            y_center = (y1 + y2) // 2
                                            subprocess.run(
                                                ["adb", "-s", udid, "shell", "input", "tap", str(x_center), str(y_center)],
                                                stdout=subprocess.DEVNULL
                                            )
                                            log(f"[‚úÖ] Click fallback v√πng ph·∫£i ({x_center},{y_center}) b·∫±ng adb tap")
                                            clicked = True
                                            break

                                if not clicked:
                                    log("‚ùå Kh√¥ng t√¨m th·∫•y v√πng ph√π h·ª£p ƒë·ªÉ click.")
                        else:
                            log("‚ùå Kh√¥ng t√¨m th·∫•y file XML sau khi dump!")

                        # üßπ X√≥a file XML sau khi d√πng
                        if os.path.exists(XML_PATH_PC):
                            os.remove(XML_PATH_PC)
                            log("[üßπ] ƒê√£ x√≥a file ui.xml sau khi ho√†n t·∫•t.")
                    except Exception as e:
                        log(f"‚ö†Ô∏è L·ªói khi th·ª≠ c√°ch Dump + Ph√¢n t√≠ch XML: {e}")

                # - C√°ch 6: Theo n√∫t + ·ªü g√≥c ph·∫£i (ƒë·∫∑t sau c√πng, tr√°nh nh·∫•n nh·∫ßm menu)
                if not clicked:
                    try:
                        els_right = d.find_elements(
                            AppiumBy.XPATH,
                            '//android.widget.LinearLayout[@resource-id="com.instagram.android:id/right_action_bar_buttons"]/android.widget.ImageView'
                        )
                        if len(els_right) >= 2:
                            el = els_right[1]
                            if el.is_displayed() and el.is_enabled():
                                el.click()
                                log("‚úÖ ƒê√£ nh·∫•n n√∫t + ·ªü g√≥c ph·∫£i (c√°ch cu·ªëi c√πng)")
                                clicked = True
                            else:
                                log("‚ùå N√∫t + ·ªü g√≥c ph·∫£i kh√¥ng hi·ªÉn th·ªã ho·∫∑c kh√¥ng click ƒë∆∞·ª£c")
                        else:
                            log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªß n√∫t trong right_action_bar_buttons")
                    except Exception as e:
                        log(f"‚ö†Ô∏è L·ªói khi t√¨m n√∫t + ·ªü g√≥c ph·∫£i: {e}")

                time.sleep(7)

                # 4. Ki·ªÉm tra xem c√≥ m·ª•c Post kh√¥ng
                if clicked:
                    try:
                        post_el = d.find_element(
                            AppiumBy.XPATH,
                            '//android.widget.TextView[@text="Post"]'
                        )
                        post_el.click()
                        log("‚úÖ ƒê√£ nh·∫•n v√†o m·ª•c Post")
                        time.sleep(7)
                    except Exception:
                        log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m·ª•c Post, b·ªè qua")
                else:
                    log("‚ùå Kh√¥ng nh·∫•n ƒë∆∞·ª£c n√∫t + n√†o")
                        
                # 5. ·∫§n Next 
                for _ in range(2):
                    clicked_next = False
                    for txt in ["Next", "Ti·∫øp"]:
                        try:
                            d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")').click()
                            clicked_next = True
                            time.sleep(4)
                            break
                        except Exception:
                            continue
                    if not clicked_next:
                        break
                time.sleep(8)

                # 6 N·∫øu xu·∫•t hi·ªán popup "Sharing posts" th√¨ b·∫•m OK
                try:
                    ok_btn = wait.until(
                        EC.element_to_be_clickable(
                            (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text("OK")')
                        )
                    )
                    if ok_btn.is_displayed():
                        ok_btn.click()
                        log(f"‚ÑπÔ∏è [{udid}] ƒê√£ b·∫•m OK trong popup Sharing posts.")
                        time.sleep(0.8)
                except Exception:
                    pass
                time.sleep(3)

                # 7 ƒêi·ªÅn caption v√†o √¥ "Add a caption..."
                try:
                    caption = (
                        random.choice(CAPTION_LEADS) + " "
                        + random.choice(CAPTION_TRAILS) + " "
                        + random.choice(CAPTION_EMOJIS)
                    )
                    # T√¨m √¥ nh·∫≠p caption (th∆∞·ªùng l√† EditText ƒë·∫ßu ti√™n)
                    caption_input = d.find_element(AppiumBy.CLASS_NAME, "android.widget.EditText")
                    caption_input.clear()
                    caption_input.send_keys(caption)
                    log(f"‚úÖ ƒê√£ ƒëi·ªÅn caption: {caption}")
                    time.sleep(1.5)
                except Exception as e:
                    log(f"‚ö†Ô∏è Kh√¥ng ƒëi·ªÅn ƒë∆∞·ª£c caption: {e}")
                time.sleep(3)

                # 8 ·∫§n Share
                shared = False
                for txt in ["Share", "Chia s·∫ª", "ƒêƒÉng"]:
                    try:
                        d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")').click()
                        shared = True
                        break
                    except Exception:
                        continue

                if shared:
                    log(f"‚úÖ [{udid}] ƒê√£ ƒëƒÉng b√†i m·ªõi.")
                    # Update tree: POST = ‚úÖ
                    if hasattr(self, 'tree_item_id') and self.tree_item_id:
                        app.after(0, lambda: update_tree_column(self.tree_item_id, "POST", "‚úÖ"))
                else:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng b·∫•m ƒë∆∞·ª£c n√∫t Share/Chia s·∫ª.")
                    # Update tree: POST = ‚ùå
                    if hasattr(self, 'tree_item_id') and self.tree_item_id:
                        app.after(0, lambda: update_tree_column(self.tree_item_id, "POST", "‚ùå"))
                time.sleep(15)
            except Exception as e:
                log(f"‚ùå L·ªói khi up post: {e}")
                # N·∫øu l·ªói th∆∞·ªùng: restart app, KH√îNG d·ª´ng phi√™n
                try:
                    adb_shell(self.udid, "am", "force-stop", "com.instagram.android")
                    log("üõë ƒê√£ t·∫Øt ·ª©ng d·ª•ng Instagram (L·ªói UP POST).")
                    time.sleep(3)
                    adb_shell(self.udid, "monkey", "-p", "com.instagram.android", "-c", "android.intent.category.LAUNCHER", "1")
                    log("üîÅ ƒê√£ kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng Instagram (L·ªói UP POST).")
                    time.sleep(10)
                except Exception as e2:
                    log(f"‚ö†Ô∏è L·ªói khi kh·ªüi ƒë·ªông l·∫°i app sau crash: {e2}")
                log("‚û°Ô∏è Ti·∫øp t·ª•c quy tr√¨nh, kh√¥ng d·ª´ng phi√™n.")
                time.sleep(4)

        # ==== AUTO FOLLOW ====
        pause_event.wait()
        if enable_autofollow.get():
            try:
                clicked = False
                # 1. Th·ª≠ theo content-desc "Search and explore"
                try:
                    el = d.find_element(AppiumBy.ACCESSIBILITY_ID, "Search and explore")
                    el.click()
                    log("‚úÖ ƒê√£ nh·∫•n n√∫t k√≠nh l√∫p (Search and explore)")
                    clicked = True
                except Exception:
                    log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t k√≠nh l√∫p b·∫±ng content-desc 'Search and explore'")

                # 2. Th·ª≠ theo content-desc "Search"
                if not clicked:
                    try:
                        el = d.find_element(AppiumBy.ACCESSIBILITY_ID, "Search")
                        el.click()
                        log("‚úÖ ƒê√£ nh·∫•n n√∫t k√≠nh l√∫p (Search)")
                        clicked = True
                    except Exception:
                        log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t k√≠nh l√∫p b·∫±ng content-desc 'Search'")

                # 3. Th·ª≠ b·∫±ng UiAutomator textContains
                if not clicked:
                    try:
                        el = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().descriptionContains("Search")')
                        el.click()
                        log("‚úÖ ƒê√£ nh·∫•n n√∫t k√≠nh l√∫p (descriptionContains 'Search')")
                        clicked = True
                    except Exception:
                        log("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t k√≠nh l√∫p b·∫±ng descriptionContains 'Search'")

                time.sleep(4)

                # 1. T√¨m √¥ nh·∫≠p Search
                input_box = None
                for how, what in [
                    (AppiumBy.ID, "com.instagram.android:id/action_bar_search_edit_text"),
                    (AppiumBy.CLASS_NAME, "android.widget.EditText"),
                ]:
                    try:
                        input_box = d.find_element(how, what)
                        input_box.click()
                        time.sleep(4)
                        break
                    except Exception:
                        continue

                if not input_box:
                    log("‚ùå Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p Search")
                else:
                    # 2. L·∫•y s·ªë l∆∞·ª£ng follow t·ª´ bi·∫øn UI
                    try:
                        follow_count = phone_follow_count_var.get()
                    except Exception:
                        follow_count = 10

                    FOLLOW_USERNAMES = [
                        "n.nhu1207","v.anh.26","shxuy0bel421162","shx_pe06","nguyen57506",
                        "mhai_187","ductoan1103","ductoannn111","datgia172","nhd_305.nh","monkeycatluna",
                    ]
                    follow_list = random.sample(FOLLOW_USERNAMES, min(follow_count, len(FOLLOW_USERNAMES)))
                    followed = 0

                    for username in follow_list:
                        # T√¨m l·∫°i √¥ nh·∫≠p Search
                        input_box = None
                        for how, what in [
                            (AppiumBy.ID, "com.instagram.android:id/action_bar_search_edit_text"),
                            (AppiumBy.CLASS_NAME, "android.widget.EditText"),
                        ]:
                            try:
                                input_box = d.find_element(how, what)
                                input_box.click()
                                break
                            except Exception:
                                continue

                        if not input_box:
                            log("‚ùå Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p Search khi follow username m·ªõi")
                            continue

                        # Nh·∫≠p username (send_keys fallback set_text ho·∫∑c ADB)
                        try:
                            input_box.clear()
                        except Exception:
                            pass
                        try:
                            input_box.send_keys(username)
                            log(f"‚å®Ô∏è Nh·∫≠p username b·∫±ng send_keys: {username}")
                        except Exception:
                            try:
                                input_box.set_text(username)
                                log(f"‚å®Ô∏è Nh·∫≠p username b·∫±ng set_text: {username}")
                            except Exception:
                                try:
                                    # ‚úÖ Fallback cu·ªëi: D√πng ADB input text thay v√¨ JavaScript
                                    subprocess.call(["adb", "-s", self.udid, "shell", "input", "text", username])
                                    log(f"‚å®Ô∏è Nh·∫≠p username b·∫±ng ADB input text: {username}")
                                except Exception as e:
                                    log(f"‚ùå Kh√¥ng nh·∫≠p ƒë∆∞·ª£c {username}: {e}")
                                    continue
                        time.sleep(5)

                        # T√¨m ƒë√∫ng username trong k·∫øt qu·∫£
                        found = False
                        results = d.find_elements(AppiumBy.ID, "com.instagram.android:id/row_search_user_username")
                        if not results:
                            results = d.find_elements(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{username}")')
                        for el in results:
                            try:
                                t = (el.text or "").strip()
                                if t.lower() == username.lower() or username.lower() in t.lower():
                                    el.click()
                                    log(f"‚úÖ ƒê√£ nh·∫•n v√†o username: {username}")
                                    found = True
                                    break
                            except Exception:
                                continue

                        if not found:
                            log(f"‚ùå Kh√¥ng t√¨m th·∫•y username {username} trong k·∫øt qu·∫£ t√¨m ki·∫øm")
                            continue

                        time.sleep(5)

                        # Nh·∫•n n√∫t Follow
                        try:
                            follow_btn = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text("Follow")')
                            if follow_btn.is_enabled() and follow_btn.is_displayed():
                                follow_btn.click()
                                log(f"‚úÖ ƒê√£ nh·∫•n Follow cho {username}")
                                time.sleep(3)
                                followed += 1
                                            
                                # Update tree: FOLLOW = s·ªë l∆∞·ª£ng/t·ªïng s·ªë
                                if hasattr(self, 'tree_item_id') and self.tree_item_id:
                                    follow_status = f"{followed}/{follow_count}"
                                    app.after(0, lambda fs=follow_status: update_tree_column(self.tree_item_id, "FOLLOW", fs))

                                # --- Ki·ªÉm tra popup block follow ---
                                try:
                                    popup = d.find_elements(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Try Again Later")')
                                    if popup:
                                        log("‚õî Instagram ƒë√£ block follow: Try Again Later popup xu·∫•t hi·ªán.")
                                        try:
                                            ok_btn = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text("OK")')
                                            ok_btn.click()
                                            log("‚úÖ ƒê√£ ·∫•n OK ƒë·ªÉ ƒë√≥ng popup block follow.")
                                        except Exception:
                                            log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t OK trong popup.")
                                        break
                                except Exception as e:
                                    log(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra popup block follow: {e}")
                                time.sleep(2)

                                # --- Back sau khi follow (2 l·∫ßn) ---
                                for i in range(2):
                                    back_clicked = False
                                    try:
                                        for desc in ["Back", "ƒêi·ªÅu h∆∞·ªõng l√™n"]:
                                            try:
                                                back_btn = d.find_element(AppiumBy.ACCESSIBILITY_ID, desc)
                                                back_btn.click()
                                                log(f"üîô ƒê√£ nh·∫•n n√∫t m≈©i t√™n l√πi l·∫ßn {i+1} ({desc})")
                                                back_clicked = True
                                                time.sleep(2)
                                                break
                                            except Exception:
                                                continue
                                        if not back_clicked:
                                            btns = d.find_elements(AppiumBy.CLASS_NAME, "android.widget.ImageButton")
                                            if btns:
                                                btns[0].click()
                                                log(f"üîô ƒê√£ nh·∫•n n√∫t m≈©i t√™n l√πi l·∫ßn {i+1}")
                                                back_clicked = True
                                                time.sleep(2)
                                        if not back_clicked:
                                            d.back()
                                            log(f"üîô ƒê√£ ·∫§n Back l·∫ßn {i+1}")
                                            time.sleep(2)
                                    except Exception:
                                        log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t m≈©i t√™n l√πi l·∫ßn {i+1} sau khi Follow")
                            else:
                                log(f"‚ùå N√∫t Follow kh√¥ng kh·∫£ d·ª•ng tr√™n profile {username}")
                        except Exception:
                            log(f"‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Follow tr√™n profile {username}")

                        if followed >= follow_count:
                            break
            except Exception as e:
                log(f"‚ùå L·ªói khi auto follow: {e}")
                # N·∫øu l·ªói th∆∞·ªùng: restart app, KH√îNG d·ª´ng phi√™n
                try:
                    adb_shell(self.udid, "am", "force-stop", "com.instagram.android")
                    log("üõë ƒê√£ t·∫Øt ·ª©ng d·ª•ng Instagram (Follow L·ªói).")
                    time.sleep(3)
                    adb_shell(self.udid, "monkey", "-p", "com.instagram.android", "-c", "android.intent.category.LAUNCHER", "1")
                    log("üîÅ ƒê√£ kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng Instagram (Follow L·ªói).")
                    time.sleep(10)
                except Exception as e2:
                    log(f"‚ö†Ô∏è L·ªói khi kh·ªüi ƒë·ªông l·∫°i app sau crash: {e2}")
                log("‚û°Ô∏è Ti·∫øp t·ª•c quy tr√¨nh, kh√¥ng d·ª´ng phi√™n.")
                time.sleep(4)

        # ==== EDIT PROFILE (AVATAR + BIO) N·∫æU C√ì CH·ªåN ====
        pause_event.wait()
        if enable_editprofile.get():
            try:
                # --- V√†o Profile ---
                subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
                log("üë§ ƒê√£ v√†o Profile")
                time.sleep(10)
                # Nh·∫•n Edit profile
                try:
                    log("ƒêang t√¨m n√∫t 'Edit profile'...")
                    edit_profile_btn = None
                    try:
                        edit_profile_btn = WebDriverWait(d, 8).until(
                            EC.presence_of_element_located((
                                AppiumBy.ANDROID_UIAUTOMATOR,
                                'new UiSelector().text("Edit profile")'
                            ))
                        )
                    except Exception:
                        log("[ERROR] Kh√¥ng t√¨m th·∫•y n√∫t 'Edit profile'.")
                        return
                    if edit_profile_btn:
                        edit_profile_btn.click()
                        log("ƒê√£ nh·∫•n n√∫t 'Edit profile'.")
                        time.sleep(5)
                    else:
                        log("L·ªói Kh√¥ng t√¨m th·∫•y n√∫t 'Edit profile'.")
                except Exception as e:
                    log(f"L·ªói khi nh·∫•n n√∫t 'Edit profile': {e}")

                # N·∫øu kh√¥ng ph·∫£i Share profile, th√¨ check popup avatar
                try:
                    notnow = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR,
                                            'new UiSelector().textContains("Not now")')
                    notnow.click()
                    log("‚úÖ ƒê√£ ·∫•n Not now ·ªü popup t·∫°o avatar")
                except Exception:
                    pass  # Kh√¥ng c√≥ popup th√¨ b·ªè qua
                
                # UP AVATAR 
                avatar_success = False
                try:
                    # 1. T√¨m v√† ·∫•n v√†o "Change profile picture"
                    el = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Change profile picture")')
                    el.click()
                    log("‚úÖ ƒê√£ nh·∫•n Change profile picture")
                    time.sleep(3)

                    # 2. Ch·ªçn "Choose from library"
                    choose = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Choose from library")')
                    choose.click()
                    log("‚úÖ ƒê√£ ch·ªçn Choose from library")
                    time.sleep(6)

                    # 3. ·∫§n "Done" (g√≥c ph·∫£i tr√™n)
                    for txt in ["Done", "Next", "Ti·∫øp", "Xong", "L∆∞u"]:
                        try:
                            d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")').click()
                            avatar_success = True
                            break
                        except Exception:
                            pass
                    time.sleep(13)
                except Exception as e:
                    log(f"‚ùå L·ªói khi upload avatar: {e}")
                    avatar_success = False
                
                # Update tree: AVATAR
                if hasattr(self, 'tree_item_id') and self.tree_item_id:
                    avatar_status = "‚úÖ" if avatar_success else "‚ùå"
                    app.after(0, lambda: update_tree_column(self.tree_item_id, "AVATAR", avatar_status))

                # Nh·∫•n Edit profile
                try:
                    log("ƒêang t√¨m n√∫t 'Edit profile'...")
                    edit_profile_btn = None
                    try:
                        edit_profile_btn = WebDriverWait(d, 8).until(
                            EC.presence_of_element_located((
                                AppiumBy.ANDROID_UIAUTOMATOR,
                                'new UiSelector().text("Edit profile")'
                            ))
                        )
                    except Exception:
                        log("L·ªói Kh√¥ng t√¨m th·∫•y n√∫t 'Edit profile'.")
                        return
                    if edit_profile_btn:
                        edit_profile_btn.click()
                        log("ƒê√£ nh·∫•n n√∫t 'Edit profile'.")
                        time.sleep(5)
                    else:
                        log("L·ªói Kh√¥ng t√¨m th·∫•y n√∫t 'Edit profile'.")
                except Exception as e:
                    log(f"L·ªói khi nh·∫•n n√∫t 'Edit profile': {e}")

                # =============== EDIT BIO ===============
                # 1. ·∫§n v√†o label Bio
                el = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Bio")')
                el.click()
                log("‚úÖ ƒê√£ nh·∫•n v√†o label Bio")
                time.sleep(3)

                # 2. T·∫°o bio ng·∫´u nhi√™n t·ª´ BIO_LINES + emoji
                bio = random.choice(BIO_LINES) + " " + random.choice(CAPTION_EMOJIS)
                time.sleep(3)

                # 3. ƒêi·ªÅn bio v√†o √¥ nh·∫≠p
                input_bio = d.find_element(AppiumBy.CLASS_NAME, "android.widget.EditText")
                input_bio.clear()
                input_bio.send_keys(bio)
                log(f"‚úÖ ƒê√£ ƒëi·ªÅn bio: {bio}")
                time.sleep(3)

                # 4) L∆∞u: icon ‚úì g√≥c tr√™n ph·∫£i ho·∫∑c n√∫t Save/Xong/L∆∞u
                saved = False
                # a) th·ª≠ theo text
                for txt in ["Save", "L∆∞u", "Done", "Xong", "‚úì"]:
                    try:
                        d.find_element(
                            AppiumBy.ANDROID_UIAUTOMATOR,
                            f'new UiSelector().textContains("{txt}")'
                        ).click()
                        saved = True
                        break
                    except Exception:
                        pass
                # b) th·ª≠ content-desc c·ªßa icon ‚úì
                if not saved:
                    for how, what in [
                        (AppiumBy.ACCESSIBILITY_ID, "Done"),
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().descriptionContains("Done")'),
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().descriptionMatches("(?i)(save|done|xong|l∆∞u|check)")'),
                    ]:
                        try:
                            el = d.find_element(how, what)
                            el.click()
                            saved = True
                            break
                        except Exception:
                            continue

                if saved:
                    log(f"‚úÖ [{udid}] ƒê√£ c·∫≠p nh·∫≠t Bio")
                else:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng b·∫•m ƒë∆∞·ª£c n√∫t L∆∞u/‚úì trong m√†n Bio.")
                
                # Update tree: BIO
                if hasattr(self, 'tree_item_id') and self.tree_item_id:
                    bio_status = "‚úÖ" if saved else "‚ùå"
                    app.after(0, lambda: update_tree_column(self.tree_item_id, "BIO", bio_status))

                time.sleep(6)

                #============== EDIT GENDER ===============
                # 1. Cu·ªôn xu·ªëng ƒë·ªÉ th·∫•y label Gender (n·∫øu c·∫ßn)
                d.swipe(500, 1500, 500, 500, 500)  # ƒêi·ªÅu ch·ªânh t·ªça ƒë·ªô n·∫øu c·∫ßn
                time.sleep(3)

                # 2. ·∫§n v√†o label Gender (Prefer not to say)
                el = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Prefer not to say")')
                el.click()
                log("‚úÖ ƒê√£ nh·∫•n v√†o label Gender")
                time.sleep(3)

                # 3. Ch·ªçn Female
                female = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Female")')
                female.click()
                log("‚úÖ ƒê√£ ch·ªçn Female")

                time.sleep(0.5)

                # 6) L∆∞u: icon ‚úì g√≥c tr√™n ph·∫£i ho·∫∑c n√∫t Save/Xong/L∆∞u
                saved = False
                # a) th·ª≠ theo text
                for txt in ["Save", "L∆∞u", "Done", "Xong", "‚úì"]:
                    try:
                        d.find_element(
                            AppiumBy.ANDROID_UIAUTOMATOR,
                            f'new UiSelector().textContains("{txt}")'
                        ).click()
                        saved = True
                        break
                    except Exception:
                        pass
                # b) th·ª≠ content-desc c·ªßa icon ‚úì
                if not saved:
                    for how, what in [
                        (AppiumBy.ACCESSIBILITY_ID, "Done"),
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().descriptionContains("Done")'),
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().descriptionMatches("(?i)(save|done|xong|l∆∞u|check)")'),
                    ]:
                        try:
                            el = d.find_element(how, what)
                            el.click()
                            saved = True
                            break
                        except Exception:
                            continue

                if saved:
                    log(f"‚úÖ [{udid}] ƒê√£ c·∫≠p nh·∫≠t Gender")
                else:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng b·∫•m ƒë∆∞·ª£c n√∫t L∆∞u/‚úì trong m√†n Gender.")
                
                # Update tree: GENDER
                if hasattr(self, 'tree_item_id') and self.tree_item_id:
                    gender_status = "‚úÖ" if saved else "‚ùå"
                    app.after(0, lambda: update_tree_column(self.tree_item_id, "GENDER", gender_status))
                
                time.sleep(6)
            except Exception as e:
                log(f"‚ùå L·ªói khi edit profile: {e}")
                # N·∫øu l·ªói th∆∞·ªùng: restart app, KH√îNG d·ª´ng phi√™n
                try:
                    adb_shell(self.udid, "am", "force-stop", "com.instagram.android")
                    log("üõë ƒê√£ t·∫Øt ·ª©ng d·ª•ng Instagram (L·ªói EDIT PROFILE).")
                    time.sleep(3)
                    adb_shell(self.udid, "monkey", "-p", "com.instagram.android", "-c", "android.intent.category.LAUNCHER", "1")
                    log("üîÅ ƒê√£ kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng Instagram (L·ªói EDIT PROFILE).")
                    time.sleep(10)
                except Exception as e2:
                    log(f"‚ö†Ô∏è L·ªói khi kh·ªüi ƒë·ªông l·∫°i app sau crash: {e2}")
                log("‚û°Ô∏è Ti·∫øp t·ª•c quy tr√¨nh, kh√¥ng d·ª´ng phi√™n.")
                time.sleep(4)
        
        # ==== CHUY·ªÇN SANG PRO ACCOUNT N·∫æU C√ì CH·ªåN ====
        pause_event.wait()
        if enable_proaccount.get():
            try:
                # --- Ki·ªÉm tra n·∫øu ƒë√£ ·ªü m√†n Edit profile hay ch∆∞a ---
                try:
                    # T√¨m xem c√≥ √¥ "Bio" ho·∫∑c "Change profile picture" ‚Üí ƒëang ·ªü m√†n Edit profile
                    in_edit = False
                    for txt in ["Change profile picture", "Bio"]:
                        try:
                            d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().textContains("{txt}")')
                            in_edit = True
                            break
                        except Exception:
                            continue

                    if in_edit:
                        log("‚ÑπÔ∏è ƒêang ·ªü trong m√†n Edit profile, b·ªè qua thao t√°c v√†o Profile.")
                    else:
                        # --- V√†o Profile ---
                        subprocess.call(["adb", "-s", self.udid, "shell", "input", "tap", "1000", "1850"])
                        log("üë§ ƒê√£ v√†o Profile")
                        time.sleep(6)

                        # === Nh·∫•n Edit profile ===
                        try:
                            edit_btn = WebDriverWait(d, 8).until(
                                EC.presence_of_element_located((AppiumBy.ANDROID_UIAUTOMATOR,
                                                                'new UiSelector().text("Edit profile")'))
                            )
                            edit_btn.click()
                            log("‚úÖ ƒê√£ nh·∫•n n√∫t Edit profile")
                            time.sleep(5)
                        except Exception as e:
                            log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ho·∫∑c l·ªói khi nh·∫•n Edit profile: {e}")

                        # === N·∫øu c√≥ popup Avatar "Not now" ===
                        try:
                            notnow = d.find_element(AppiumBy.ANDROID_UIAUTOMATOR,
                                                    'new UiSelector().textContains("Not now")')
                            notnow.click()
                            log("‚úÖ ƒê√£ ·∫•n Not now ·ªü popup t·∫°o avatar")
                        except Exception:
                            pass
                except Exception as e:
                    log(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra ho·∫∑c v√†o Edit profile: {e}")
                # 1. Cu·ªôn xu·ªëng ƒë·ªÉ th·∫•y switch sang Pro Account (n·∫øu c·∫ßn)
                d.swipe(500, 1500, 500, 500, 500)
                time.sleep(5)

                # 2) Cu·ªôn v√† b·∫•m "Switch to professional account"
                if not _scroll_into_view_by_text(d, "Switch to professional"):
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng t√¨m th·∫•y m·ª•c 'Switch to professional account'.")
                    if hasattr(self, 'tree_item_id') and self.tree_item_id:
                        app.after(0, lambda: update_tree_column(self.tree_item_id, "PROFESSIONAL", "‚ùå"))
                else:
                    wait.until(EC.element_to_be_clickable(
                        (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Switch to professional")'))
                    ).click()
                    time.sleep(10)

                    # 3) M√†n gi·ªõi thi·ªáu ‚Üí Next
                    for txt in ["Next", "Ti·∫øp"]:
                        try:
                            d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().text("{txt}")').click()
                            break
                        except Exception:
                            pass
                    time.sleep(6)

                    # 4) M√†n "What best describes you?" ‚Üí ch·ªçn Category
                    try:
                        wait.until(EC.element_to_be_clickable(
                            (AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Search")')
                        )).click()
                    except Exception:
                        pass

                    category = pro_category_var.get() if 'pro_category_var' in globals() else "Reel creator"
                    account_type = pro_type_var.get() if 'pro_type_var' in globals() else "Creator"
                    target = (category or "").strip()

                    if target:
                        if not _scroll_into_view_by_text(d, target, swipe_delay=0.7, max_swipes=10):
                            log(f"‚ö†Ô∏è [{udid}] Kh√¥ng t√¨m th·∫•y category '{target}'.")
                            if hasattr(self, 'tree_item_id') and self.tree_item_id:
                                app.after(0, lambda: update_tree_column(self.tree_item_id, "PROFESSIONAL", "‚ùå"))
                        else:
                            wait.until(EC.element_to_be_clickable(
                                (AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().text("{target}")'))
                            ).click()
                            time.sleep(4)

                            # Tap display on profile
                            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "970", "900"])
                            log("‚úÖ Tap Display On Profile")
                            time.sleep(4)

                            # 4d) B·∫•m "Switch to professional account"
                            for txt in ["Switch to professional account"]:
                                try:
                                    _scroll_into_view_by_text(d, txt, max_swipes=2)
                                    d.find_element(
                                        AppiumBy.ANDROID_UIAUTOMATOR,
                                        f'new UiSelector().textContains("{txt}")'
                                    ).click()
                                    break
                                except Exception:
                                    continue
                            time.sleep(12)

                            # 5) M√†n "What type of professional are you?"
                            typ = (account_type or "").strip().lower()
                            target_type = "Creator" if typ != "business" else "Business"
                            try:
                                wait.until(EC.element_to_be_clickable(
                                    (AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().text("{target_type}")'))
                                ).click()
                            except Exception:
                                try:
                                    d.find_element(
                                        AppiumBy.ANDROID_UIAUTOMATOR,
                                        f'new UiSelector().textContains("{target_type}")'
                                    ).click()
                                except Exception:
                                    pass
                            time.sleep(0.3)
                            for txt in ["Next", "Ti·∫øp"]:
                                try:
                                    d.find_element(AppiumBy.ANDROID_UIAUTOMATOR, f'new UiSelector().text("{txt}")').click()
                                    break
                                except Exception:
                                    pass

                            log(f"‚úÖ [{udid}] ƒê√£ chuy·ªÉn sang Professional: Category='{category}', Type={target_type}.")
                            if hasattr(self, 'tree_item_id') and self.tree_item_id:
                                app.after(0, lambda: update_tree_column(self.tree_item_id, "PROFESSIONAL", "‚úÖ"))

            except Exception as e:
                log(f"‚ö†Ô∏è [{udid}] L·ªói trong b∆∞·ªõc chuy·ªÉn sang Professional: {e}")
                if hasattr(self, 'tree_item_id') and self.tree_item_id:
                    app.after(0, lambda: update_tree_column(self.tree_item_id, "PROFESSIONAL", "‚ùå"))

        # ==== K·∫æT TH√öC PHI√äN LIVE: B·∫¨T CH·∫æ ƒê·ªò M√ÅY BAY V√Ä RESTART ====
        # B·∫≠t ch·∫ø ƒë·ªô m√°y bay v√† t·ª± ch·∫°y l·∫°i phi√™n m·ªõi
        try:
            adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
            adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
            adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
            adb_shell(self.udid, "svc", "wifi", "disable")
            adb_shell(self.udid, "svc", "data", "disable")
            log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (LIVE)")
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (LIVE): {e}")

        # Restart ngay l·∫≠p t·ª©c
        self.log("üîÑ Restart phi√™n v√¨ Live‚Ä¶")
        self.stop()
        time.sleep(3)
        AndroidWorker(self.udid, log_fn=self.log).start()
        return True

    # ================================== SIGNUP ‚Äì INSTAGRAM LITE ===============================================
    def signup_instagram_lite(self):
        d, log = self.driver, self.log
        time.sleep(2.5)  # ch·ªù UI ·ªïn ƒë·ªãnh h∆°n
        
        # 1) --- Nh·∫•n "Create new account" ---
        pause_event.wait()
        try:
            groups = d.find_elements(AppiumBy.CLASS_NAME, "android.view.ViewGroup")
            clickable_groups = [g for g in groups if g.get_attribute("clickable") == "true"]

            if len(clickable_groups) >= 2:
                # N√∫t "Create new account" th∆∞·ªùng n·∫±m ngay tr∆∞·ªõc n√∫t "Log in"
                target = clickable_groups[-2]
                target.click()
                log("üëâ ƒê√£ b·∫•m 'Create new account' (Instagram Lite)")
                time.sleep(2)
            else:
                log("‚õî Kh√¥ng t√¨m th·∫•y ƒë·ªß ViewGroup clickable ƒë·ªÉ ch·ªçn 'Create new account'.")
                return False
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·∫•m 'Create new account': {repr(e)}")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        time.sleep(6)

        # 2) --- Nh·∫•n "Sign up with email" ---
        pause_event.wait()
        try:
            groups = d.find_elements(AppiumBy.CLASS_NAME, "android.view.ViewGroup")
            clickable_groups = [g for g in groups if g.get_attribute("clickable") == "true"]

            if len(clickable_groups) >= 2:
                # N√∫t "Sign up with email" th∆∞·ªùng l√† clickable k·∫ø cu·ªëi (tr∆∞·ªõc "Log in")
                clickable_groups[-2].click()
                log("üëâ ƒê√£ b·∫•m 'Sign up with email'")
                time.sleep(2)
            else:
                log("‚õî Kh√¥ng t√¨m th·∫•y ƒë·ªß ViewGroup clickable ƒë·ªÉ ch·ªçn 'Sign up with email'.")
                return False
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·∫•m 'Sign up with email': {repr(e)}")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        time.sleep(4)

        # 3) --- L·∫•y email t·∫°m ---
        pause_event.wait()
        try:
            email, drop_session_id, source = fetch_signup_email(self)
        except NameError:
            try:
                mode = self.var_mail_src.get().strip().lower()
            except Exception:
                mode = "tempasia"

            if mode == "dropmail":
                email, drop_session_id = get_dropmail_email()
                source = "dropmail"
            else:
                email = get_tempasia_email()
                drop_session_id = None
                source = "tempasia"

        if not email:
            log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c email t·∫°m.")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        # 4) --- ƒêi·ªÅn email v√†o √¥ nh·∫≠p ---
        pause_event.wait()
        try:
            input_box = WebDriverWait(d, 10).until(
                EC.presence_of_element_located((AppiumBy.CLASS_NAME, "android.widget.MultiAutoCompleteTextView"))
            )
            input_box.click()
            input_box.clear()
            input_box.send_keys(email)
            log(f"üëâ ƒê√£ ƒëi·ªÅn email: {email}")
            time.sleep(1)

            # --- Nh·∫•n Next ---
            # T√¨m ViewGroup clickable n·∫±m ngay d∆∞·ªõi √¥ nh·∫≠p email (c√°i g·∫ßn nh·∫•t)
            groups = d.find_elements(AppiumBy.CLASS_NAME, "android.view.ViewGroup")
            clickable_groups = [g for g in groups if g.get_attribute("clickable") == "true"]

            # L·∫•y center Y c·ªßa input_box
            bounds_input = input_box.get_attribute("bounds")
            nums_input = [int(n) for n in re.findall(r"\d+", bounds_input)]
            y_input = (nums_input[1] + nums_input[3]) // 2

            # Ch·ªçn ViewGroup clickable c√≥ center Y > y_input v√† diff nh·ªè nh·∫•t (ngay d∆∞·ªõi)
            next_btn = None
            min_diff = None
            for g in clickable_groups:
                try:
                    bounds = g.get_attribute("bounds")
                    nums = [int(n) for n in re.findall(r"\d+", bounds)]
                    y_center = (nums[1] + nums[3]) // 2
                    if y_center > y_input:
                        diff = y_center - y_input
                        if min_diff is None or diff < min_diff:
                            min_diff = diff
                            next_btn = g
                except Exception:
                    continue

            if next_btn:
                next_btn.click()
                log("üëâ ƒê√£ b·∫•m 'Next' (ViewGroup ngay d∆∞·ªõi √¥ nh·∫≠p email)")
                time.sleep(2)
            else:
                log("‚õî Kh√¥ng t√¨m th·∫•y n√∫t Next (ViewGroup d∆∞·ªõi √¥ nh·∫≠p email).")
                return False

        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi ƒëi·ªÅn email v√† nh·∫•n Next: {repr(e)}")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        time.sleep(13)

        # 5) ------ L·∫•y Code Mail V√† ƒêi·ªÅn =============
        pause_event.wait()
        log("‚úèÔ∏è B·∫Øt ƒë·∫ßu ƒëi·ªÅn m√£ x√°c minh email")
        code = None
        # Ch·ªù m√£ x√°c minh t·ª´ email t·∫°m (DropMail ho·∫∑c TempAsia)
        try:
            if source == "dropmail":
                code = wait_for_dropmail_code(self, drop_session_id, max_checks=30, interval=3)
            else:
                code = wait_for_tempmail_code(email, max_checks=30, interval=2)
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi l·∫•y m√£ x√°c minh email: {repr(e)}")
            code = None

        if not code:
            log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ x√°c minh t·ª´ email.")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        log(f"‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c m√£ x√°c minh: {code}")

        # T√¨m √¥ nh·∫≠p code v√† ƒëi·ªÅn v√†o
        try:
            udid = self.udid if hasattr(self, 'udid') else None
            if udid:
                subprocess.call(["adb", "-s", udid, "shell", "input", "text", str(code)])
                log("‚úÖ ƒê√£ d√°n m√£ x√°c minh b·∫±ng ADB input text")
                time.sleep(3)
            else:
                log("‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c udid ƒë·ªÉ d√°n code.")
        except Exception as e:
            log(f"‚ùå Kh√¥ng d√°n ƒë∆∞·ª£c m√£ x√°c minh: {repr(e)}")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        
        # Nh·∫•n Next sau khi ƒëi·ªÅn code
        # --- Nh·∫•n Next ---
        groups = d.find_elements(AppiumBy.CLASS_NAME, "android.view.ViewGroup")
        clickable_groups = [g for g in groups if g.get_attribute("clickable") == "true"]

        # L·∫•y center Y c·ªßa input_box
        bounds_input = input_box.get_attribute("bounds")
        nums_input = [int(n) for n in re.findall(r"\d+", bounds_input)]
        y_input = (nums_input[1] + nums_input[3]) // 2

        # Ch·ªçn ViewGroup clickable c√≥ center Y > y_input v√† diff nh·ªè nh·∫•t (ngay d∆∞·ªõi)
        next_btn = None
        min_diff = None
        for g in clickable_groups:
            try:
                bounds = g.get_attribute("bounds")
                nums = [int(n) for n in re.findall(r"\d+", bounds)]
                y_center = (nums[1] + nums[3]) // 2
                if y_center > y_input:
                    diff = y_center - y_input
                    if min_diff is None or diff < min_diff:
                        min_diff = diff
                        next_btn = g
            except Exception:
                continue

        if next_btn:
            next_btn.click()
            log("üëâ ƒê√£ b·∫•m 'Next' (ViewGroup ngay d∆∞·ªõi √¥ nh·∫≠p email)")
            time.sleep(12)
        else:
            log("‚õî Kh√¥ng t√¨m th·∫•y n√∫t Next (ViewGroup d∆∞·ªõi √¥ nh·∫≠p email).")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        # 6) ================= Nh·∫≠p Full Name v√† Password =================
        pause_event.wait()
        log("‚úèÔ∏è B·∫Øt ƒë·∫ßu ƒëi·ªÅn h·ªç t√™n v√† m·∫≠t kh·∫©u (ADB CMD)...")
        try:
            # üìå Ch·ªù m√†n h√¨nh "Name and Password" xu·∫•t hi·ªán
            time.sleep(5)

            # ======= Sinh h·ªç t√™n KH√îNG D·∫§U ƒë·ªÉ ADB g√µ ƒë∆∞·ª£c =======
            ho_list = ["Nguyen", "Tran", "Le", "Pham", "Hoang", "Huynh", "Phan", "Vu", "Vo", "Dang", "Bui", "Do", "Ngo", "Ho", "Duong", "Dinh"]
            dem_list = ["Van", "Thi", "Minh", "Huu", "Quang", "Thanh", "Thu", "Anh", "Trung", "Phuc", "Ngoc", "Thao", "Khanh", "Tuan", "Hai"]
            ten_list = ["Hoang", "Ha", "Tu", "Trang", "Linh", "Duy", "Hung", "Tam", "Lan", "Phuong", "Quan", "My", "Long", "Nam", "Vy"]

            full_name = f"{random.choice(ho_list)} {random.choice(dem_list)} {random.choice(ten_list)}"
            safe_full_name = full_name.replace(" ", "%s")  # ƒë·ªïi kho·∫£ng tr·∫Øng cho adb
            password = random.choice(string.ascii_uppercase) + ''.join(
                random.choices(string.ascii_lowercase + string.digits, k=9)
            )

            udid = self.udid if hasattr(self, 'udid') else None
            if not udid:
                log("‚õî Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c UDID thi·∫øt b·ªã.")
                return False

            # ‚úèÔ∏è Tap v√†o √¥ H·ªç t√™n 2 l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o focus
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "400"])
            time.sleep(1)

            # üìù Nh·∫≠p h·ªç t√™n
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", safe_full_name])
            log(f"‚úÖ ƒê√£ ƒëi·ªÅn h·ªç t√™n: {full_name}")
            time.sleep(1.5)

            # üîë Tap v√†o √¥ M·∫≠t kh·∫©u v√† nh·∫≠p
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "500", "600"])
            time.sleep(1)
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", password])
            log(f"‚úÖ ƒê√£ ƒëi·ªÅn m·∫≠t kh·∫©u: {password}")
            time.sleep(1.5)

            # ‚úÖ ·∫®n b√†n ph√≠m ƒë·ªÉ tr√°nh che n√∫t Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "111"])
            time.sleep(0.8)

            # üëâ Tap ch√≠nh gi·ªØa n√∫t Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "900"])
            log("üëâ ƒê√£ b·∫•m 'Next' sau khi ƒëi·ªÅn h·ªç t√™n & m·∫≠t kh·∫©u.")
            time.sleep(8)

        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi ƒëi·ªÅn h·ªç t√™n v√† m·∫≠t kh·∫©u b·∫±ng ADB: {repr(e)}")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        
        # 7) ============================== Nh·∫≠p Tu·ªïi =====================================
        pause_event.wait()
        log("‚úèÔ∏è B·∫Øt ƒë·∫ßu b·ªè qua m√†n list age")
        try:
            # üëâ Tap Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1700"])
            log("üëâ ƒê√£ b·∫•m 'Next")
            time.sleep(3)
            
            # üëâ Tap OK
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1100"])
            log("üëâ ƒê√£ b·∫•m OK")
            time.sleep(4)

            # üëâ Tap Enter age
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1700"])
            log("üëâ ƒê√£ b·∫•m 'Enter age'")
            time.sleep(7)
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·ªè qua m√†n h√¨nh ch·ªçn tu·ªïi: {repr(e)}")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        
        # 8) =================== Nh·∫≠p tu·ªïi ng·∫´u nhi√™n ===================
        pause_event.wait()
        log("‚úèÔ∏è B·∫Øt ƒë·∫ßu nh·∫≠p tu·ªïi ng·∫´u nhi√™n (18 - 50)...")

        try:
            age = random.randint(18, 50)  # random tu·ªïi
            log(f"‚úÖ Tu·ªïi ƒë∆∞·ª£c ch·ªçn: {age}")

            # ‚úèÔ∏è Nh·∫≠p tu·ªïi
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", str(age)])
            log("‚úÖ ƒê√£ nh·∫≠p tu·ªïi th√†nh c√¥ng!")
            time.sleep(1.5)

            # üëâ Tap n√∫t Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "800"])
            log("üëâ ƒê√£ b·∫•m 'Next' sau khi nh·∫≠p tu·ªïi.")
            time.sleep(15)

        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi nh·∫≠p tu·ªïi: {repr(e)}")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        
        # 9) ====================== ·∫§n Next ƒë·ªÉ ho√†n t·∫•t ======================
        pause_event.wait()
        try:
            # üëâ Tap Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1550"])
            log("üëâ ƒê√£ b·∫•m 'Next'")
            time.sleep(25)
            log("üéâ Ho√†n t·∫•t ƒëƒÉng k√Ω Instagram Lite!")
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·ªè ·∫•n next ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω: {repr(e)}")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return
        
        # 10) ====================== ·∫§n Continue ƒë·ªÉ ho√†n t·∫•t ======================
        pause_event.wait()
        log("‚úèÔ∏è B·∫Øt ƒë·∫ßu ho√†n t·∫•t ƒëƒÉng k√Ω...")
        try:
            # üëâ Tap Continue
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1500"])
            log("üëâ ƒê√£ b·∫•m 'Next'")
            time.sleep(15)
            log("üéâ Ho√†n t·∫•t ƒëƒÉng k√Ω Instagram Lite!")
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·ªè ·∫•n next ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω: {repr(e)}")
            # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
            try:
                adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                adb_shell(self.udid, "svc", "wifi", "disable")
                adb_shell(self.udid, "svc", "data", "disable")
                log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

            self.log("üîÑ Restart phi√™n (Lite) v√¨ L·ªói‚Ä¶")
            self.stop()
            time.sleep(3)
            AndroidWorker(self.udid, log_fn=self.log).start()
            return

        # === T·∫Øt app v√† kh·ªüi ƒë·ªông l·∫°i Instagram Lite ===
        try:
            subprocess.call(["adb", "-s", udid, "shell", "am", "force-stop", "com.instagram.lite"])
            log("üõë ƒê√£ t·∫Øt app Instagram Lite")
            time.sleep(3)
            subprocess.call([
                "adb", "-s", udid, "shell", "monkey", "-p", "com.instagram.lite",
                "-c", "android.intent.category.LAUNCHER", "1"
            ])
            log("üîÑ ƒê√£ kh·ªüi ƒë·ªông l·∫°i app Instagram Lite")
            time.sleep(20)
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi restart Instagram Lite: {repr(e)}")

        # ========= V√ÄO PROFILE =========
        pause_event.wait()
        # üëâ V√ÄO PROFILE 
        subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "1030", "1700"])
        log("üëâ ƒê√£ v√†o Profile.")
        time.sleep(7)

        # --- L·∫•y Cookie ---
        try:
            # Debug: ki·ªÉm tra app Lite c√≥ ƒëang ch·∫°y
            try:
                running_apps = adb_shell(self.udid, "su", "-c", "ps | grep lite")
                self.log(f"üîç Instagram Lite processes: {running_apps[:100]}..." if running_apps else "üîç Kh√¥ng t√¨m th·∫•y Instagram Lite process")
            except Exception:
                pass

            # Debug: ki·ªÉm tra th∆∞ m·ª•c data
            try:
                data_check = adb_shell(self.udid, "su", "-c", "ls -la /data/data/com.instagram.lite/")
                self.log(f"üîç Instagram Lite data folder: {data_check[:150]}..." if data_check else "üîç Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c data c·ªßa Instagram Lite")
            except Exception:
                pass

            # G·ªçi h√†m l·∫•y cookie cho Lite
            cookie_str = self.get_instagram_lite_cookie()
            if cookie_str:
                self.log(f"üç™ Cookie (Lite): {cookie_str[:50]}..." if len(cookie_str) > 50 else f"üç™ Cookie (Lite): {cookie_str}")
            else:
                self.log("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c cookie (Lite)")
                cookie_str = ""
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi l·∫•y cookie (Lite): {repr(e)}")
            cookie_str = ""
        
        # ==== CHECK LIVE/DIE (Instagram Lite) ====
        try:
            global live_count, die_count

            # X√°c ƒë·ªãnh ƒë√£ v√†o Profile ch∆∞a
            in_profile = False
            try:
                # Instagram Lite c√≥ n√∫t "Edit profile" ho·∫∑c "Ch·ªânh s·ª≠a h·ªì s∆°"
                self.driver.find_element(
                    AppiumBy.XPATH,
                    '//*[@text="Edit profile" or @text="Ch·ªânh s·ª≠a h·ªì s∆°" or @text="Ch·ªânh s·ª≠a trang c√° nh√¢n" or contains(@content-desc,"Profile")]'
                )
                in_profile = True
            except Exception:
                in_profile = False

            # Ki·ªÉm tra checkpoint ho·∫∑c l·ªói b·∫£o m·∫≠t
            checkpoint = False
            try:
                self.driver.find_element(
                    AppiumBy.XPATH,
                    '//*[contains(@text,"Confirm you") or contains(@text,"Security") or contains(@text,"checkpoint")]'
                )
                checkpoint = True
            except Exception:
                pass

            # ƒê·∫∑t tr·∫°ng th√°i
            if checkpoint:
                status_text = "Die"
            elif in_profile:
                status_text = "Live"
            else:
                status_text = "Die"

            # L·∫•y username v√† cookie ƒë√£ c√≥
            username_safe = (locals().get("username")
                            or getattr(self, "username", "")
                            or "")
            current_cookie = cookie_str if 'cookie_str' in locals() and cookie_str else ""

            # Debug
            log(f"üîç Debug (Lite) - Username: {username_safe}")
            log(f"üîç Debug (Lite) - Cookie: {current_cookie[:30]}..." if current_cookie else "üîç Debug (Lite) - Cookie: EMPTY")

            if status_text == "Live":
                live_count += 1
                live_var.set(str(live_count))
                update_rate()
                log("‚úÖ Live (Lite) ‚Äî ch·ªâ ƒë·∫øm, kh√¥ng insert/l∆∞u")

            else:
                die_count += 1
                die_var.set(str(die_count))
                update_rate()
                log("‚ùå Die (Lite) ‚Äî insert & l∆∞u")

                # Insert v√†o TreeView
                try:
                    app.after(0, lambda: insert_to_tree("Die", username_safe, password, email, current_cookie, two_fa_code=""))
                except Exception:
                    insert_to_tree("Die", username_safe, password, email, current_cookie, two_fa_code="")

                # L∆∞u v√†o file Die.txt
                with open("Die.txt", "a", encoding="utf-8") as f:
                    f.write(f"{username_safe}|{password}|{email}|{current_cookie}|\n")
                log("üíæ ƒê√£ l∆∞u Die.txt (Lite)")
                log("‚úÖ ƒê√£ insert Die (Lite) l√™n TreeView")

                # B·∫≠t ch·∫ø ƒë·ªô m√°y bay r·ªìi kh·ªüi ƒë·ªông l·∫°i
                try:
                    adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
                    adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
                    adb_shell(self.udid, "svc", "wifi", "disable")
                    adb_shell(self.udid, "svc", "data", "disable")
                    log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite)")
                except Exception as e:
                    log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (Lite): {e}")

                self.log("üîÑ Restart phi√™n (Lite) v√¨ Die‚Ä¶")
                self.stop()
                time.sleep(3)
                AndroidWorker(self.udid, log_fn=self.log).start()
                return

        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi check live/die (Lite): {e}")

        time.sleep(3)

        # ================== B·∫¨T 2FA ( LITE ) ==================
        pause_event.wait()
        try:
            # üëâ Tap 3 g·∫°ch ( MENU )
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "1030", "150"])
            log("üëâ ƒê√£ b·∫•m 'Menu'")
            time.sleep(5)

            # üëâ Tap Settings
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "400"])
            log("üëâ ƒê√£ b·∫•m 'Settings'")
            time.sleep(5)

            # üëâ Tap Account Center
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "400"])
            log("üëâ ƒê√£ b·∫•m 'Account Center'")
            time.sleep(5)

            # üëâ Tap Password & Security
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1900"])
            log("üëâ ƒê√£ b·∫•m 'Password & Security'")
            time.sleep(5)

            # üëâ Tap TWO FACTOR 
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "900"])
            log("üëâ ƒê√£ b·∫•m 'TWO FACTOR'")
            time.sleep(5)

            # üëâ Ch·ªçn T√†i Kho·∫£n
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "600"])
            log("üëâ ƒê√£ Ch·ªçn T√†i Kho·∫£n")
            time.sleep(5)

            # üëâ Tap Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1850"])
            log("üëâ ƒê√£ b·∫•m 'Next'")
            time.sleep(5)

            # üëâ Copy Clipboard 
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1700"])
            log("üëâ ƒê√£ b·∫•m 'Copy Clipboard'")
            time.sleep(8)
            # Ô∏è‚É£ ƒê·ªçc secret 2FA t·ª´ clipboard (Instagram Lite)
            try:
                # l·∫•y text clipboard t·ª´ thi·∫øt b·ªã
                out = subprocess.check_output(
                    ["adb", "-s", udid, "shell", "dumpsys", "clipboard"],
                    encoding="utf-8",
                    errors="ignore"
                )
                # tr√≠ch secret
                m = re.search(r'([A-Z2-7]{8,})', out)
                secret_key = m.group(1).replace(" ", "") if m else None

                if secret_key:
                    log(f"üîë [{udid}] Secret 2FA t·ª´ clipboard: {secret_key}")
                else:
                    log(f"‚ö†Ô∏è [{udid}] Kh√¥ng t√¨m th·∫•y secret trong clipboard.")
                    return
            except Exception as e:
                log(f"‚ùå [{udid}] L·ªói l·∫•y secret 2FA: {e}")
                return

            # Ô∏è‚É£ Sinh OTP t·ª´ secret key
            try:
                totp = pyotp.TOTP(secret_key)
                otp_code = totp.now()
                log(f"‚úÖ [{udid}] OTP hi·ªán t·∫°i: {otp_code}")
            except Exception as e:
                log(f"‚ùå [{udid}] Kh√¥ng sinh ƒë∆∞·ª£c OTP t·ª´ secret: {e}")
                return

            # üëâ Tap Next
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1850"])
            log("üëâ ƒê√£ b·∫•m 'Next'")
            time.sleep(3)

            # üëâ Tap v√¥ √¥ nh·∫≠p code
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "700"])
            log("üëâ ƒê√£ b·∫•m 'V√†o √î Nh·∫≠p'")
            time.sleep(3)

            # Nh·∫≠p OTP v√†o √¥ text hi·ªán t·∫°i
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", otp_code])
            log(f"‚å®Ô∏è [{udid}] ƒê√£ nh·∫≠p m√£ OTP {otp_code}")

            # üëâ Tap Next 
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1850"])
            log("üëâ ƒê√£ b·∫•m 'Next'")
            time.sleep(12)

            # üëâ Tap Done
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "540", "1700"])
            log("üëâ ƒê√£ b·∫•m 'Done'")
            time.sleep(3)

        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·∫≠t 2FA (Lite): {repr(e)}")
            return
        
        # --- L∆∞u v√†o Live.txt (Lite) ---
        try:
            username_safe = (locals().get("username") or getattr(self, "username", "") or "")
            current_cookie = cookie_str if "cookie_str" in locals() and cookie_str else ""
            with open("Live.txt", "a", encoding="utf-8") as f:
                f.write(f"{username_safe}|{password}|{email}|{current_cookie}|{secret_key if secret_key else ''}\n")
            log("üíæ [Lite] ƒê√£ l∆∞u Live.txt (c√≥ th·ªÉ k√®m 2FA)")
        except Exception as e:
            log(f"‚ö†Ô∏è [Lite] L·ªói khi l∆∞u Live.txt: {repr(e)}")

        # --- Insert v√†o TreeView (Lite) ---
        try:
            tree_item_id = insert_to_tree("Live", username_safe, password, email, current_cookie, two_fa_code=secret_key if secret_key else "")
            self.tree_item_id = tree_item_id
            log("üå≥ [Lite] ƒê√£ insert Live v√†o TreeView")
        except Exception as e:
            log(f"‚ö†Ô∏è [Lite] L·ªói khi insert TreeView: {repr(e)}")

        time.sleep(4)

        # B·∫≠t ch·∫ø ƒë·ªô m√°y bay v√† t·ª± ch·∫°y l·∫°i phi√™n m·ªõi
        try:
            adb_shell(self.udid, "settings", "put", "global", "airplane_mode_on", "1")
            adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE", "--ez", "state", "true")
            adb_shell(self.udid, "am", "broadcast", "-a", "android.intent.action.AIRPLANE_MODE_CHANGED", "--ez", "state", "true")
            adb_shell(self.udid, "svc", "wifi", "disable")
            adb_shell(self.udid, "svc", "data", "disable")
            log("üõ´ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (LIVE)")
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi b·∫≠t Ch·∫ø ƒë·ªô m√°y bay (LIVE): {e}")
    
    # ================================== INSTAGRAM - CHROME ===============================================
    def signup_instagram_chrome(self):
        """
        M·ªü app Chrome tr√™n thi·∫øt b·ªã Android, x·ª≠ l√Ω c√°c m√†n h√¨nh ch√†o m·ª´ng
        (Continue ‚Üí More ‚Üí Got it) r·ªìi truy c·∫≠p trang ƒëƒÉng k√Ω Instagram.
        """
        d = self.driver
        udid = self.udid

        self.log("üöÄ ƒêang m·ªü Chrome v√† ch·ªù x·ª≠ l√Ω m√†n h√¨nh ch√†o m·ª´ng...")
        pkg = "com.android.chrome"

        # ƒê√°nh th·ª©c m√†n h√¨nh
        subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "224"])

        # Kh·ªüi ƒë·ªông Chrome
        try:
            d.start_activity(pkg, "com.google.android.apps.chrome.Main")
        except Exception:
            try:
                d.activate_app(pkg)
            except Exception:
                subprocess.call([
                    "adb", "-s", udid, "shell", "monkey", "-p", pkg,
                    "-c", "android.intent.category.LAUNCHER", "1"
                ])

        self.log("‚úÖ ƒê√£ m·ªü Chrome.")
        time.sleep(20)

        # === Helper: nh·∫•n n√∫t theo text ===
        def click_button_by_text(driver, texts, timeout=10):
            end = time.time() + timeout
            while time.time() < end:
                for t in texts:
                    try:
                        els = driver.find_elements(
                            AppiumBy.ANDROID_UIAUTOMATOR,
                            f'new UiSelector().className("android.widget.Button").textContains("{t}")'
                        )
                        if els:
                            els[0].click()
                            return f"‚úÖ ƒê√£ nh·∫•n '{t}'"
                    except Exception:
                        pass
                time.sleep(0.4)
            return "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t n√†o ph√π h·ª£p"

        # ·∫§n "Continue" ho·∫∑c "Use without an account"
        self.log("üîç ƒêang t√¨m n√∫t 'Continue' ho·∫∑c 'Use without an account' tr√™n Chrome...")
        try:
            result = click_button_by_text(d, ["Continue", "Next", "Ti·∫øp t·ª•c"])
            self.log(result)

            if "‚ö†Ô∏è" in result or "Kh√¥ng" in result:
                result2 = click_button_by_text(d, ["Use without an account", "S·ª≠ d·ª•ng m√† kh√¥ng c·∫ßn t√†i kho·∫£n"])
                self.log(result2)
                if "‚ö†Ô∏è" not in result2 and "Kh√¥ng" not in result2:
                    self.log("‚úÖ ƒê√£ nh·∫•n 'Use without an account'")
                else:
                    self.log("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y 'Continue' ho·∫∑c 'Use without an account' ‚Äî b·ªè qua.")
            else:
                self.log("‚úÖ ƒê√£ nh·∫•n 'Continue'")

            time.sleep(6)

        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω n√∫t 'Continue' ho·∫∑c 'Use without an account': {repr(e)}")

        # ·∫§n "More"
        self.log("üîç ƒêang t√¨m n√∫t 'More' tr√™n Chrome...")
        self.log(click_button_by_text(d, ["More", "Th√™m", "Next"]))
        time.sleep(5)

        # ·∫§n "Got it"
        self.log("üîç ƒêang t√¨m n√∫t 'Got it' tr√™n Chrome...")
        self.log(click_button_by_text(d, ["Got it", "ƒê√£ hi·ªÉu", "OK"]))
        time.sleep(8)

        # Truy c·∫≠p trang ƒëƒÉng k√Ω Instagram
        self.log("üåê ƒêang truy c·∫≠p trang ƒëƒÉng k√Ω Instagram tr√™n Chrome...")
        try:
            # üëâ Click v√†o thanh URL
            subprocess.call(["adb", "-s", udid, "shell", "input", "tap", "200", "250"])
            time.sleep(1.2)

            # üëâ G√µ ƒë·ªãa ch·ªâ trang ƒëƒÉng k√Ω Instagram
            subprocess.call([
                "adb", "-s", udid, "shell", "input", "text",
                "https://www.instagram.com/accounts/emailsignup/"
            ])
            time.sleep(1.2)

            # üëâ Nh·∫•n Enter ƒë·ªÉ truy c·∫≠p
            subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "66"])
            time.sleep(15)

            self.log("üåê ƒê√£ m·ªü trang ƒëƒÉng k√Ω Instagram tr·ª±c ti·∫øp trong Chrome.")
        except Exception as e:
            self.log(f"‚ö†Ô∏è Kh√¥ng m·ªü ƒë∆∞·ª£c trang ƒëƒÉng k√Ω Instagram: {e}")

        # ·∫§n "Sign up with email"
        self.log("üì© ƒêang t√¨m n√∫t 'Sign up with email' tr√™n Chrome...")
        self.log(click_button_by_text(d, ["Sign up with email", "ƒêƒÉng k√Ω b·∫±ng email"]))
        time.sleep(5)

        # === L·∫§Y EMAIL T·∫†M V√Ä NH·∫¨P V√ÄO FORM ===
        self.log("üìß ƒêang l·∫•y email t·∫°m ƒë·ªÉ ƒëƒÉng k√Ω...")

        # L·∫•y email t·∫°m t·ª´ Phone Settings (TempMailAsia ho·∫∑c DropMail)
        try:
            try:
                mode = self.var_mail_src.get().strip().lower()
            except Exception:
                mode = "tempasia"

            if mode == "dropmail":
                email, drop_session_id = get_dropmail_email()
                source = "dropmail"
            else:
                email = get_tempasia_email()
                drop_session_id = None
                source = "tempasia"

            if not email:
                self.log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c email t·∫°m.")
                return False

            self.log(f"üì® Email t·∫°m l·∫•y t·ª´ {source}: {email}")
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi l·∫•y email t·∫°m: {repr(e)}")
            return False

        # ƒêi·ªÅn email v√†o √¥ tr√™n Chrome
        self.log("‚å®Ô∏è ƒêang nh·∫≠p email v√†o √¥ ƒëƒÉng k√Ω tr√™n Chrome...")
        try:
            # Di chuy·ªÉn focus xu·ªëng v√πng n·ªôi dung n·∫øu Chrome ƒëang focus thanh t√¨m ki·∫øm
            subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "61"])  # TAB
            time.sleep(0.8)
            subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "61"])  # TAB l·∫ßn n·ªØa t·ªõi √¥ Email
            time.sleep(0.8)
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", email])
            time.sleep(1)
            self.log("‚úÖ ƒê√£ nh·∫≠p email v√†o form ƒëƒÉng k√Ω.")
        except Exception as e:
            self.log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ nh·∫≠p email: {repr(e)}")

        # üëâ Nh·∫•n "Next" ƒë·ªÉ ti·∫øp t·ª•c
        self.log("‚û°Ô∏è ƒêang t√¨m v√† nh·∫•n n√∫t 'Next' tr√™n Chrome...")
        try:
            self.log(click_button_by_text(d, ["Next", "Ti·∫øp theo"]))
            time.sleep(8)
        except Exception as e:
            self.log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ nh·∫•n n√∫t 'Next': {repr(e)}")

        # === X·ª¨ L√ù X√ÅC NH·∫¨N EMAIL TRONG CHROME ===
        self.log("üì© ƒêang x·ª≠ l√Ω b∆∞·ªõc x√°c nh·∫≠n email tr√™n Instagram...")

        # 1Ô∏è‚É£ ·∫§n "I didn't get the code"
        self.log("üîç ƒêang t√¨m n√∫t 'I didn‚Äôt get the code'...")
        self.log(click_button_by_text(d, ["I didn‚Äôt get the code", "T√¥i kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£"]))
        time.sleep(3)

        # 2Ô∏è‚É£ Ch·ªçn "Resend confirmation code"
        self.log("üîç ƒêang t√¨m n√∫t 'Resend confirmation code'...")
        self.log(click_button_by_text(d, ["Resend confirmation code", "G·ª≠i l·∫°i m√£ x√°c nh·∫≠n"]))
        time.sleep(10)  # ch·ªù email m·ªõi t·ªõi

        # 3Ô∏è‚É£ ƒê·ª£i l·∫•y code mail
        self.log("‚úèÔ∏è B·∫Øt ƒë·∫ßu l·∫•y m√£ x√°c minh email...")
        code = None
        try:
            if source == "dropmail":
                code = wait_for_dropmail_code(self, drop_session_id, max_checks=30, interval=3)
            else:
                code = wait_for_tempmail_code(email, max_checks=30, interval=2)
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi l·∫•y m√£ x√°c minh email: {repr(e)}")
            code = None

        if not code:
            self.log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ x√°c minh t·ª´ email.")
            return False

        self.log(f"‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c m√£ x√°c minh: {code}")

        # 4Ô∏è‚É£ Nh·∫≠p m√£ x√°c minh
        self.log("‚å®Ô∏è ƒêang nh·∫≠p m√£ x√°c minh v√†o √¥ tr√™n Chrome...")
        try:
            # R·ªùi kh·ªèi thanh t√¨m ki·∫øm, di chuy·ªÉn focus xu·ªëng √¥ nh·∫≠p code
            subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "61"])  # TAB
            time.sleep(0.8)
            subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "61"])  # TAB l·∫ßn n·ªØa t·ªõi √¥ Email
            time.sleep(0.8)

            # Nh·∫≠p m√£ x√°c minh
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", code])
            time.sleep(1)
            subprocess.call(["adb", "-s", udid, "shell", "input", "keyevent", "66"])  # ENTER
            self.log("‚úÖ ƒê√£ nh·∫≠p m√£ x√°c minh v√†o form.")
        except Exception as e:
            self.log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ nh·∫≠p m√£ x√°c minh: {repr(e)}")

        # 5Ô∏è‚É£ Nh·∫•n "Next"
        self.log("‚û°Ô∏è ƒêang t√¨m v√† nh·∫•n n√∫t 'Next' sau khi nh·∫≠p m√£...")
        try:
            result = click_button_by_text(d, ["Next", "Ti·∫øp theo"])
            self.log(result)
            if "‚ö†Ô∏è" in result or "Kh√¥ng" in result:
                self.log("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y n√∫t 'Next' ‚Äî c√≥ th·ªÉ ƒë√£ t·ª± chuy·ªÉn b∆∞·ªõc, b·ªè qua.")
            else:
                time.sleep(12)
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω n√∫t 'Next': {repr(e)}")

        # 6Ô∏è‚É£ T·∫°o v√† nh·∫≠p m·∫≠t kh·∫©u
        self.log("üîê ƒêang t·∫°o v√† nh·∫≠p m·∫≠t kh·∫©u ng·∫´u nhi√™n...")
        try:
            # T·∫°o m·∫≠t kh·∫©u ch·ªâ g·ªìm ch·ªØ hoa v√† th∆∞·ªùng
            password = ''.join(random.choice(string.ascii_letters) for _ in range(10))
            self.log(f"‚úÖ M·∫≠t kh·∫©u t·∫°o: {password}")

            # T√¨m √¥ nh·∫≠p password v√† ƒëi·ªÅn
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", password])
            time.sleep(4)

            self.log("‚úÖ ƒê√£ nh·∫≠p m·∫≠t kh·∫©u v√†o √¥ Password.")

            # üëâ Nh·∫•n "Next"
            self.log("‚û°Ô∏è ƒêang t√¨m v√† nh·∫•n n√∫t 'Next' sau khi nh·∫≠p m·∫≠t kh·∫©u...")
            result = click_button_by_text(d, ["Next", "Ti·∫øp theo"])
            self.log(result)
            time.sleep(8)

            if "‚ö†Ô∏è" in result or "Kh√¥ng" in result:
                self.log("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y n√∫t 'Next' ‚Äî b·ªè qua.")
            else:
                self.log("‚úÖ ƒê√£ nh·∫•n 'Next' th√†nh c√¥ng.")

        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi t·∫°o ho·∫∑c nh·∫≠p m·∫≠t kh·∫©u: {repr(e)}")

        # üëâ Nh·∫•n "Next" hai l·∫ßn li√™n ti·∫øp (Birthday screen)
        self.log("üéÇ ƒêang ·ªü b∆∞·ªõc nh·∫≠p ng√†y sinh ‚Äî nh·∫•n 'Next' hai l·∫ßn...")

        try:
            # L·∫ßn 1
            result1 = click_button_by_text(d, ["Next", "Ti·∫øp theo"])
            self.log(result1)
            time.sleep(2)

            # L·∫ßn 2
            result2 = click_button_by_text(d, ["Next", "Ti·∫øp theo"])
            self.log(result2)
            time.sleep(8)

        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi nh·∫•n 'Next' hai l·∫ßn: {repr(e)}")

        # === B∆Ø·ªöC NH·∫¨P TU·ªîI V√Ä NH·∫§N NEXT ===
        self.log("üéÇ ƒêang nh·∫≠p tu·ªïi ng·∫´u nhi√™n v√† nh·∫•n 'Next'...")

        age = random.randint(18, 50)

        try:
            # Nh·∫≠p tu·ªïi
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", str(age)])
            time.sleep(3)
            self.log(f"‚úÖ ƒê√£ nh·∫≠p tu·ªïi: {age}")

            # Nh·∫•n Next
            self.log("‚û°Ô∏è ƒêang nh·∫•n 'Next' sau khi nh·∫≠p tu·ªïi...")
            self.log(click_button_by_text(d, ["Next", "Ti·∫øp theo"]))
            time.sleep(6)

        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi nh·∫≠p tu·ªïi v√† nh·∫•n Next: {repr(e)}")

        # 6Ô∏è‚É£ N·∫øu xu·∫•t hi·ªán popup x√°c nh·∫≠n ng√†y sinh ‚Üí nh·∫•n OK
        self.log("üìÖ Ki·ªÉm tra popup x√°c nh·∫≠n ng√†y sinh...")
        try:
            result = click_button_by_text(d, ["OK", "ƒê·ªìng √Ω"])
            self.log(result)
            time.sleep(6)
        except Exception as e:
            self.log(f"‚ö†Ô∏è Kh√¥ng th·∫•y popup 'OK' ho·∫∑c kh√¥ng th·ªÉ nh·∫•n: {repr(e)}")

        # === B∆Ø·ªöC NH·∫¨P H·ªå T√äN V√Ä NH·∫§N NEXT ===
        self.log("üßæ ƒêang t·∫°o h·ªç t√™n ng·∫´u nhi√™n v√† nh·∫≠p v√†o...")

        # Danh s√°ch h·ªç, t√™n ƒë·ªám, t√™n ph·ªï bi·∫øn Vi·ªát Nam
        ho = ["Nguyen", "Tran", "Le", "Pham", "Hoang", "Vu", "Vo", "Dang", "Bui", "Do"]
        ten_dem = ["Van", "Thi", "Ngoc", "Minh", "Duc", "Thanh", "Phuong", "Quoc", "Hong", "Anh"]
        ten = ["Toan", "Huy", "Linh", "Nam", "Trang", "An", "Nhi", "Tuan", "Thao", "Khanh"]

        fullname = f"{random.choice(ho)} {random.choice(ten_dem)} {random.choice(ten)}"
        self.log(f"üìõ H·ªç t√™n ƒë∆∞·ª£c t·∫°o: {fullname}")

        try:
            # X·ª≠ l√Ω kho·∫£ng tr·∫Øng ƒë·ªÉ tr√°nh l·ªói adb
            safe_name = fullname.replace(" ", "\\ ")

            # Nh·∫≠p t√™n
            subprocess.call(["adb", "-s", udid, "shell", "input", "text", safe_name])
            time.sleep(3)
            self.log("‚úÖ ƒê√£ nh·∫≠p h·ªç t√™n v√†o form.")

            # Nh·∫•n Next
            self.log("‚û°Ô∏è ƒêang nh·∫•n 'Next' sau khi nh·∫≠p t√™n...")
            result = click_button_by_text(d, ["Next", "Ti·∫øp theo"])
            self.log(result)
            time.sleep(8)

        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi nh·∫≠p h·ªç t√™n v√† nh·∫•n Next: {repr(e)}")

        # === B∆Ø·ªöC T·∫†O USERNAME T·ª™ FULLNAME ===
        self.log("üë§ ƒêang ·∫•n Next ·ªü b∆∞·ªõc USERNAME...")

        try:
            # Nh·∫•n Next
            self.log(click_button_by_text(d, ["Next", "Ti·∫øp theo"]))
            time.sleep(8)
            self.log("‚úÖ ƒê√£ ·∫•n Next ·ªü b∆∞·ªõc USERNAME.")
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi nh·∫≠p username v√† nh·∫•n Next: {repr(e)}")

        # === B∆Ø·ªöC ƒê·ªíNG √ù CH√çNH S√ÅCH ===
        self.log("üìú ƒêang t√¨m v√† nh·∫•n 'I agree' ƒë·ªÉ ƒë·ªìng √Ω ƒëi·ªÅu kho·∫£n...")
        try:
            result = click_button_by_text(d, ["I agree", "T√¥i ƒë·ªìng √Ω"])
            self.log(result)
            time.sleep(25)
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi nh·∫•n 'I agree': {repr(e)}")

        return
    
    # ================================== DISPATCHER ============================================================
    def run_signup(self):
        app_choice = phone_ig_app_var.get() if "phone_ig_app_var" in globals() else "instagram"
        app_choice = (app_choice or "").lower()
        if app_choice == "instagram_lite":
            self.log("üöÄ B·∫Øt ƒë·∫ßu t·∫°o t√†i kho·∫£n tr√™n Instagram Lite")
            return self.signup_instagram_lite()
        elif app_choice == "chrome":
            self.log("üöÄ ƒêang m·ªü Chrome v√† truy c·∫≠p trang ƒëƒÉng k√Ω Instagram")
            return self.signup_instagram_chrome()
        else:
            self.log("üöÄ B·∫Øt ƒë·∫ßu t·∫°o t√†i kho·∫£n tr√™n Instagram")
            return self.signup_instagram()
    
#=================================== Chrome DESKTOP & MOBILE ===============================================
def clear_chrome_cache():
    try:
        user_data_dir = os.path.join(os.getcwd(), "ChromeData")
        if os.path.exists(user_data_dir):
            shutil.rmtree(user_data_dir)
            log("üßπ ƒê√£ x√≥a cache Chrome (User Data)")
        else:
            log("‚Ñπ Kh√¥ng c√≥ cache Chrome ƒë·ªÉ x√≥a")
    except Exception as e:
        log(f"‚ö†Ô∏è L·ªói khi x√≥a cache Chrome: {repr(e)}")

def type_text_slowly(element, text, delay=0.18):
    """G√µ t·ª´ng k√Ω t·ª± v·ªõi delay gi·ªØa m·ªói k√Ω t·ª±."""
    element.click()
    element.clear()
    for ch in text:
        element.send_keys(ch)
        time.sleep(delay)

def get_delay(key, default):
    # delay_entries was removed, return default values
    return default

def get_mobile_delay(key, default):
    # mobile_delay_entries was removed, return default values
    return default

def _set_container_enabled(container, enabled: bool):
    state = "normal" if enabled else "disabled"

    def walk(widget):
        # tk.*
        try:
            widget.configure(state=state)
        except Exception:
            # ttk.*
            try:
                if hasattr(widget, "state"):
                    widget.state(["!disabled"] if enabled else ["disabled"])
            except Exception:
                pass
        # Label ƒë·ªïi m√†u ƒë·ªÉ nh√¨n ra ƒëang b·ªã kh√≥a
        try:
            if isinstance(widget, (tk.Label, ttk.Label)):
                widget.configure(fg="black" if enabled else "#888")
        except Exception:
            pass
        for child in widget.winfo_children():
            walk(child)

    walk(container)

def _sync_mode_ui():
    """Kh√≥a/m·ªü Desktop Settings v√† Mobile Settings theo l·ª±a ch·ªçn ·ªü 'GIAO DI·ªÜN'."""
    mode = ui_mode_var.get().strip().lower()
    _set_container_enabled(desktop_settings, enabled=(mode == "desktop"))
    _set_container_enabled(mobile_settings,  enabled=(mode == "mobile"))
    _set_container_enabled(phone_settings,   enabled=(mode == "phone"))

# --- L·∫•y k√≠ch th∆∞·ªõc v√† scale Chrome DESKTOP ---
def get_chrome_size(default_w=1200, default_h=800):
    """L·∫•y k√≠ch th∆∞·ªõc Chrome cho Desktop"""
    try:
        w = int(desktop_size_combo.get().split("x")[0])
        h = int(desktop_size_combo.get().split("x")[1])
        # gi·ªõi h·∫°n t·ªëi thi·ªÉu ƒë·ªÉ tr√°nh l·ªói
        if w < 400: w = 400
        if h < 300: h = 300
        return w, h
    except:
        return default_w, default_h

def get_chrome_scale(default=1.0):
    """L·∫•y scale Chrome cho Desktop"""
    try:
        val = desktop_entry_scale.get().strip()
        if not val.isdigit():
            desktop_entry_scale.delete(0, tk.END)
            desktop_entry_scale.insert(0, "100")
            s = 100
        else:
            s = int(val)
        if s < 10: s = 10
        if s > 300: s = 300
        return s / 100.0
    except:
        return default

# --- L·∫•y k√≠ch th∆∞·ªõc v√† scale Chrome MOBILE ---
def get_chrome_size_mobile(default_w=375, default_h=667):
    """L·∫•y k√≠ch th∆∞·ªõc Chrome cho Mobile"""
    try:
        w = int(mobile_size_combo.get().split("x")[0])
        h = int(mobile_size_combo.get().split("x")[1])
        # gi·ªõi h·∫°n t·ªëi thi·ªÉu ƒë·ªÉ tr√°nh l·ªói
        if w < 400: w = 400
        if h < 300: h = 300
        return w, h
    except:
        return default_w, default_h

def get_chrome_scale_mobile(default=1.0):
    """L·∫•y scale Chrome cho Mobile"""
    try:
        s = int(mobile_entry_scale.get().strip())
        if s < 10: s = 10    # t·ªëi thi·ªÉu 10%
        if s > 300: s = 300  # t·ªëi ƒëa 300%
        return s / 100.0     # chuy·ªÉn % th√†nh s·ªë th·ª±c
    except:
        return default
    
# --- qu·∫£n l√Ω driver v√† t·∫°m d·ª´ng lu·ªìng ---
all_drivers = []
pause_event = threading.Event()
pause_event.set()  # M·∫∑c ƒë·ªãnh l√† ‚Äúcho ph√©p ch·∫°y‚Äù
warp_enabled = True
proxy_entry = None

def is_warp_mode():
    """Ki·ªÉm tra xem c√≥ ƒëang ·ªü ch·∫ø ƒë·ªô WARP (ch·ªâ 'warp', KH√îNG ph·∫£i 'warp-spin') kh√¥ng"""
    try:
        mode = ui_mode_var.get().strip().lower()
        if mode == "desktop":
            return network_mode_var.get() == "warp"
        elif mode == "mobile":
            return network_mode_mobile_var.get() == "warp"
        return False
    except:
        return False

# ==== Popup for Log & Tree ====
popup_win = None
log_text = None
 
live_count = 0
die_count = 0

# --- Bi·∫øn to√†n c·ª•c ---
ava_folder_path = ""

chrome_path = ""
used_positions = {} # driver: (x, y)
available_positions = []
cols = 6 # s·ªë c·ªôt
rows = 3 # s·ªë h√†ng
win_w = 320 # chi·ªÅu r·ªông c·ª≠a s·ªï
win_h = 360 # chi·ªÅu cao c·ª≠a s·ªï


for r in range(rows):
    for c in range(cols):
        x = c * win_w
        y = r * win_h
        available_positions.append((x, y))


pos_lock = threading.Lock()

def release_position(driver):
    try:
        with pos_lock:
            if driver in used_positions:
                del used_positions[driver]
    except Exception:
        pass

def choose_chrome_folder():
    global chrome_path
    folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ch·ª©a Chrome")
    if folder:
        chrome_path = os.path.join(folder, "chrome.exe")
        if os.path.isfile(chrome_path):
            print(f"üß≠ ƒê√£ ch·ªçn chrome t·∫°i: {chrome_path}")
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y chrome.exe trong th∆∞ m·ª•c n√†y.")
            chrome_path = ""

def arrange_after_open(driver, tries=40):
    time.sleep(1)
    # N·∫øu user ch·ªçn ·∫©n Chrome (headless) th√¨ kh√¥ng c·∫ßn s·∫Øp x·∫øp c·ª≠a s·ªï
    try:
        h = globals().get("hidden_chrome_var")
        if h and h.get():
            return
    except Exception:
        pass

    for _ in range(tries):
        try:
            # üîí l·∫•y v·ªã tr√≠ tr·ªëng trong l∆∞·ªõi
            with pos_lock:
                for pos in available_positions:
                    if pos not in used_positions.values():
                        driver.set_window_position(*pos)
                        used_positions[driver] = pos
                        break

            # ‚ö° set size m·∫∑c ƒë·ªãnh theo l∆∞·ªõi, s·ª≠ d·ª•ng get_chrome_size() n·∫øu c·∫ßn
            w, h = get_chrome_size()  # L·∫•y size t·ª´ GUI (ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh)
            driver.set_window_size(w, h)

            # ‚ö° set scale (gi·ªØ nguy√™n h√†m get_chrome_scale)
            try:
                scale = get_chrome_scale()  # L·∫•y scale t·ª´ GUI (ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh)
                driver.execute_cdp_cmd(
                    "Emulation.setPageScaleFactor",
                    {"pageScaleFactor": scale}
                )
                log(f"üîç Scale Chrome: {int(scale * 100)}%")
            except Exception as e:
                log(f"‚ö†Ô∏è Kh√¥ng ch·ªânh ƒë∆∞·ª£c scale: {repr(e)}")

            break
        except Exception:
            time.sleep(1)

format_fields = ["Username", "Pass", "Mail", "2FA", "Cookie"]
save_format  = ["Username", "Pass", "Mail", "Cookie", "2FA"]

def update_rate():
    try:
        live = int(live_var.get())
        die  = int(die_var.get())
        total = live + die
        if total > 0:
            rate = round((live / total) * 100, 2)
            rate_var.set(f"{rate}%")
        else:
            rate_var.set("0%")
    except Exception:
        rate_var.set("0%")

bio_index_seq = {"desktop": 0, "mobile": 0}  # ƒë·∫øm cho ch·∫ø ƒë·ªô tu·∫ßn t·ª±

def _lines_from_widget(widget):
    try:
        raw = widget.get("1.0", tk.END)
    except Exception:
        return []
    return [ln.strip() for ln in raw.splitlines() if ln.strip()]

# --- L∆∞u & Load config (d√πng 1 file config.json duy nh·∫•t) ---
CONFIG_FILE = "config.json"
def save_config():
    """L∆∞u t·∫•t c·∫£ config v√†o m·ªôt file config.json duy nh·∫•t"""
    cfg = {
        "ava_folder_path": globals().get("ava_folder_path", ""),
        "chrome_path": globals().get("chrome_path", ""),
        "save_format": globals().get("save_format", ""),
        "photo_folder_phone": globals().get("photo_folder_phone", ""),
        "ig_app_choice": globals().get("phone_ig_app_var", tk.StringVar(value="instagram")).get(),
        "scrcpy_path": globals().get("scrcpy_path", ""),
        "hidden_chrome": hidden_chrome_var.get(),
        "warp_controller_path": globals().get("warp_controller_path", ""),
        "warpxoay_path": globals().get("warpxoay_path", ""),
        "chrome_folder": globals().get("chrome_folder", ""),
        
        # Desktop Chrome Size
        "desktop_width": desktop_size_combo.get().split("x")[0] if 'desktop_entry_width' in globals() and desktop_size_combo else "1200",
        "desktop_height": desktop_size_combo.get().split("x")[1] if 'desktop_entry_height' in globals() and desktop_size_combo else "800",
        "desktop_scale": desktop_entry_scale.get() if 'desktop_entry_scale' in globals() and desktop_entry_scale else "100",
        
        # Mobile Chrome Size
        "mobile_width": entry_width_m.get() if 'entry_width_m' in globals() and entry_width_m else "400",
        "mobile_height": entry_height_m.get() if 'entry_height_m' in globals() and entry_height_m else "844",
        "mobile_scale": entry_scale_m.get() if 'entry_scale_m' in globals() and entry_scale_m else "100",
    }
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(cfg, f, ensure_ascii=False, indent=2)

def load_config():
    """Load t·∫•t c·∫£ config t·ª´ m·ªôt file config.json duy nh·∫•t"""
    global ava_folder_path, chrome_path, save_format, photo_folder_phone, scrcpy_path
    global warp_controller_path, warpxoay_path, chrome_folder
    config_file = CONFIG_FILE
    if os.path.exists(config_file):
        try:
            with open(config_file, "r", encoding="utf-8") as f:
                cfg = json.load(f)
                ava_folder_path = cfg.get("ava_folder_path", "")
                chrome_path = cfg.get("chrome_path", "")
                save_format = cfg.get("save_format", "")
                photo_folder_phone = cfg.get("photo_folder_phone", "")
                scrcpy_path = cfg.get("scrcpy_path", "")
                warp_controller_path = cfg.get("warp_controller_path", "")
                warpxoay_path = cfg.get("warpxoay_path", "")
                chrome_folder = cfg.get("chrome_folder", "")
                
                if "ig_app_choice" in cfg:
                    try:
                        phone_ig_app_var.set(cfg["ig_app_choice"])
                    except Exception:
                        pass
                if "hidden_chrome" in cfg:
                    try:
                        hidden_chrome_var.set(cfg["hidden_chrome"])
                    except Exception:
                        pass
                
                # Load Desktop Chrome Size
                if "desktop_width" in cfg and 'desktop_entry_width' in globals() and desktop_size_combo:
                    try:
                        desktop_size_combo.delete(0, tk.END)
                        desktop_size_combo.insert(0, f"{cfg['desktop_width']}x{cfg['desktop_height']}")
                    except Exception:
                        pass

                if "desktop_height" in cfg and 'desktop_entry_height' in globals() and desktop_size_combo:
                    try:
                        desktop_size_combo.delete(0, tk.END)
                        desktop_size_combo.insert(0, f"{cfg['desktop_width']}x{cfg['desktop_height']}")
                    except Exception:
                        pass
                
                if "desktop_scale" in cfg and 'desktop_entry_scale' in globals() and desktop_entry_scale:
                    try:
                        desktop_entry_scale.delete(0, tk.END)
                        desktop_entry_scale.insert(0, cfg["desktop_scale"])
                    except Exception:
                        pass
                
                # Load Mobile Chrome Size
                if "mobile_width" in cfg and 'entry_width_m' in globals() and entry_width_m:
                    try:
                        entry_width_m.delete(0, tk.END)
                        entry_width_m.insert(0, cfg["mobile_width"])
                    except Exception:
                        pass
                
                if "mobile_height" in cfg and 'entry_height_m' in globals() and entry_height_m:
                    try:
                        entry_height_m.delete(0, tk.END)
                        entry_height_m.insert(0, cfg["mobile_height"])
                    except Exception:
                        pass
                
                if "mobile_scale" in cfg and 'entry_scale_m' in globals() and entry_scale_m:
                    try:
                        entry_scale_m.delete(0, tk.END)
                        entry_scale_m.insert(0, cfg["mobile_scale"])
                    except Exception:
                        pass
                
                if ava_folder_path:
                    log(f"üìÇ ƒê√£ load th∆∞ m·ª•c ·∫£nh: {ava_folder_path}")
                if chrome_path:
                    log(f"üåê ƒê√£ load Chrome: {chrome_path}")
                if photo_folder_phone:
                    log(f"üìÇ ƒê√£ load folder ·∫£nh (Phone): {photo_folder_phone}")
                if scrcpy_path:
                    _log_scrcpy_path(scrcpy_path)
                if warp_controller_path:
                    log(f"üîß ƒê√£ load WARP Controller: {warp_controller_path}")
        except Exception as e:
            log(f"‚ö† Kh√¥ng load ƒë∆∞·ª£c config.json: {e}")

def _log_scrcpy_path(p: str):
    # log path r√∫t g·ªçn cho g·ªçn UI
    if not p:
        log("‚ö†Ô∏è scrcpy: ch∆∞a c·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n.")
        return
    short = (p if len(p) <= 72 else f"{p[:30]} ... {p[-30:]}")
    log(f"üß≠ scrcpy path: {short}")

def load_scrcpy_config():
    load_config()

def save_scrcpy_config():
    save_config()

scrcpy_path = ""
resolution = "360x640"

# ====== insert tree ======
def insert_to_tree(status_text, username, password, email, cookie_str, two_fa_code=""):
    try:
        status_lower = str(status_text).lower()
        if status_lower == "live":
            status_tag = "LIVE"
        elif status_lower == "die":
            status_tag = "DIE"

        phone_val  = ""  # ho·∫∑c l·∫•y t·ª´ bi·∫øn c·ªßa b·∫°n n·∫øu c√≥
        token_val  = ""  # ƒë·ªÉ tr·ªëng
        two_fa_val = two_fa_code if two_fa_code else ""

        item_id = tree.insert(
            "", "end",
            values=(
                len(tree.get_children())+1,   # STT
                status_text,                  # TR·∫†NG TH√ÅI
                username, password, email,
                phone_val, cookie_str,
                two_fa_val, token_val,
                "127.0.0.1", "NoProxy",
                "LIVE" if status_tag == "LIVE" else "",
                "DIE"  if status_tag == "DIE"  else "",
                "",  # FOLLOW - s·∫Ω update sau
                "",  # POST
                "",  # AVATAR
                "",  # GENDER
                "",  # BIO
                "",  # PROFESSIONAL
            ),
            tags=(status_tag,)
        )
        log(f"‚úÖ ƒê√£ insert {status_text} l√™n TreeView: {username}")
        return item_id  # Tr·∫£ v·ªÅ item_id ƒë·ªÉ update sau
    except Exception as e:
        log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m v√†o Treeview (helper): {repr(e)}")
        return None

def update_tree_column(item_id, column_name, value):
    """Update m·ªôt c·ªôt c·ª• th·ªÉ trong TreeView"""
    try:
        if not item_id:
            return
        cols = ["STT","TR·∫†NG TH√ÅI","USERNAME","PASS","MAIL","PHONE","COOKIE","2FA","TOKEN","IP","PROXY","LIVE","DIE","FOLLOW","POST","AVATAR","GENDER","BIO","PROFESSIONAL"]
        col_index = cols.index(column_name)
        current_values = list(tree.item(item_id, "values"))
        current_values[col_index] = value
        tree.item(item_id, values=current_values)
        log(f"üìù Updated {column_name} = {value}")
    except Exception as e:
        log(f"‚ö†Ô∏è L·ªói khi update tree column {column_name}: {e}")

# --- Ch·ªçn Chrome ---
def select_chrome():
    global chrome_path
    # M·ªü h·ªôp tho·∫°i ch·ªçn th∆∞ m·ª•c
    folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ch·ª©a Chrome")
    
    if folder:
        # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp chrome.exe trong th∆∞ m·ª•c ƒë√£ ch·ªçn
        chrome_path = os.path.join(folder, "chrome.exe")
        
        # Ki·ªÉm tra xem chrome.exe c√≥ t·ªìn t·∫°i trong th∆∞ m·ª•c kh√¥ng
        if os.path.isfile(chrome_path):
            log(f"üß≠ ƒê√£ ch·ªçn chrome t·∫°i: {chrome_path}")
        else:
            # N·∫øu kh√¥ng t√¨m th·∫•y chrome.exe, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y chrome.exe trong th∆∞ m·ª•c n√†y.")
            chrome_path = ""  # ƒê·∫∑t l·∫°i gi√° tr·ªã c·ªßa chrome_path n·∫øu kh√¥ng t√¨m th·∫•y t·ªáp chrome.exe

# --- Ch·ªçn ƒë·ªãnh d·∫°ng l∆∞u ---
def update_save_format():
    global save_format
    save_format = [cb.get() for cb in format_boxes if cb.get()]
    save_config()
    log(f"üíæ ƒê·ªãnh d·∫°ng l∆∞u: {'|'.join(save_format)}")
    
def select_ava_folder():
    global ava_folder_path
    folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ·∫£nh avatar")
    if folder:
        ava_folder_path = folder
        save_config()
        log(f"‚úÖ ƒê√£ ch·ªçn th∆∞ m·ª•c ·∫£nh: {ava_folder_path}")

# H√†m N√∫t kh·ªüi ƒë·ªông l·∫°i
def restart_tool():
    try:
        # ƒê√≥ng t·∫•t c·∫£ Chrome ƒëang ch·∫°y
        subprocess.run("taskkill /F /IM chrome.exe", shell=True)
        log("üõë ƒê√£ ƒë√≥ng Chrome.")

        # L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi c·ªßa file .py hi·ªán t·∫°i
        script_path = os.path.realpath(__file__)   # lu√¥n ra ƒë√∫ng V3 BackUP.py
        python_exe = sys.executable

        # Gh√©p l·ªánh restart
        cmd = f'"{python_exe}" "{script_path}"'

        log(f"üîÅ ƒêang kh·ªüi ƒë·ªông l·∫°i tool...\n‚û° CMD: {cmd}")
        subprocess.Popen(cmd, shell=True)

        # Tho√°t tool hi·ªán t·∫°i
        os._exit(0)

    except Exception as e:
        log(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i tool: {repr(e)}")

def pause():
    pause_event.clear()
    log("‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng t·∫•t c·∫£ lu·ªìng.")

def resume():
    pause_event.set()
    log("‚ñ∂Ô∏è Ti·∫øp t·ª•c ch·∫°y c√°c lu·ªìng.")


def log(message):
    # log_text ƒë∆∞·ª£c t·∫°o sau; ƒë·∫£m b·∫£o h√†m g·ªçi ch·ªâ sau khi GUI t·∫°o xong
    try:
        log_text.config(state=tk.NORMAL)
        log_text.insert(tk.END, f"{message}\n")
        log_text.yview(tk.END)
        log_text.config(state=tk.DISABLED)
    except Exception:
        print(message)

# === H√†m ƒëi·ªÅu khi·ªÉn WARP ===

def warp_on():
    try:
        subprocess.run(["warp-cli", "connect"], check=True)
        log("üåê ƒê√£ b·∫≠t Cloudflare WARP")
        time.sleep(3)
    except Exception as e:
        log(f"‚ùå L·ªói b·∫≠t WARP: {repr(e)}")

def warp_off():
    try:
        subprocess.run(["warp-cli", "disconnect"], check=True)
        log("üåê ƒê√£ t·∫Øt Cloudflare WARP")
        time.sleep(3)
    except Exception as e:
        log(f"‚ùå L·ªói t·∫Øt WARP: {repr(e)}")

def warp_change_ip():
    try:
        log("üîÑ ƒêang ƒë·ªïi IP WARP...")
        subprocess.run(["warp-cli", "disconnect"], check=True)
        time.sleep(2)
        subprocess.run(["warp-cli", "connect"], check=True)
        time.sleep(3)
        ip = requests.get("https://api.ipify.org").text
        log(f"‚úÖ IP WARP m·ªõi: {ip}")
    except Exception as e:
        log(f"‚ùå L·ªói ƒë·ªïi IP WARP: {repr(e)}")

def toggle_warp():
    """H√†m n√†y v·∫´n gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©, nh∆∞ng gi·ªù d√πng RadioButton network_mode_var"""
    global warp_enabled
    warp_enabled = not warp_enabled
    if warp_enabled:
        log("üåê WARP mode ENABLED - s·∫Ω d√πng WARP, b·ªè qua proxy.")
        try:
            network_mode_var.set("warp")  # T·ª± ƒë·ªông set RadioButton v·ªÅ WARP
        except:
            pass
    else:
        log("üåê WARP mode DISABLED - s·∫Ω d√πng proxy n·∫øu c√≥.")
        try:
            network_mode_var.set("proxy")  # T·ª± ƒë·ªông set RadioButton v·ªÅ PROXY
        except:
            pass

def run_phone_android():
    try:
        log("üöÄ [Phone] Kh·ªüi ƒë·ªông Appium server‚Ä¶")
        if not start_appium_server():
            log("‚ùå [Phone] Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Appium. Vui l√≤ng c√†i appium ho·∫∑c ki·ªÉm tra PATH.")
            return
        log(f"‚úÖ [Phone] Appium OK t·∫°i {APPIUM_HOST}:{APPIUM_PORT}")

        # 1) ∆ØU TI√äN: l·∫•y theo c·ªôt "CH·ªåN" trong b·∫£ng 3 c·ªôt
        selected = []
        if 'get_checked_udids' in globals():
            selected = get_checked_udids("pick")  # c√°c UDID ƒë√£ tick c·ªôt CH·ªåN

        if not selected:
            devices = adb_devices()
            if not devices:
                log("‚õî [Phone] Kh√¥ng ph√°t hi·ªán thi·∫øt b·ªã Android (adb devices tr·ªëng).")
                log("‚û° B·∫≠t USB debugging, c·∫Øm c√°p, ƒë·ªìng √Ω RSA, r·ªìi ch·∫°y l·∫°i.")
                return
            selected = devices

        log(f"üì± [Phone] Thi·∫øt b·ªã d√πng: {', '.join(selected)}")

        # Kh·ªüi ch·∫°y 1 worker/thi·∫øt b·ªã
        for udid in selected:
            if not pause_event.is_set():
                pause_event.wait()
            w = AndroidWorker(udid, log_fn=log)
            w.start()
            log(f"‚ñ∂Ô∏è [Phone] ƒê√£ start worker cho {udid}")
            time.sleep(0.6)

        # (Tu·ª≥ ch·ªçn) n·∫øu b·∫°n mu·ªën t·ª± m·ªü scrcpy cho c√°c m√°y ƒë√£ tick c·ªôt VIEW:
        try:
            if 'get_checked_udids' in globals() and 'open_scrcpy_for_list' in globals():
                view_list = get_checked_udids("view")
                if view_list:
                    open_scrcpy_for_list(view_list)
        except Exception:
            pass

    except Exception as e:
        log(f"‚ùå [Phone] L·ªói t·ªïng run_phone_android: {repr(e)}")

# >>> ADD: Mobile Chrome builder (standalone)
def build_mobile_chrome_driver(proxy: str | None, log_fn=log):
    """
    T·∫°o Chrome ·ªü ch·∫ø ƒë·ªô Mobile (emulate iPhone) d√†nh cho ch·∫ø ƒë·ªô Desktop/Mobile.
    - Kh√¥ng ƒë·ª•ng t·ªõi Appium/ADB/WARP app Android.
    - Lu√¥n d√πng Selenium Chrome (se_webdriver.Chrome).
    """
    chrome_path   = globals().get("chrome_path", "")  # path ƒë·∫øn chrome.exe n·∫øu user ch·ªçn
    warp_enabled  = bool(globals().get("warp_enabled", False))
    all_drivers   = globals().get("all_drivers", None)
    arrange_after = globals().get("arrange_after_open", None)

    mobile_options = Options()
    mobile_options.add_argument("--disable-blink-features=AutomationControlled")
    mobile_options.add_argument("--no-first-run")
    mobile_options.add_argument("--disable-background-networking")
    mobile_options.add_argument("--disable-background-timer-throttling")
    mobile_options.add_argument("--disable-client-side-phishing-detection")

    # Th√™m headless n·∫øu ƒë∆∞·ª£c ch·ªçn
    try:
        if globals().get("hidden_chrome_var") and hidden_chrome_var.get():
            # Chrome hi·ªán t·∫°i khuy·∫øn ngh·ªã d√πng '--headless=new' n·∫øu h·ªó tr·ª£
            try:
                mobile_options.add_argument("--headless=new")
            except Exception:
                mobile_options.add_argument("--headless")
            # m·ªôt v√†i option b·ªï sung cho ch·∫°y headless ·ªïn ƒë·ªãnh tr√™n Windows
            mobile_options.add_argument("--disable-gpu")
            mobile_options.add_argument("--disable-dev-shm-usage")
            mobile_options.add_argument("--no-sandbox")
            # c√≥ th·ªÉ set window-size ƒë·ªÉ tr√°nh layout kh√°c bi·ªát trong headless
            mobile_options.add_argument("--window-size=390,844")
    except Exception:
        pass

    # Emulate iPhone 15 Pro (UA + viewport)
    # L·∫•y k√≠ch th∆∞·ªõc t·ª´ Mobile Settings
    try:
        mobile_width = int(entry_width_m.get()) if entry_width_m and entry_width_m.get() else 390
        mobile_height = int(entry_height_m.get()) if entry_height_m and entry_height_m.get() else 844
    except:
        mobile_width = 390
        mobile_height = 844
    
    mobile_emulation = {
        "deviceMetrics": {"width": mobile_width, "height": mobile_height, "pixelRatio": 3.0},
        "userAgent": (
            "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) "
            "AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/137.0.0.0 "
            "Mobile/15E148 Safari/604.1"
        )
    }
    mobile_options.add_experimental_option("mobileEmulation", mobile_emulation)

    # Proxy: ch·ªâ √°p n·∫øu kh√¥ng b·∫≠t WARP (PC) v√† c√≥ proxy
    # Ch·∫•p nh·∫≠n 'http://x:y', 'socks5://x:y' ho·∫∑c ch·ªâ 'host:port' (m·∫∑c ƒë·ªãnh http)
    if not warp_enabled and proxy:
        if "://" not in proxy:
            proxy = f"http://{proxy}"
        mobile_options.add_argument(f"--proxy-server={proxy}")

    # N·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn binary chrome
    if chrome_path:
        mobile_options.binary_location = chrome_path

    # Chromedriver:
    # - N·∫øu c√≥ chromedriver.exe c·∫°nh file, d√πng n√≥
    # - N·∫øu kh√¥ng, ƒë·ªÉ tr·ªëng ƒë·ªÉ Selenium t·ª± t√¨m trong PATH
    driver_path = os.path.join(os.getcwd(), "chromedriver.exe")
    if os.path.isfile(driver_path):
        service = Service(driver_path)
    else:
        service = Service()  # d√πng chromedriver trong PATH

    # ‚ùó Quan tr·ªçng: d√πng Selenium webdriver, KH√îNG d√πng appium.webdriver
    drv = se_webdriver.Chrome(service=service, options=mobile_options)

    # Qu·∫£n l√Ω danh s√°ch + s·∫Øp x·∫øp c·ª≠a s·ªï (n·∫øu c√≥ helper)
    try:
        if isinstance(all_drivers, list):
            all_drivers.append(drv)
        # Ch·ªâ ch·∫°y arrange_after n·∫øu helper t·ªìn t·∫°i v√† CH∆ØA b·∫≠t headless
        try:
            is_hidden = globals().get("hidden_chrome_var") and hidden_chrome_var.get()
        except Exception:
            is_hidden = False
        if callable(arrange_after) and not is_hidden:
            threading.Thread(target=arrange_after, args=(drv,), daemon=True).start()
    except Exception:
        pass

    if log_fn:
        log_fn("üì± Chrome Mobile ƒë√£ kh·ªüi t·∫°o (emulation iPhone).")
    return drv

def start_process():
    global sync_barrier, thread_list
    # M·ªü m·ªôt c·ª≠a s·ªï m·ªõi khi nh·∫•n START
    try:
        win = tk.Toplevel(app)
        win.title("Qu·∫£n L√Ω Reg - START")
        win.geometry("1700x650")
        
        # ·∫®n c·ª≠a s·ªï ch√≠nh khi m·ªü c·ª≠a s·ªï m·ªõi
        app.withdraw()
        
        # ƒê·ªãnh nghƒ©a h√†m x·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï
        def on_closing():
            try:
                # Hi·ªán l·∫°i c·ª≠a s·ªï ch√≠nh
                app.deiconify()
                # ƒê√≥ng c·ª≠a s·ªï m·ªõi
                win.destroy()
            except:
                pass
        
        # G√°n s·ª± ki·ªán ƒë√≥ng c·ª≠a s·ªï
        win.protocol("WM_DELETE_WINDOW", on_closing)

        # Live/Die/Rate
        status_frame = tk.Frame(win, bg="white")
        status_frame.pack(side="bottom", anchor="w", pady=5, padx=5)
        rog_font = ("ROG Fonts STRIX SCAR", 13, "bold")
        tk.Label(status_frame, text="LIVE:", fg="green", bg="white", font=rog_font).grid(row=0, column=0, padx=5)
        tk.Label(status_frame, textvariable=live_var, fg="green", bg="white", font=rog_font).grid(row=0, column=1, padx=5)
        tk.Label(status_frame, text="DIE:",  fg="red",   bg="white", font=rog_font).grid(row=0, column=2, padx=5)
        tk.Label(status_frame, textvariable=die_var,  fg="red",   bg="white", font=rog_font).grid(row=0, column=3, padx=5)
        tk.Label(status_frame, text="RATE:", fg="blue",  bg="white", font=rog_font).grid(row=0, column=6, padx=5)
        tk.Label(status_frame, textvariable=rate_var, fg="blue",  bg="white", font=rog_font).grid(row=0, column=7, padx=5)

        # Accounts (Tree) n·∫±m tr√™n, Logs n·∫±m d∆∞·ªõi
        main_frame = tk.Frame(win, bg="white")
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        tree_frame = tk.LabelFrame(main_frame, text="Accounts", bg="white", font=("Arial", 10, "bold"))
        tree_frame.pack(side="top", fill="both", expand=True, padx=5, pady=(0,5))

        cols = ["STT","TR·∫†NG TH√ÅI","USERNAME","PASS","MAIL","PHONE","COOKIE","2FA","TOKEN","IP","PROXY","LIVE","DIE","FOLLOW","POST","AVATAR","GENDER","BIO","PROFESSIONAL"]
        global tree
        tree = ttk.Treeview(tree_frame, columns=cols, show="headings", height=12)
        vsb = ttk.Scrollbar(tree_frame, orient="vertical",   command=tree.yview);  tree.configure(yscrollcommand=vsb.set); vsb.pack(side="right",  fill="y")
        hsb = ttk.Scrollbar(tree_frame, orient="horizontal", command=tree.xview);  tree.configure(xscrollcommand=hsb.set); hsb.pack(side="bottom", fill="x")
        tree.pack(fill="both", expand=True)

        for col in cols:
            tree.heading(col, text=col, anchor="center")
            tree.column(col, width=120, anchor="center")

        tree.tag_configure("LIVE", background="lightgreen")
        tree.tag_configure("DIE",  background="tomato")

        log_frame = tk.LabelFrame(main_frame, text="Logs", bg="white")
        log_frame.pack(side="top", fill="x", padx=5, pady=(0,5))
        global log_text
        log_text = scrolledtext.ScrolledText(log_frame, width=58, height=12, state=tk.DISABLED, bg="black", fg="lime")
        log_text.pack(fill="both", expand=True, padx=5, pady=5)

        # Th√™m n√∫t PAUSE, NEXT v√† STOP n·∫±m ngang nhau v√†o c·ª≠a s·ªï m·ªõi
        btn_frame = tk.Frame(win, bg="white")
        btn_frame.pack(side="bottom", anchor="center", pady=10)
        
        def stop_all():
            """D·ª´ng to√†n b·ªô phi√™n v√† ƒë√≥ng c·ª≠a s·ªï ngay l·∫≠p t·ª©c"""
            try:
                # Hi·ªán l·∫°i c·ª≠a s·ªï ch√≠nh
                app.deiconify()
                # ƒê√≥ng c·ª≠a s·ªï NGAY L·∫¨P T·ª®C
                win.destroy()
                
                # Ch·∫°y cleanup trong background thread ƒë·ªÉ kh√¥ng block UI
                def cleanup():
                    try:
                        log("üõë ƒêang d·ª´ng to√†n b·ªô phi√™n...")
                        
                        # === Desktop/Mobile: Kill Chrome ===
                        try:
                            subprocess.Popen("taskkill /F /IM chrome.exe", shell=True, 
                                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                        except:
                            pass
                        
                        # D·ª´ng t·∫•t c·∫£ Chrome drivers
                        for drv in all_drivers:
                            try:
                                drv.quit()
                            except:
                                pass
                        all_drivers.clear()
                        
                        # === Phone: D·ª´ng Android/Appium ===
                        # D·ª´ng Instagram app tr√™n t·∫•t c·∫£ thi·∫øt b·ªã
                        try:
                            devices = adb_devices() if 'adb_devices' in globals() else []
                            for udid in devices:
                                try:
                                    subprocess.Popen(["adb", "-s", udid, "shell", "am", "force-stop", "com.instagram.android"],
                                                   stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                                    subprocess.Popen(["adb", "-s", udid, "shell", "am", "force-stop", "com.instagram.lite"],
                                                   stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                                except:
                                    pass
                            log("üì± ƒê√£ d·ª´ng Instagram tr√™n c√°c thi·∫øt b·ªã Android.")
                        except:
                            pass
                        
                        # Kill Appium server
                        try:
                            subprocess.Popen("taskkill /F /IM node.exe /FI \"WINDOWTITLE eq *appium*\"", shell=True,
                                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                            log("üõë ƒê√£ d·ª´ng Appium server.")
                        except:
                            pass
                        
                        # D·ª´ng t·∫•t c·∫£ threads
                        for t in thread_list:
                            try:
                                if hasattr(t, '_stop'):
                                    t._stop()
                            except:
                                pass
                        
                        log("‚úÖ ƒê√£ d·ª´ng to√†n b·ªô phi√™n.")
                        
                        # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ cleanup ho√†n t·∫•t
                        time.sleep(1)
                        
                        # Kh·ªüi ƒë·ªông l·∫°i tool
                        log("üîÅ ƒêang kh·ªüi ƒë·ªông l·∫°i tool...")
                        restart_tool()
                        
                    except Exception as e:
                        log(f"‚ö†Ô∏è L·ªói khi cleanup: {e}")
                
                # Ch·∫°y cleanup trong thread ri√™ng
                threading.Thread(target=cleanup, daemon=True).start()
                
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi d·ª´ng phi√™n: {e}")
                try:
                    win.destroy()
                except:
                    pass
        
        pause_btn = tk.Button(btn_frame, text="PAUSE", width=15, bg="red", fg="white", font=rog_font, command=pause)
        next_btn = tk.Button(btn_frame, text="NEXT", width=15, bg="orange", fg="white", font=rog_font, command=resume)
        stop_btn = tk.Button(btn_frame, text="STOP", width=15, bg="darkred", fg="white", font=rog_font, command=stop_all)
        pause_btn.pack(side="left", padx=5)
        next_btn.pack(side="left", padx=5)
        stop_btn.pack(side="left", padx=5)
    except Exception as e:
        log(f"‚ùå L·ªói khi m·ªü c·ª≠a s·ªï m·ªõi: {e}")


    mode = ui_mode_var.get().strip().lower()
    if mode == "phone":
        # Phone mode does not use thread count
        pause_event.wait()
        threading.Thread(target=run_phone_android, daemon=True).start()
        return

    # Only validate thread count for Desktop/Mobile
    try:
        if mode == "desktop":
            num_threads = int(desktop_threads_entry.get())
        elif mode == "mobile":
            num_threads = int(mobile_threads_entry.get())
        else:
            num_threads = int(threads_entry.get())
    except:
        log("‚ùå S·ªë lu·ªìng kh√¥ng h·ª£p l·ªá.")
        return

    # === Desktop/Mobile (Selenium) ===
    sync_barrier = threading.Barrier(num_threads)
    thread_list = []
    pause_event.wait()

    target_fn = run_mobile if mode == "mobile" else run

    def run_wrapper(tid):
        try:
            target_fn(tid)
        except Exception as e:
            log(f"‚ùå L·ªói {target_fn.__name__} ·ªü lu·ªìng {tid}: {repr(e)}")

    for i in range(num_threads):
        t = threading.Thread(target=run_wrapper, args=(i+1,), daemon=True)
        t.start()
        thread_list.append(t)
        time.sleep(1)

# ============== Email temp-mail.asia ==============
def get_tempasia_email():
    url = "https://free.priyo.email/api/random-email/7jkmE5NM2VS6GqJ9pzlI"
    headers = {"accept": "application/json"}
    try:
        resp = requests.get(url, headers=headers, timeout=15)
        if resp.ok:
            return resp.json().get("email")
        log(f"‚ùå TempAsia HTTP {resp.status_code}")
    except Exception as e:
        log(f"‚ùå L·ªói TempAsia API: {repr(e)}")
    return None

def wait_for_tempmail_code(email, max_checks=30, interval=2):
    """
    Poll API temp-mail.asia ƒë·ªÉ l·∫•y m√£ 6 s·ªë t·ª´ subject/email.
    Tr·∫£ v·ªÅ code string ho·∫∑c None n·∫øu h·∫øt h·∫°n.
    """
    headers = {"accept": "application/json"}
    email_enc = email.replace("@", "%40")
    url = f"https://free.priyo.email/api/messages/{email_enc}/7jkmE5NM2VS6GqJ9pzlI"

    for i in range(max_checks):
        try:
            r = requests.get(url, headers=headers, timeout=10)
            if r.ok:
                msgs = r.json()
                if msgs:
                    subj = msgs[0].get("subject", "")
                    body = msgs[0].get("body","")
                    m = re.search(r"\b\d{6}\b", subj) or re.search(r"\b\d{6}\b", body)
                    if m:
                        return m.group(0)
        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc mail: {repr(e)}")
        time.sleep(interval)
    return None

# ============== Email DropMail.me ==============
def get_dropmail_email():
    url = "https://dropmail.me/api/graphql/my_token_123"
    query = """
    mutation {
      introduceSession {
        id
        expiresAt
        addresses {
          address
        }
      }
    }
    """
    try:
        resp = requests.post(url, json={"query": query}, timeout=10)
        data = resp.json()
        session = data["data"]["introduceSession"]
        email = session["addresses"][0]["address"]
        session_id = session["id"]
        return email, session_id
    except Exception as e:
        log(f"‚ùå L·ªói DropMail API: {repr(e)}")
        return None, None

def wait_for_dropmail_code(self, session_id, max_checks=5, interval=5, overall_timeout=300):
    """
    Ch·ªù v√† l·∫•y m√£ OTP (6 s·ªë) t·ª´ DropMail session.
    """
    url = "https://dropmail.me/api/graphql/my_token_123"
    query = """
    query($id: ID!) {
        session(id: $id) {
            mails { fromAddr headerSubject text }
        }
    }"""

    start_time = time.time()
    checks = 0
    while (time.time() - start_time) < overall_timeout and checks < max_checks:
        try:
            resp = requests.post(
                url,
                json={"query": query, "variables": {"id": session_id}},
                timeout=10
            )
            data = resp.json()
            mails = data["data"]["session"]["mails"]

            if mails:
                for mail in mails:
                    text = mail.get("text", "")
                    subject = mail.get("headerSubject", "")
                    match = re.search(r"\b\d{6}\b", text) or re.search(r"\b\d{6}\b", subject)
                    if match:
                        code = match.group(0)
                        self.log(f"üì© Nh·∫≠n ƒë∆∞·ª£c m√£ DropMail: {code}")
                        return code

            checks += 1
            self.log(f"‚åõ Ch∆∞a c√≥ mail DropMail (l·∫ßn {checks}/{max_checks}), ch·ªù th√™m...")
        except Exception as e:
            checks += 1
            self.log(f"‚ùå L·ªói khi ki·ªÉm tra DropMail (l·∫ßn {checks}/{max_checks}): {repr(e)}")

        time.sleep(interval)

    self.log("‚õî Qu√° 5 l·∫ßn ki·ªÉm tra DropMail m√† ch∆∞a c√≥ m√£ ‚Äî b·ªè phi√™n.")
    return None

def fetch_signup_email(self):
    try:
        # ∆Øu ti√™n d√πng bi·∫øn ch·ªçn ngu·ªìn mail trong UI: 'dropmail' | 'tempasia'
        mode = self.var_mail_src.get().strip().lower()
    except Exception:
        mode = "tempasia"

    if mode == "dropmail":
        email, sid = get_dropmail_email()   # ƒë√£ c√≥ trong AutoPhoneInstagram.py
        if not email:
            self.log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c email t·ª´ DropMail.")
            return None, None, "dropmail"
        self.drop_session_id = sid          # l∆∞u ƒë·ªÉ ch·ªù OTP
        self.log(f"‚úÖ Email DropMail: {email}")
        return email, sid, "dropmail"

    # fallback: temp-mail.asia
    email = get_tempasia_email()            # ƒë√£ c√≥ trong AutoPhoneInstagram.py
    if not email:
        self.log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c email t·ª´ Temp-mail.asia.")
        return None, None, "tempasia"
    self.log(f"‚úÖ Email Temp-mail: {email}")
    return email, None, "tempasia"

# >>> ADD: Mobile-only flow
def run_mobile(thread_id=None):
    """
    ƒêƒÉng k√Ω t√†i kho·∫£n Instagram ho√†n to√†n tr√™n giao di·ªán Mobile.
    Kh√¥ng d√πng form Desktop / kh√¥ng chuy·ªÉn qua Desktop gi·ªØa ch·ª´ng.
    """
    while True:
        driver = None  # Always start with a fresh driver
        pause_event.wait()
        log("üü¢ [Mobile] B·∫Øt ƒë·∫ßu t·∫°o t√†i kho·∫£n...")

        # 1) L·∫•y email t·∫°m (t·∫≠n d·ª•ng 2 checkbox c√≥ s·∫µn)
        email = None
        session_id = None
        scale = get_chrome_scale_mobile()
        try:
            if mail_var.get() == "drop":
                log("üì® [Mobile] L·∫•y email t·ª´ DropMail.me...")
                email, session_id = get_dropmail_email()
                if not email:
                    log("‚õî Kh√¥ng th·ªÉ l·∫•y email DropMail ‚Äî d·ª´ng.")
                    return
                log(f"‚úÖ Email DropMail: {email}")
            elif mail_var.get() == "temp":
                log("üì® [Mobile] L·∫•y email t·ª´ temp-mail.asia (API)...")
                headers = {"accept": "application/json"}
                # d√πng endpoint ƒë√£ d√πng ·ªü file V3.py ƒë·ªÉ ƒë·ªìng b·ªô
                resp = requests.get(
                    "https://free.priyo.email/api/random-email/7jkmE5NM2VS6GqJ9pzlI",
                    headers=headers, timeout=15
                )
                if resp.status_code == 200:
                    email = resp.json().get("email")
                    log(f"‚úÖ Email l·∫•y ƒë∆∞·ª£c: {email}")
                else:
                    log(f"‚ùå L·ªói HTTP {resp.status_code} khi l·∫•y email")
                    return
            else:
                log("‚õî B·∫°n ch∆∞a ch·ªçn d·ªãch v·ª• mail t·∫°m (DropMail ho·∫∑c Temp-Mail).")
                return
        except Exception as e:
            log(f"‚ùå L·ªói l·∫•y email: {repr(e)}")
            return

        # 2) Sinh info c∆° b·∫£n (t·∫≠n d·ª•ng generator VN name trong file)
        pause_event.wait()
        def generate_vietnamese_name():
            ho_list = ["Nguy·ªÖn","Tr·∫ßn","L√™","Ph·∫°m","Ho√†ng","Phan","V≈©","ƒê·∫∑ng","B√πi","ƒê·ªó"]
            ten_dem_list = ["VƒÉn","Th·ªã","H·ªØu","Gia","Ng·ªçc","ƒê·ª©c","Thanh","Minh","Quang","Tr·ªçng"]
            ten_list = ["Anh","B√¨nh","Ch√¢u","D≈©ng","H√†","H√πng","Lan","Linh","Nam","Ph√∫c","Qu·ª≥nh","S∆°n","Trang","Tu·∫•n","Vy"]
            return f"{random.choice(ho_list)} {random.choice(ten_dem_list)} {random.choice(ten_list)}"

        full_name = generate_vietnamese_name()
        username_base = re.sub(r'[^a-z0-9]', '', unidecode(full_name.lower()))
        username = f"{username_base}{random.randint(100,999)}"
        password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
        age = str(random.randint(18, 30))
        log(f"üë§ H·ªç t√™n: {full_name}")
        log(f"üî§ Username: {username}")
        log(f"üîê M·∫≠t kh·∫©u: {password}")

        # 3) Kh·ªüi Chrome Mobile
        pause_event.wait()
        try:
            proxy = (proxy_entry.get().strip() if proxy_entry else "")
            if is_warp_mode():
                log("üåê [Mobile] WARP b·∫≠t ‚Üí b·ªè qua proxy.")
            else:
                log(f"üåê [Mobile] WARP t·∫Øt ‚Üí proxy: {proxy or 'No proxy'}")

                # T·∫°o Chrome Mobile ri√™ng bi·ªát, kh√¥ng d√πng chung v·ªõi desktop
                chrome_path   = globals().get("chrome_path", "")
                warp_enabled  = bool(globals().get("warp_enabled", False))
                all_drivers   = globals().get("all_drivers", None)
                arrange_after = globals().get("arrange_after_open", None)

                mobile_options = Options()
                mobile_options.add_argument("--disable-blink-features=AutomationControlled")
                mobile_options.add_argument("--no-first-run")
                mobile_options.add_argument("--disable-background-networking")
                mobile_options.add_argument("--disable-background-timer-throttling")
                mobile_options.add_argument("--disable-client-side-phishing-detection")

                # Th√™m headless n·∫øu ƒë∆∞·ª£c ch·ªçn (ri√™ng bi·ªát cho mobile)
                try:
                    if globals().get("hidden_chrome_var") and hidden_chrome_var.get():
                        try:
                            mobile_options.add_argument("--headless=new")
                        except Exception:
                            mobile_options.add_argument("--headless")
                        mobile_options.add_argument("--disable-gpu")
                        mobile_options.add_argument("--disable-dev-shm-usage")
                        mobile_options.add_argument("--no-sandbox")
                        mobile_options.add_argument("--window-size=390,844")
                        log("‚ÑπÔ∏è [Mobile] Ch·∫°y Chrome ·ªü ch·∫ø ƒë·ªô ·∫®n (headless).")
                except Exception:
                    pass

                # Emulate iPhone 15 Pro (UA + viewport)
                try:
                    mobile_width = int(entry_width_m.get()) if entry_width_m and entry_width_m.get() else 390
                    mobile_height = int(entry_height_m.get()) if entry_height_m and entry_height_m.get() else 844
                except:
                    mobile_width = 390
                    mobile_height = 844
                mobile_emulation = {
                    "deviceMetrics": {"width": mobile_width, "height": mobile_height, "pixelRatio": 3.0},
                    "userAgent": (
                        "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) "
                        "AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/137.0.0.0 "
                        "Mobile/15E148 Safari/604.1"
                    )
                }
                mobile_options.add_experimental_option("mobileEmulation", mobile_emulation)

                # Proxy: ch·ªâ √°p n·∫øu kh√¥ng b·∫≠t WARP (PC) v√† c√≥ proxy
                if not warp_enabled and proxy:
                    if "://" not in proxy:
                        proxy = f"http://{proxy}"
                    mobile_options.add_argument(f"--proxy-server={proxy}")

                # N·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn binary chrome
                if chrome_path:
                    mobile_options.binary_location = chrome_path

                # Chromedriver:
                driver_path = os.path.join(os.getcwd(), "chromedriver.exe")
                if os.path.isfile(driver_path):
                    service = Service(driver_path)
                else:
                    service = Service()  # d√πng chromedriver trong PATH

                driver = se_webdriver.Chrome(service=service, options=mobile_options)
                wait = WebDriverWait(driver, 15)

                # ƒê·∫øn trang mobile signup (ƒë√∫ng theo giao di·ªán mobile)
                driver.get("https://www.instagram.com/accounts/signup/email/")
                pause_event.wait()
                log("üåê [Mobile] ƒê√£ truy c·∫≠p trang ƒëƒÉng k√Ω (Mobile).")
                time.sleep(3)
        except Exception as e:
            log(f"‚ùå [Mobile] L·ªói kh·ªüi t·∫°o tr√¨nh duy·ªát: {repr(e)}")
            try:
                release_position(driver)
                driver.quit()
            except: pass
            driver = None
            continue
        
        # 4) ƒêi·ªÅn form ƒëƒÉng k√Ω (email, t√™n ƒë·∫ßy ƒë·ªß, username, password, birthday)
        pause_event.wait()
        try:
            # Nh·∫≠p email
            email_input = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[aria-label="Email"]')))
            type_text_slowly(email_input, email, delay=get_mobile_delay("Mail_type", 0.18))
            log("‚úÖ [Mobile] ƒê√£ nh·∫≠p email.")
            time.sleep(get_mobile_delay("Mail_sleep", 1))

            # NEXT 1
            next_btn = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_btn)
            next_btn.click()
            log("‚û°Ô∏è [Mobile] Next sau email.")
            time.sleep(get_mobile_delay("Mail_next", 2))
        except Exception as e:
            log(f"‚ùå [Mobile] Sai giao di·ªán/kh√¥ng th·∫•y Next sau email: {e}")
            try:
                release_position(driver)
                driver.quit()
            except: pass
            driver = None
            continue

        # 5) Resend code (n·∫øu c·∫ßn) ‚Üí t∆∞∆°ng th√≠ch v·ªõi code b·∫°n ƒë∆∞a
        pause_event.wait()
        try:
            time.sleep(5)
            log("‚è≥ [Mobile] Click 'I didn‚Äôt get the code'...")
            button_i_didnt_get = wait.until(EC.element_to_be_clickable(
                (By.XPATH, "//div[@role='button' and contains(., \"I didn‚Äôt get the code\")]")))
            button_i_didnt_get.click()
            log("‚úÖ [Mobile] ƒê√£ b·∫•m 'I didn‚Äôt get the code'")
            time.sleep(2)

            log("‚è≥ [Mobile] Click 'Resend confirmation code'...")
            resend_btn = wait.until(EC.element_to_be_clickable(
                (By.XPATH, "//div[@role='button' and contains(., 'Resend confirmation code')]")))
            resend_btn.click()
            log("‚úÖ [Mobile] ƒê√£ b·∫•m 'Resend confirmation code'")
            time.sleep(3)
        except Exception as e:
            log(f"‚ùå [Mobile] L·ªói ph·∫ßn resend code: {e}")
            try:
                release_position(driver)
                driver.quit()
            except: pass
            driver = None
            continue

        # 6) L·∫•y m√£ x√°c minh email
        pause_event.wait()
        def wait_for_dropmail_code_mobile(session_id, max_checks=30, interval=2):
            url = "https://dropmail.me/api/graphql/my_token_123"
            query = """query($id: ID!){ session(id:$id){ mails{ headerSubject text } } }"""
            for i in range(max_checks):
                try:
                    resp = requests.post(url, json={"query": query, "variables": {"id": session_id}}, timeout=10)
                    data = resp.json()
                    mails = data["data"]["session"]["mails"] if data.get("data") else []
                    if mails:
                        subj = mails[0].get("headerSubject","")
                        text = mails[0].get("text","")
                        m = re.search(r"\b\d{6}\b", subj) or re.search(r"\b\d{6}\b", text)
                        if m: return m.group(0)
                except: pass
                time.sleep(interval)
            return None

        def wait_for_tempmail_code_mobile(email, max_checks=30, interval=2):
            headers = {"accept": "application/json"}
            email_enc = email.replace("@","%40")
            mail_url = f"https://free.priyo.email/api/messages/{email_enc}/7jkmE5NM2VS6GqJ9pzlI"
            for i in range(max_checks):
                try:
                    r = requests.get(mail_url, headers=headers, timeout=10)
                    if r.status_code == 200:
                        msgs = r.json()
                        if msgs:
                            subj = msgs[0].get("subject","")
                            m = re.search(r"\b\d{6}\b", subj)
                            if m: return m.group(0)
                except: pass
                time.sleep(interval)
            return None

        try:
            log("‚è≥ [Mobile] ƒêang ch·ªù m√£ x√°c minh trong email...")
            code = None
            if mail_var.get() == "drop":
                code = wait_for_dropmail_code_mobile(session_id)
            elif mail_var.get() == "temp":
                code = wait_for_tempmail_code_mobile(email)

            if not code:
                log("‚è∞ [Mobile] Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ x√°c minh ‚Äî restart v√≤ng l·∫∑p.")
                try:
                    release_position(driver)
                    driver.quit()
                except: pass
                driver = None
                continue

            log(f"üî¢ [Mobile] M√£ x√°c minh: {code}")
            # Nh·∫≠p m√£ x√°c minh
            code_input = wait.until(EC.presence_of_element_located(
                (By.XPATH, "//input[@aria-label='Confirmation code']")))
            code_input.clear()
            type_text_slowly(code_input, code, delay=get_mobile_delay("Code_type", 0.30))
            log("‚úÖ [Mobile] ƒê√£ nh·∫≠p m√£ x√°c minh.")
            time.sleep(get_mobile_delay("Code_sleep", 2))

            # NEXT sau code
            try:
                next_btn = wait.until(EC.element_to_be_clickable(
                    (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
                next_btn.click()
                log("üéâ [Mobile] Ho√†n th√†nh b∆∞·ªõc x√°c minh m√£.")
                time.sleep(get_mobile_delay("Code_next", 2))
            except:
                log("‚ö†Ô∏è [Mobile] Kh√¥ng th·∫•y Next sau khi nh·∫≠p code.")
            time.sleep(2)
        except Exception as e:
            log(f"‚ùå [Mobile] L·ªói khi l·∫•y/nh·∫≠p m√£ x√°c minh: {e}")
            try:
                release_position(driver)
                driver.quit()
            except: pass
            driver = None
            continue

        # 7) Nh·∫≠p Password ‚Üí Next qua v√†i b∆∞·ªõc
        pause_event.wait()
        try:
            # 7) Nh·∫≠p Password ‚Üí Next
            pass_input = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[aria-label="Password"]')))
            type_text_slowly(pass_input, password, delay=get_mobile_delay("Pass_type", 0.18))
            log("‚úÖ [Mobile] ƒê√£ nh·∫≠p pass.")
            time.sleep(get_mobile_delay("Pass_sleep", 3))

            # Next sau pass (m·ªôt ho·∫∑c v√†i m√†n h√¨nh)
            for _ in range(3):
                try:
                    nb = wait.until(EC.element_to_be_clickable(
                        (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
                    nb.click()
                    log("‚û°Ô∏è [Mobile] Next‚Ä¶")
                    time.sleep(get_mobile_delay("Pass_next", 2))
                except:
                    break
        except Exception as e:
            log(f"‚ùå [Mobile] L·ªói khi nh·∫≠p pass/next: {e}")

        # 8) Nh·∫≠p Age
        pause_event.wait()
        try:
            age_input = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[aria-label="Age"]')))
            type_text_slowly(age_input, age, delay=get_mobile_delay("Tu·ªïi_type", 0.18))
            log("‚úÖ [Mobile] ƒê√£ nh·∫≠p tu·ªïi.")
            time.sleep(get_mobile_delay("Tu·ªïi_sleep", 2))

            nb = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
            nb.click()
            log("‚û°Ô∏è [Mobile] Next sau tu·ªïi.")
            time.sleep(get_mobile_delay("Tu·ªïi_next", 2))

            # click OK n·∫øu c√≥
            driver.execute_script("""
                let okBtn = [...document.querySelectorAll("div[role='button']")]
                    .find(el => el.innerText.trim() === "OK");
                if (okBtn) okBtn.click();
            """)
        except Exception as e:
            log(f"‚ö†Ô∏è [Mobile] B·ªè qua Age (kh√¥ng th·∫•y field): {e}")

        # 9) Nh·∫≠p Full name ‚Üí Next
        pause_event.wait()
        try:
            full_name_input = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[aria-label="Full name"]')))
            type_text_slowly(full_name_input, full_name, delay=get_mobile_delay("H·ªç t√™n_type", 0.18))
            log("‚úÖ [Mobile] ƒê√£ nh·∫≠p T√™n.")
            time.sleep(get_mobile_delay("H·ªç t√™n_sleep", 2))

            nb = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
            nb.click()
            log("‚û°Ô∏è [Mobile] Next sau h·ªç t√™n.")
            time.sleep(get_mobile_delay("H·ªç t√™n_next", 2))
        except Exception as e:
            log(f"‚ùå [Mobile] L·ªói nh·∫≠p t√™n/Next: {e}")

        # 10) Username (ƒë·ªçc l·∫°i g·ª£i √Ω) ‚Üí Next
        pause_event.wait()
        try:
            ui = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[aria-label="Username"]')))
            uname_val = ui.get_attribute("value") or username
            if uname_val != username:
                log(f"üîÅ [Mobile] Username g·ª£i √Ω: {username} ‚ûú {uname_val}")
                username = uname_val
            nb = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, 'div[role="button"][aria-label="Next"]')))
            nb.click()
            log("‚û°Ô∏è [Mobile] Next sau username.")
        except Exception as e:
            log(f"‚ö†Ô∏è [Mobile] B·ªè qua ki·ªÉm username: {e}")
        time.sleep(10)
        # 11) I agree (n·∫øu c√≥ nhi·ªÅu l·∫ßn)
        if is_warp_mode():
                warp_change_ip()
                time.sleep(8)
        pause_event.wait()
        try:
            for i in range(3):
                try:
                    agree = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable(
                            (By.CSS_SELECTOR, 'div[role="button"][aria-label="I agree"]')))
                    agree.click()
                    log(f"‚úÖ [Mobile] ƒê√£ b·∫•m I agree l·∫ßn {i+1}.")
                    time.sleep(6)
                except:
                    break
        except Exception as e:
            log(f"‚ö†Ô∏è [Mobile] Kh√¥ng th·∫•y 'I agree' th√™m: {e}")

        log("üéâ [Mobile] Ho√†n t·∫•t ƒëƒÉng k√Ω.")
        time.sleep(23)
        # === CHECK LIVE/DIE ===
        try:
            global live_count, die_count
            profile_url = f"https://www.instagram.com/{username}/"
            log("üåê ƒêang ki·ªÉm tra tr·∫°ng th√°i Live/Die...")
            driver.get(profile_url)
            time.sleep(6)  # c√≥ th·ªÉ thay b·∫±ng WebDriverWait n·∫øu mu·ªën

            current_url = driver.current_url
            page_source = driver.page_source

            # M·∫∑c ƒë·ªãnh
            status_text = "Unknown"

            # Ph√¢n lo·∫°i tr·∫°ng th√°i
            if "/accounts/login/" in current_url or "Sorry, this page isn't available" in page_source:
                status_text = "Die"
            elif "checkpoint" in current_url.lower() or "Confirm you're human" in page_source:
                status_text = "Checkpoint"
            elif (f"@{username}" in page_source) or (f"instagram.com/{username}" in current_url):
                status_text = "Live"
            else:
                status_text = "Die"

            # C·∫≠p nh·∫≠t bi·∫øn ƒë·∫øm + log
            if status_text == "Live":
                live_count += 1
                live_var.set(str(live_count))
                update_rate()
                log("‚úÖ T√†i kho·∫£n Live")
            else:
                die_count += 1
                die_var.set(str(die_count))
                update_rate()
                log(f"‚ùå {status_text} ‚Äî t√≠nh l√† Die")

            # === L·∫•y Cookie ===
            try:
                cookies = driver.get_cookies()
                cookie_str = "; ".join([f"{c['name']}={c['value']}" for c in cookies]) if cookies else ""
                log("üç™ Cookie hi·ªán t·∫°i:")
                log(cookie_str if cookie_str else "(empty)")
                time.sleep(3)
            except Exception as e:
                cookie_str = ""
                log(f"‚ùå L·ªói khi l·∫•y cookie: {repr(e)}")

            # N·∫øu KH√îNG ph·∫£i Live th√¨ insert ngay b√¢y gi·ªù
            if status_text.lower() in ("die", "checkpoint", "unknown"):
                # n·∫øu c√≥ app (Tk root) th√¨:
                try:
                    app.after(0, lambda: insert_to_tree("Die", username, password, email, cookie_str, two_fa_code=""))
                except Exception:
                    insert_to_tree("Die", username, password, email, cookie_str, two_fa_code="")

                # L∆∞u file (optional) ‚Äì c√≥ fallback cho save_format
                try:
                    file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Die.txt")
                    info_map = {"Username": username, "Pass": password, "Mail": email, "Cookie": cookie_str, "2FA": ""}
                    fields = save_format if ('save_format' in globals() and isinstance(save_format, (list,tuple)) and save_format) \
                            else ["Username","Pass","Mail","Cookie","2FA"]
                    line = "|".join([info_map.get(field, "") for field in fields])
                    with open(file_path, "a", encoding="utf-8") as f:
                        f.write(line + "\n")
                    log(f"üíæ (Die early) ƒê√£ l∆∞u th√¥ng tin v√†o '{file_path}'")
                except Exception as e:
                    log(f"‚ùå (Die early) L·ªói khi l∆∞u file: {repr(e)}")

                # Quy·∫øt ƒë·ªãnh restart
                try:
                    time.sleep(2)
                    release_position(driver)
                    driver.quit()
                except:
                    pass
                driver = None
                log("üîÅ Kh·ªüi ch·∫°y l·∫°i phi√™n...")
                continue
            else:
                log("‚û°Ô∏è LIVE: Ti·∫øp t·ª•c B∆Ø·ªöC TI·∫æP THEO")

        except Exception as e:
            log(f"‚ö†Ô∏è L·ªói khi check live/die: {repr(e)}")
        
        # === B∆Ø·ªöC 7: X·ª≠ l√Ω b·∫≠t 2FA ===
        pause_event.wait()
        if enable_2fa.get():
            try:
                if is_warp_mode():
                    warp_off()
                    time.sleep(2)
                log("üîê B·∫Øt ƒë·∫ßu b·∫≠t x√°c th·ª±c hai y·∫øu t·ªë (2FA)...")
                time.sleep(3)

                # Truy c·∫≠p trang b·∫≠t 2FA
                driver.get("https://accountscenter.instagram.com/password_and_security/two_factor/?theme=dark")
                WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                time.sleep(8)
                driver.execute_script(f"document.body.style.zoom='{int(scale*100)}%'")

                # Ch·ªçn t√†i kho·∫£n Instagram
                try:
                    account_btn = WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((
                            By.XPATH, "//div[@role='button' and descendant::div[contains(text(),'Instagram')]]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", account_btn)
                    time.sleep(1)
                    account_btn.click()
                    log("‚úÖ ƒê√£ ch·ªçn t√†i kho·∫£n Instagram")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ö†Ô∏è Kh√¥ng ch·ªçn ƒë∆∞·ª£c t√†i kho·∫£n: {repr(e)}")
                    return

                # Nh·∫•n n√∫t "Continue"
                try:
                    continue_btn = WebDriverWait(driver, 20).until(
                        EC.presence_of_element_located((
                            By.XPATH,
                            "//div[@role='button' and descendant::span[normalize-space(text())='Continue']]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", continue_btn)
                    time.sleep(1)
                    driver.execute_script("arguments[0].click();", continue_btn)
                    log("‚úÖ ƒê√£ click n√∫t Continue")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ùå Kh√¥ng th·ªÉ click n√∫t Continue: {repr(e)}")
                    return

                # L·∫•y m√£ 2FA secret
                try:
                    span_xpath = "//div[contains(@class,'x16grhtn')]//span"
                    span_elem = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, span_xpath))
                    )
                    two_fa_code = span_elem.text.strip().replace(" ", "")
                    log(f"üîê M√£ 2FA secret: {two_fa_code}")
                except Exception as e:
                    log(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ 2FA secret: {repr(e)}")
                    return

                # Nh·∫•n n√∫t Next ƒë·ªÉ chuy·ªÉn t·ªõi nh·∫≠p m√£ OTP
                try:
                    next_btn = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((
                            By.XPATH, "//div[@role='button' and descendant::span[normalize-space(text())='Next']]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_btn)
                    time.sleep(1)
                    driver.execute_script("arguments[0].click();", next_btn)
                    log("‚úÖ ƒê√£ nh·∫•n n√∫t Next ƒë·ªÉ nh·∫≠p m√£ OTP")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ùå Kh√¥ng nh·∫•n ƒë∆∞·ª£c n√∫t Next sau m√£ secret: {repr(e)}")
                    return

                # Sinh m√£ OTP t·ª´ m√£ secret b·∫±ng pyotp
                otp_code = None
                try:
                    totp = pyotp.TOTP(two_fa_code)
                    otp_code = totp.now()
                    log(f"üî¢ M√£ OTP t·∫°o t·ª´ pyotp: {otp_code}")
                except Exception as e:
                    log(f"‚ùå L·ªói khi t·∫°o OTP t·ª´ pyotp: {repr(e)}")
                    return

                # Nh·∫≠p m√£ OTP v√†o √¥ nh·∫≠p
                if otp_code:
                    try:
                        otp_input = WebDriverWait(driver, 10).until(
                            EC.presence_of_element_located((By.XPATH, "//input[@type='text' and @maxlength='6']"))
                        )
                        otp_input.clear()
                        otp_input.send_keys(otp_code)
                        log("‚úÖ ƒê√£ nh·∫≠p m√£ OTP.")
                        time.sleep(2)
                    except Exception as e:
                        log(f"‚ùå L·ªói khi nh·∫≠p OTP: {repr(e)}")
                    # Nh·∫•n n√∫t Next cu·ªëi c√πng ƒë·ªÉ ho√†n t·∫•t b·∫≠t 2FA
                    try:
                        driver.execute_script("""
                            [...document.querySelectorAll("div[role='button']")].forEach(el => {
                                if (el.innerText.trim() === 'Next') el.click();
                            });
                        """)
                        log("‚úÖ ƒê√£ nh·∫•n n√∫t Next ƒë·ªÉ ho√†n t·∫•t b·∫≠t 2FA")
                        time.sleep(12)
                    except Exception as e:
                        log(f"‚ùå L·ªói khi nh·∫•n n√∫t Next ho√†n t·∫•t 2FA: {repr(e)}")
                        return
                    driver.execute_script("""
                    const btn = [...document.querySelectorAll("button, div[role=button]")]
                        .find(el => el.textContent.trim() === "Done");

                    if (btn) {
                        btn.click();
                        return true;
                    } else {
                        return false;
                    }
                    """)
            except Exception as e:
                log(f"‚ùå L·ªói to√†n b·ªô b∆∞·ªõc b·∫≠t 2FA: {repr(e)}")
            time.sleep(3)

        # === Insert v√†o Treeview ===
        tree_item_id = None
        try:
            status_tag = "LIVE" if status_text.lower() == "live" else "DIE"
            phone_val = locals().get("phone", "")
            token_val = locals().get("token", "")

            tree_item_id = insert_to_tree(status_text, username, password, email, cookie_str, locals().get("two_fa_code", ""))
            log(f"‚úÖ [Mobile] ƒê√£ th√™m v√†o TreeView v·ªõi ID: {tree_item_id}")
        except Exception as e:
            log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m v√†o Treeview: {repr(e)}")

        # === L∆ØU TH√îNG TIN ===
        try:
            file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Live.txt")

            info_map = {
                "Username": username,
                "Pass": password,
                "Mail": email,
                "Cookie": cookie_str if 'cookie_str' in locals() else '',
                "2FA": two_fa_code if 'two_fa_code' in locals() else '',
            }

            # d√πng tr·ª±c ti·∫øp save_format t·ª´ UI
            line = "|".join([info_map.get(field, "") for field in save_format])

            with open(file_path, "a", encoding="utf-8") as f:
                f.write(line + "\n")

            log(f"üíæ ƒê√£ l∆∞u th√¥ng tin v√†o '{file_path}'")
        except Exception as e:
            log(f"‚ùå L·ªói khi l∆∞u file: {repr(e)}")

        # Quay l·∫°i giao di·ªán Desktop
        log("üñ• Quay l·∫°i giao di·ªán Desktop...")
        driver.execute_cdp_cmd("Emulation.clearDeviceMetricsOverride", {})
        driver.execute_cdp_cmd("Emulation.setUserAgentOverride", {
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
        })
        driver.refresh()
        time.sleep(10)

        # === B∆Ø·ªöC 5: Follow ===
        pause_event.wait()
        if enable_follow.get():
            followed_count = 0
            try:
                log("üöÄ [Mobile] B·∫Øt ƒë·∫ßu follow c√°c link...")
                
                # Quay v·ªÅ trang ch√≠nh Instagram
                log("üè† [Mobile] Quay v·ªÅ trang ch√≠nh Instagram...")
                driver.get("https://www.instagram.com/")
                time.sleep(8)
                
                # X·ª≠ l√Ω popup "Save Login" n·∫øu c√≥
                try:
                    log("üîç [Mobile] Ki·ªÉm tra popup 'Save Login'...")
                    not_now_btn = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, "//span[text()='Not now']"))
                    )
                    not_now_btn.click()
                    log("‚úÖ [Mobile] ƒê√£ nh·∫•n 'Not now' popup Save Login")
                    time.sleep(2)
                except:
                    log("‚ÑπÔ∏è [Mobile] Kh√¥ng th·∫•y popup Save Login ho·∫∑c ƒë√£ ƒë√≥ng")
                
                time.sleep(2)

                follow_links = [
                    "https://www.instagram.com/shx_pe06/",
                    "https://www.instagram.com/shxuy0bel421162._/",
                    "https://www.instagram.com/ductoan1103/",
                    "https://www.instagram.com/v.anh.26/",
                    "https://www.instagram.com/datgia172/",
                    "https://www.instagram.com/mhai_187/",
                    "https://www.instagram.com/valentin_otz/",
                    "https://www.instagram.com/ductoannn111/",
                    "https://www.instagram.com/nhd_305.nh/",
                    "https://www.instagram.com/ngockem_/",
                ]

                # L·∫•y s·ªë l∆∞·ª£ng follow t·ª´ √¥ nh·∫≠p Mobile
                try:
                    num_follow = int(mobile_follow_count_entry.get())
                except:
                    num_follow = 5
                num_follow = min(num_follow, len(follow_links))  

                selected_links = random.sample(follow_links, num_follow)

                for link in selected_links:
                    try:
                        driver.get(link)
                        log(f"üåê [Mobile] ƒê√£ m·ªü link: {link}")
                        time.sleep(7)
                        driver.execute_script(f"document.body.style.zoom='{int(scale*100)}%'")

                        follow_button = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Follow']"))
                        )
                        follow_button.click()
                        followed_count += 1
                        log(f"‚úÖ [Mobile] ƒê√£ follow: {link}")
                        
                        # Update FOLLOW column
                        if tree_item_id:
                            follow_status = f"{followed_count}/{num_follow}"
                            app.after(0, lambda s=follow_status: update_tree_column(tree_item_id, "FOLLOW", s))
                            log(f"üìä [Mobile] C·∫≠p nh·∫≠t FOLLOW: {follow_status}")
                        
                        time.sleep(6)
                    except Exception as e:
                        log(f"‚ùå [Mobile] Kh√¥ng th·ªÉ follow {link}: {repr(e)}")

            except Exception as e:
                log(f"‚ùå L·ªói trong qu√° tr√¨nh follow: {repr(e)}")

        # === B∆Ø·ªöC 6: Upload avatar ·ªü giao di·ªán mobile ===
        pause_event.wait()
        if enable_avatar.get():
            time.sleep(4)
            avatar_success = False
            gender_saved = False
            bio_saved = False
            post_shared = False
            try:
                log("üì± [Mobile] Chuy·ªÉn sang giao di·ªán Mobile (iPhone 15 Pro Max)...")
                driver.execute_cdp_cmd("Emulation.setDeviceMetricsOverride", {
                    "mobile": True,
                    "width": 390,
                    "height": 844,
                    "deviceScaleFactor": 3
                })
                driver.execute_cdp_cmd("Emulation.setUserAgentOverride", {
                    "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1"
                })
                driver.refresh()
                time.sleep(8)

                # ƒê√≥ng popup Not Now n·∫øu c√≥
                driver.execute_script("""
                    let btn = [...document.querySelectorAll("span,button")]
                        .find(el => ["Not now", "Kh√¥ng ph·∫£i b√¢y gi·ªù"].includes(el.innerText.trim()));
                    if (btn) btn.click();
                """)
                time.sleep(3)

                # M·ªü trang ch·ªânh s·ª≠a h·ªì s∆°
                log("üë§ [Mobile] M·ªü trang ch·ªânh s·ª≠a h·ªì s∆° ƒë·ªÉ upload avatar...")
                driver.get("https://www.instagram.com/accounts/edit/")
                WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.XPATH, "//input[@accept='image/jpeg,image/png']"))
                )
                time.sleep(8)
                driver.execute_script(f"document.body.style.zoom='{int(scale*100)}%'")

                # Nh·∫•n Prefer not to say
                driver.execute_script("""
                    const preferEl = document.evaluate(
                        "//div[span[normalize-space(text())='Prefer not to say']]",
                        document,
                        null,
                        XPathResult.FIRST_ORDERED_NODE_TYPE,
                        null
                    ).singleNodeValue;
                    if (preferEl) {
                        preferEl.click();
                    } else {
                        console.warn("‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ 'Prefer not to say'");
                    }
                    """)
                time.sleep(3)
                
                # Ch·ªçn female
                try:
                    driver.execute_script("""
                        const femaleOption = document.evaluate(
                            "//span[normalize-space(text())='Female']",
                            document,
                            null,
                            XPathResult.FIRST_ORDERED_NODE_TYPE,
                            null
                        ).singleNodeValue;
                        if (femaleOption) {
                            femaleOption.click();
                        } else {
                            console.warn("‚ùå Kh√¥ng t√¨m th·∫•y option 'Female'");
                        }
                        """)
                    time.sleep(3)
                    gender_saved = True
                    if tree_item_id:
                        app.after(0, lambda: update_tree_column(tree_item_id, "GENDER", "‚úÖ"))
                        log("‚úÖ [Mobile] ƒê√£ ch·ªçn Gender: Female")
                except Exception as e:
                    if tree_item_id:
                        app.after(0, lambda: update_tree_column(tree_item_id, "GENDER", "‚ùå"))
                    log(f"‚ùå [Mobile] L·ªói ch·ªçn Gender: {repr(e)}")

                # ƒêi·ªÅn Bio (theo l·ª±a ch·ªçn GUI) ‚Äî chu·∫©n React (setNativeValue + input/change)
                try:
                    driver.execute_script("""
                    (function(val){
                        const el = document.querySelector("textarea[name='biography'], #pepBio, textarea[aria-label='Bio'], textarea[aria-label='Ti·ªÉu s·ª≠']");
                        if (!el) { console.warn("‚ùå Kh√¥ng t√¨m th·∫•y √¥ Bio (#pepBio/biography)"); return; }
                        const proto  = el.tagName === 'TEXTAREA' ? HTMLTextAreaElement.prototype : HTMLInputElement.prototype;
                        const setter = Object.getOwnPropertyDescriptor(proto, 'value')?.set;
                        if (setter) setter.call(el, val); else el.value = val;  // fallback
                        el.dispatchEvent(new Event('input',  {bubbles:true}));
                        el.dispatchEvent(new Event('change', {bubbles:true}));
                        el.blur();
                        console.log("‚úçÔ∏è ƒê√£ ƒëi·ªÅn Bio:", val);
                    })(arguments[0]);
                    """)
                    log(f"‚úçÔ∏è [Mobile] ƒê√£ ƒëi·ªÅn Bio")
                    time.sleep(1.5)
                    bio_saved = True
                except Exception as e:
                    log(f"‚ùå [Mobile] L·ªói ƒëi·ªÅn Bio: {repr(e)}")

                # Nh·∫•n Submit
                driver.execute_script("""
                (function(){
                    const xps = [
                    "//div[@role='button' and normalize-space(text())='Submit']",
                    "//button[normalize-space()='Submit']",
                    "//button[normalize-space()='Save']",
                    "//button[normalize-space()='L∆∞u']",
                    "//div[@role='button' and .//span[normalize-space(text())='Submit']]"
                    ];
                    for (const xp of xps) {
                    const el = document.evaluate(xp, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                    if (el) { el.scrollIntoView({block:'center'}); el.click(); console.log("‚û°Ô∏è ƒê√£ click Submit/Save"); return; }
                    }
                    console.warn("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Submit/Save");
                })();
                """)
                time.sleep(2)
                
                # Update BIO column
                if tree_item_id:
                    if bio_saved:
                        app.after(0, lambda: update_tree_column(tree_item_id, "BIO", "‚úÖ"))
                        log("‚úÖ [Mobile] Bio ƒë√£ l∆∞u th√†nh c√¥ng")
                    else:
                        app.after(0, lambda: update_tree_column(tree_item_id, "BIO", "‚ùå"))
                        log("‚ùå [Mobile] Bio l∆∞u th·∫•t b·∫°i")

                # L·∫•y ·∫£nh v√† upload
                try:
                    if not ava_folder_path or not os.path.exists(ava_folder_path):
                        log("‚ùå [Mobile] Ch∆∞a ch·ªçn th∆∞ m·ª•c ·∫£nh ho·∫∑c th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i.")
                        if tree_item_id:
                            app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚ùå"))
                    else:
                        image_files = [f for f in os.listdir(ava_folder_path) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
                        if image_files:
                            selected_path = os.path.join(ava_folder_path, random.choice(image_files))
                            driver.find_element(By.XPATH, "//input[@accept='image/jpeg,image/png']").send_keys(selected_path)
                            log(f"‚úÖ [Mobile] ƒê√£ upload avatar: {os.path.basename(selected_path)}")
                            time.sleep(3)
                            
                            # L∆∞u avatar
                            WebDriverWait(driver, 15).until(
                                EC.element_to_be_clickable((By.XPATH, "//button[text()='Save']"))
                            ).click()
                            log("üíæ [Mobile] ƒê√£ l∆∞u avatar")
                            avatar_success = True
                            if tree_item_id:
                                app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚úÖ"))
                            time.sleep(10)

                            # N·∫øu c√≥ n√∫t Post th√¨ click
                            try:
                                post_btn = WebDriverWait(driver, 5).until(
                                    EC.element_to_be_clickable((By.XPATH, "//button[contains(@class,'_a9--') and text()='Post']"))
                                )
                                driver.execute_script("arguments[0].click();", post_btn)
                                log("‚úÖ [Mobile] ƒê√£ click Post")
                                post_shared = True
                                if tree_item_id:
                                    app.after(0, lambda: update_tree_column(tree_item_id, "POST", "‚úÖ"))
                                time.sleep(12)
                            except:
                                log("‚Ñπ [Mobile] Kh√¥ng th·∫•y n√∫t Post, b·ªè qua.")
                                if tree_item_id:
                                    app.after(0, lambda: update_tree_column(tree_item_id, "POST", "‚ùå"))
                        else:
                            log("‚ùå [Mobile] Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá trong th∆∞ m·ª•c.")
                            if tree_item_id:
                                app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚ùå"))
                except Exception as e:
                    log(f"‚ùå [Mobile] L·ªói upload avatar: {repr(e)}")
                    if tree_item_id:
                        app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚ùå"))
                        
            except Exception as e:
                log(f"‚ùå [Mobile] L·ªói B∆∞·ªõc 6: {repr(e)}")
                if tree_item_id:
                    if not gender_saved:
                        app.after(0, lambda: update_tree_column(tree_item_id, "GENDER", "‚ùå"))
                    if not bio_saved:
                        app.after(0, lambda: update_tree_column(tree_item_id, "BIO", "‚ùå"))
                    if not avatar_success:
                        app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚ùå"))
                    if not post_shared:
                        app.after(0, lambda: update_tree_column(tree_item_id, "POST", "‚ùå"))

            # Quay l·∫°i giao di·ªán Desktop
            log("üñ• Quay l·∫°i giao di·ªán Desktop...")
            driver.execute_cdp_cmd("Emulation.clearDeviceMetricsOverride", {})
            driver.execute_cdp_cmd("Emulation.setUserAgentOverride", {
                "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
            })
            driver.refresh()
            time.sleep(10)

        # === B·∫¨T CH·∫æ ƒê·ªò CHUY√äN NGHI·ªÜP (Creator -> Personal blog) ===
        pause_event.wait()
        if enable_Chuyen_nghiep.get():
            professional_success = False
            try:
                log("üíº [Mobile] ƒêang b·∫≠t ch·∫ø ƒë·ªô chuy√™n nghi·ªáp (Creator -> Personal blog)...")
                driver.get("https://www.instagram.com/accounts/convert_to_professional_account/")
                WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                time.sleep(8)
                driver.execute_script(f"document.body.style.zoom='{int(scale*100)}%'")

                # 1) Ch·ªçn Creator
                account_type = pro_type_var.get()
                if account_type == "Creator":
                    selector = "IGDSRadioButtonmedia_creator"
                else:
                    selector = "IGDSRadioButtonbusiness"
                try:
                    radio = WebDriverWait(driver, 8).until(
                        EC.element_to_be_clickable((By.ID, selector))
                    )
                    radio.click()
                    log(f"‚úÖ [Mobile] ƒê√£ ch·ªçn {account_type}")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ö†Ô∏è [Mobile] Kh√¥ng t√¨m th·∫•y n√∫t ch·ªçn {account_type}: {repr(e)}")
                    if tree_item_id:
                        app.after(0, lambda: update_tree_column(tree_item_id, "PROFESSIONAL", "‚ùå"))
                    raise

                # 2) Nh·∫•n Next qua 2 m√†n h√¨nh gi·ªõi thi·ªáu
                for i in range(2):
                    try:
                        next_btn = WebDriverWait(driver, 5).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Next' or normalize-space()='Ti·∫øp']"))
                        )
                        next_btn.click()
                        log(f"‚û°Ô∏è [Mobile] ƒê√£ nh·∫•n Next {i+1}")
                        time.sleep(1.5)
                    except Exception as e:
                        log(f"‚ÑπÔ∏è [Mobile] Kh√¥ng t√¨m th·∫•y Next {i+1}: {repr(e)}")
                        break
                
                # 3) Tick Show category on profile
                driver.execute_script("""
                    document.querySelectorAll('input[type="checkbox"][aria-label="Show category on profile"]').forEach(el => { 
                        if (el.getAttribute("aria-checked") === "false") {
                            el.click();
                        }
                    });
                """)
                time.sleep(3)

                # 4) Tick Category theo l·ª±a ch·ªçn GUI
                category = category_var.get()
                category_map = {
                    "Personal blog": "2700",
                    "Product/service": "2201",
                    "Art": "2903",
                    "Musician/band": "180164648685982",
                    "Shopping & retail": "200600219953504",
                    "Health/beauty": "2214",
                    "Grocery Store": "150108431712141"
                }
                cat_code = category_map.get(category)
                if cat_code:
                    js = f'document.querySelector(\'input[type="radio"][aria-label="{cat_code}"]\').click();'
                    driver.execute_script(js)
                    log(f"‚úÖ [Mobile] ƒê√£ ch·ªçn Category: {category}")
                    time.sleep(3)
                else:
                    log(f"‚ö†Ô∏è [Mobile] Kh√¥ng t√¨m th·∫•y m√£ category cho {category}")
                    if tree_item_id:
                        app.after(0, lambda: update_tree_column(tree_item_id, "PROFESSIONAL", "‚ùå"))
                    raise Exception(f"Category not found: {category}")

                # 5) Nh·∫•n Done 
                driver.execute_script("""
                    document.querySelectorAll('button[type="button"]').forEach(el => {
                        if (el.innerText.trim() === 'Done') el.click();
                    });
                """)
                time.sleep(3)
                
                # 6) X√°c nh·∫≠n popup Switch to Professional Account
                driver.execute_script("""
                    document.querySelectorAll('button').forEach(el => { 
                        if (el.innerText.trim() === 'Continue' || el.innerText.trim() === 'Ti·∫øp t·ª•c') {
                            el.click();
                        }
                    });
                """)
                time.sleep(15)
                
                # 7) Nh·∫•n Done ƒë·ªÉ ho√†n th√†nh 
                driver.execute_script("document.querySelector('button._aswp._aswr._aswu._aswy._asw_._asx2').click()")
                time.sleep(5)
                
                professional_success = True
                if tree_item_id:
                    app.after(0, lambda: update_tree_column(tree_item_id, "PROFESSIONAL", "‚úÖ"))
                log("‚úÖ [Mobile] ƒê√£ b·∫≠t ch·∫ø ƒë·ªô chuy√™n nghi·ªáp th√†nh c√¥ng")
                
            except Exception as e:
                log(f"‚ùå [Mobile] L·ªói khi b·∫≠t ch·∫ø ƒë·ªô chuy√™n nghi·ªáp: {repr(e)}")
                if tree_item_id:
                    app.after(0, lambda: update_tree_column(tree_item_id, "PROFESSIONAL", "‚ùå"))

            # === K·∫æT TH√öC PHI√äN ===
            try:
                time.sleep(2)
                release_position(driver)       # ‚úÖ tr·∫£ ch·ªó
                driver.quit()
                log("üëã ƒê√£ ƒë√≥ng tr√¨nh duy·ªát (driver.quit()).")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi quit driver: {repr(e)}")

# ================================================== DESKTOP =============================================================
def run(thread_id=None):
    while True:
        driver = None  # Always start with a fresh driver
        pause_event.wait() 
        log("üü¢ B·∫Øt ƒë·∫ßu t·∫°o t√†i kho·∫£n...")

        if mail_var.get() == "drop":
            log("üì® L·∫•y email t·ª´ DropMail.me...")
            email, session_id = get_dropmail_email()
            if not email:
                log("‚õî Kh√¥ng th·ªÉ l·∫•y email DropMail ‚Äî d·ª´ng ti·∫øn tr√¨nh.")
                return
            log(f"‚úÖ Email DropMail: {email}")

        elif mail_var.get() == "temp":
            log("üì® L·∫•y email t·ª´ temp-mail.asia (API)...")
            headers = {"accept": "application/json"}
            resp = requests.get("https://free.priyo.email/api/random-email/7jkmE5NM2VS6GqJ9pzlI", headers=headers)

            if resp.status_code == 200:
                email = resp.json()["email"]
                log(f"‚úÖ Email l·∫•y ƒë∆∞·ª£c: {email}")
            else:
                log(f"‚ùå L·ªói HTTP {resp.status_code}")
                return

        else:
            log("‚õî B·∫°n ch∆∞a ch·ªçn d·ªãch v·ª• mail t·∫°m (DropMail ho·∫∑c Temp-Mail).")
            return

        def generate_vietnamese_name():
            ho_list = ["Nguy·ªÖn", "Tr·∫ßn", "L√™", "Ph·∫°m", "Ho√†ng", "Phan", "V≈©", "ƒê·∫∑ng", "B√πi", "ƒê·ªó"]
            ten_dem_list = ["VƒÉn", "Th·ªã", "H·ªØu", "Gia", "Ng·ªçc", "ƒê·ª©c", "Thanh", "Minh", "Quang", "Tr·ªçng"]
            ten_list = ["Anh", "B√¨nh", "Ch√¢u", "D≈©ng", "H√†", "H√πng", "Lan", "Linh", "Nam", "Ph√∫c", "Qu·ª≥nh", "S∆°n", "Trang", "Tu·∫•n", "Vy"]

            ho = random.choice(ho_list)
            ten_dem = random.choice(ten_dem_list)
            ten = random.choice(ten_list)
            return f"{ho} {ten_dem} {ten}"  # Tr·∫£ v·ªÅ c·∫£ h·ªç + t√™n ƒë·ªám + t√™n

        full_name = generate_vietnamese_name()
        username_base = re.sub(r'[^a-z0-9]', '', unidecode(full_name.lower()))
        username = f"{username_base}{random.randint(100, 999)}"
        username = username
        password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
        log(f"üë§ H·ªç t√™n: {full_name}")
        log(f"üî§ Username: {username}")
        log(f"üîê M·∫≠t kh·∫©u: {password}")

        # === B∆Ø·ªöC 1: B·∫≠t WARP v√† m·ªü Instagram ===
        time.sleep(3)
        pause_event.wait()
        log("üåê M·ªü Instagram...")

        proxy = proxy_entry.get().strip()

        if is_warp_mode():
            log("üåê ƒêang b·∫≠t WARP ‚Üí b·ªè qua proxy.")
        else:
            if proxy:
                log(f"üåê WARP t·∫Øt ‚Üí d√πng proxy: {proxy}")
                # options will be created below
            else:
                log("üåê WARP t·∫Øt nh∆∞ng kh√¥ng c√≥ proxy ‚Üí d√πng IP th·∫≠t.")

        options = Options()
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--start-maximized")
        # L·∫•y scale v√† k√≠ch th∆∞·ªõc t·ª´ settings
        scale = get_chrome_scale()
        try:
            w, h = get_chrome_size()
        except Exception:
            w, h = 1200, 800
        # N·∫øu scale kh√°c 1, nh√¢n k√≠ch th∆∞·ªõc l√™n
        if scale != 1.0:
            w = int(w * scale)
            h = int(h * scale)
        options.add_argument(f"--window-size={w},{h}")

        # N·∫øu user b·∫≠t ·∫®n Chrome -> ch·∫°y headless v√† set m·ªôt s·ªë flag/size
        is_headless = False
        try:
            if globals().get("hidden_chrome_var") and hidden_chrome_var.get():
                try:
                    options.add_argument("--headless=new")
                except Exception:
                    options.add_argument("--headless")
                options.add_argument("--disable-gpu")
                options.add_argument("--disable-dev-shm-usage")
                options.add_argument("--no-sandbox")
                try:
                    w, h = get_chrome_size()
                    options.add_argument(f"--window-size={w},{h}")
                except Exception:
                    options.add_argument("--window-size=1200,800")
                log("‚ÑπÔ∏è Ch·∫°y Chrome ·ªü ch·∫ø ƒë·ªô ·∫®n (headless).")
                is_headless = True
        except Exception:
            is_headless = False

        # ‚úÖ n·∫øu c√≥ proxy th√¨ th√™m (gi·ªØ l·∫°i logic c≈©)
        if proxy and not is_warp_mode():
            options.add_argument(f"--proxy-server=http://{proxy}")

        # ‚úÖ n·∫øu c√≥ chrome_path th√¨ d√πng binary_location (gi·ªëng V3-Mobile)
        if chrome_path:
            options.binary_location = chrome_path

        driver_path = os.path.join(os.getcwd(), "chromedriver.exe")
        service = Service(driver_path)
        driver = se_webdriver.Chrome(service=service, options=options)
        all_drivers.append(driver)

        # üïí S·∫Øp x·∫øp Chrome gi·ªëng V3-Mobile (ch·ªâ khi kh√¥ng headless)
        try:
            if not is_headless:
                threading.Thread(target=arrange_after_open, args=(driver,), daemon=True).start()
        except Exception:
            pass

        driver.get("https://www.instagram.com/accounts/emailsignup/")
        try:
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.NAME, "emailOrPhone"))
            )
        except Exception as e:
            log(f"‚ùå L·ªói khi m·ªü trang signup (wait emailOrPhone): {repr(e)} ‚Äî ƒë√≥ng phi√™n v√† restart...")
            try:
                if is_warp_mode():
                    warp_off()
            except:
                pass
            try:
                release_position(driver)
            except:
                pass
            try:
                driver.quit()
            except:
                pass
            driver = None
            continue

        # √Åp d·ª•ng scale t·ª´ settings sau khi m·ªü trang
        driver.execute_script(f"document.body.style.zoom='{int(scale*100)}%'")
        time.sleep(3)
        try:
            WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.NAME, "emailOrPhone")))
        except Exception as e:
            log(f"‚ùå L·ªói sau khi apply scale (wait emailOrPhone): {repr(e)} ‚Äî ƒë√≥ng phi√™n v√† restart...")
            try:
                if is_warp_mode():
                    warp_off()
            except:
                pass
            try:
                release_position(driver)
            except:
                pass
            try:
                driver.quit()
            except:
                pass
            driver = None
            continue
        log(f"‚úÖ [Lu·ªìng {thread_id}] Chrome ƒë√£ m·ªü xong v√† trang Instagram s·∫µn s√†ng.")
        try:
            # =========== ƒêi·ªÅn Th√¥ng tin USER-PASS-MAIL-FULLNAME (DESKTOP) ==============
            time.sleep(2)
            type_text_slowly(
                driver.find_element(By.NAME, "emailOrPhone"),
                email,
                delay=get_delay("Mail_type", 0.18)
            )
            log("‚úçÔ∏è ƒê√£ nh·∫≠p email v√†o form ƒëƒÉng k√Ω")
            time.sleep(get_delay("Mail_sleep", 1))
            type_text_slowly(
                driver.find_element(By.NAME, "password"),
                password,
                delay=get_delay("Pass_type", 0.18)
            )
            log("‚úçÔ∏è ƒê√£ nh·∫≠p m·∫≠t kh·∫©u v√†o form ƒëƒÉng k√Ω")
            time.sleep(get_delay("Pass_sleep", 3))
            type_text_slowly(
                driver.find_element(By.NAME, "fullName"),
                full_name,
                delay=get_delay("H·ªç T√™n_type", 0.18)
            )
            log(f"‚úçÔ∏è ƒê√£ nh·∫≠p h·ªç t√™n v√†o form ƒëƒÉng k√Ω: {full_name}")
            time.sleep(get_delay("H·ªç T√™n_sleep", 2))

            # --- X√≥a h·∫øt username c≈© ---
            log("üßπ ƒêang x√≥a username c≈© kh·ªèi form ƒëƒÉng k√Ω...")
            username_elem = driver.find_element(By.NAME, "username")
            username_elem.click()
            time.sleep(0.2)
            username_elem.send_keys(Keys.CONTROL, "a")
            time.sleep(0.1)
            username_elem.send_keys(Keys.DELETE)
            time.sleep(0.2)

            # --- T·∫°o l·∫°i username t·ª´ h·ªç t√™n, random v·ªã tr√≠ d·∫•u '_' v√† '.' v√† s·ªë cu·ªëi ---
            log(f"üîÑ ƒêang t·∫°o l·∫°i username t·ª´ h·ªç t√™n: {full_name}")
            def make_username(full_name):
                # Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát, chuy·ªÉn v·ªÅ kh√¥ng d·∫•u, th∆∞·ªùng
                base = re.sub(r'[^a-z0-9 ]', '', unidecode(full_name.lower()))
                parts = base.split()
                if len(parts) < 2:
                    parts.append('user')
                # Gh√©p c√°c ph·∫ßn l·∫°i, random d·∫•u gi·ªØa c√°c ph·∫ßn
                username_core = parts[0]
                for p in parts[1:]:
                    sep = random.choice(['_', '.', ''])
                    username_core += sep + p
                # Th√™m s·ªë random cu·ªëi c√πng
                username_core += '_' + str(random.randint(1000, 99999))
                return username_core

            username_new = make_username(full_name)
            log(f"üî§ Username m·ªõi t·∫°o: {username_new}")

            # --- Nh·∫≠p username m·ªõi ---
            log(f"‚úçÔ∏è ƒêang nh·∫≠p username m·ªõi v√†o form ƒëƒÉng k√Ω: {username_new}")
            type_text_slowly(
                username_elem,
                username_new,
                delay=get_delay("Username_type", 0.18)
            )

            time.sleep(get_delay("Username_sleep", 3))
            time.sleep(4)

            try:
                new_username = driver.find_element(By.NAME, "username").get_attribute("value") or username
                if new_username != username:
                    log(f"üîÅ Username sau refresh: {username}  ‚ûú  {new_username}")
                    username = new_username  # c·∫≠p nh·∫≠t ƒë·ªÉ b∆∞·ªõc check live & l∆∞u file d√πng t√™n m·ªõi nh·∫•t
                else:
                    log("‚ÑπÔ∏è Username kh√¥ng ƒë·ªïi sau 2 l·∫ßn refresh.")
            except Exception as e:
                log(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c username sau refresh: {e}")

            log("‚úÖ ƒê√£ ƒëi·ªÅn xong form ƒëƒÉng k√Ω")

            log("‚û°Ô∏è ƒêang nh·∫•n n√∫t Ti·∫øp theo ƒë·ªÉ g·ª≠i form ƒëƒÉng k√Ω...")
            pause_event.wait()
            driver.find_element(By.XPATH, "//button[@type='submit']").click()
            log("‚û°Ô∏è ƒê√£ ·∫•n Ti·∫øp theo")
            time.sleep(get_delay("Next_sleep", 2))
            
            # Ch·ªâ √°p d·ª•ng khi ch·ªçn m·∫°ng WARP
            if network_mode_var.get() == "warp":
                success = False
                for attempt in range(2):  # th·ª≠ t·ªëi ƒëa 2 l·∫ßn (l·∫ßn 2 sau khi ƒë·ªïi IP)
                    try:
                        WebDriverWait(driver, 10).until(
                            EC.presence_of_element_located((By.XPATH, "//select[@title='Month:']"))
                        )
                        log("‚úÖ ƒê√£ chuy·ªÉn sang m√†n ch·ªçn ng√†y sinh.")
                        success = True
                        break
                    except Exception as e:
                        if attempt == 0:
                            log(f"‚ùå Kh√¥ng chuy·ªÉn sang m√†n ch·ªçn ng√†y sinh sau khi Next. ƒêang ƒë·ªïi IP WARP v√† th·ª≠ l·∫°i...")
                            if is_warp_mode():
                                warp_change_ip()
                                log("üåê ƒê√£ ƒë·ªïi IP WARP, ch·ªù 10 gi√¢y...")
                                time.sleep(10)
                            try:
                                driver.find_element(By.XPATH, "//button[@type='submit']").click()
                                log("‚û°Ô∏è ƒê√£ th·ª≠ l·∫°i ·∫•n Ti·∫øp theo sau khi ƒë·ªïi IP WARP")
                                time.sleep(get_delay("Next_sleep", 2))
                                time.sleep(4)
                            except Exception as e2:
                                log(f"‚ùå L·ªói khi th·ª≠ l·∫°i ·∫•n Ti·∫øp theo: {repr(e2)}")
                        else:
                            log(f"‚ùå V·∫´n kh√¥ng chuy·ªÉn ƒë∆∞·ª£c sang m√†n ng√†y sinh sau khi ƒë·ªïi IP WARP: {repr(e)}")
                if not success:
                    log("üîÅ ƒê√≥ng phi√™n v√† restart l·∫°i t·ª´ ƒë·∫ßu...")
                    try:
                        if is_warp_mode():
                            warp_off()
                        time.sleep(2)
                        release_position(driver)
                        driver.quit()
                    except:
                        pass
                    continue  # Restart phi√™n trong c√πng lu·ªìng

            # === B∆Ø·ªöC 2: ch·ªçn ng√†y sinh ===
            pause_event.wait()
            if is_warp_mode():
                log("üåê ƒêang t·∫Øt WARP tr∆∞·ªõc khi ch·ªçn ng√†y sinh...")
                warp_off()
                time.sleep(3)
            log("üìÖ ƒêang ch·ªù ph·∫ßn ch·ªçn ng√†y sinh...")
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.XPATH, "//select[@title='Month:']"))
            )
            time.sleep(3)
            year = str(random.randint(1999, 2003))
            month = str(random.randint(1, 12))
            day = str(random.randint(1, 28))

            def select_dropdown_value(driver, dropdown_xpath, value):
                dropdown = Select(driver.find_element(By.XPATH, dropdown_xpath))
                dropdown.select_by_value(value)
                time.sleep(2)

            select_dropdown_value(driver, "//select[@title='Month:']", month)
            select_dropdown_value(driver, "//select[@title='Day:']", str(day))
            select_dropdown_value(driver, "//select[@title='Year:']", year)

            log(f"üìÖ ƒê√£ ch·ªçn ng√†y: {day}, th√°ng: {month}, nƒÉm: {year}")

            next_btn = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Next')]") )
            )
            driver.execute_script("arguments[0].click();", next_btn)
            log("‚úÖ ƒê√£ ch·ªçn ng√†y sinh v√† ·∫•n Ti·∫øp theo")

            # === KI·ªÇM TRA: C√≥ chuy·ªÉn sang m√†n ƒëi·ªÅn code kh√¥ng? ===
            try:
                WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.XPATH, "//input[@placeholder='Confirmation Code']"))
                )
                log("‚úÖ ƒê√£ chuy·ªÉn sang m√†n ƒëi·ªÅn m√£ x√°c minh.")
            except Exception as e:
                log(f"‚ùå Kh√¥ng chuy·ªÉn sang m√†n ƒëi·ªÅn code sau khi ch·ªçn ng√†y sinh. L·ªói: {repr(e)}")
                log("üîÅ ƒê√≥ng phi√™n v√† restart l·∫°i t·ª´ ƒë·∫ßu...")
                try:
                    if is_warp_mode():
                        warp_off()
                    time.sleep(2)
                    release_position(driver)
                    driver.quit()
                except:
                    pass
                driver = None
                continue  # Restart phi√™n trong c√πng lu·ªìng

            # === B∆Ø·ªöC 3: B·∫≠t WARP ƒë·ªÉ l·∫•y m√£ x√°c minh email ===
            pause_event.wait()
            log("‚è≥ ƒê·ª£i 10 gi√¢y ƒë·ªÉ l·∫•y m√£ x√°c minh t·ª´ email...")
            time.sleep(6)
            # --- H√†m ƒë·ª£i DropMail V·ªöI GI·ªöI H·∫†N ---
            def wait_for_dropmail_code(session_id, max_checks=5, interval=5, overall_timeout=300):
                url = "https://dropmail.me/api/graphql/my_token_123"
                query = """
                query($id: ID!) {
                session(id: $id) {
                    mails { fromAddr headerSubject text }
                }
                }"""
                start_time = time.time()
                checks = 0
                while (time.time() - start_time) < overall_timeout and checks < max_checks:
                    try:
                        resp = requests.post(url, json={"query": query, "variables": {"id": session_id}}, timeout=10)
                        data = resp.json()
                        mails = data["data"]["session"]["mails"]
                        if mails:
                            for mail in mails:
                                text = mail.get("text", "")
                                subject = mail.get("headerSubject", "")
                                match = re.search(r"\b\d{6}\b", text) or re.search(r"\b\d{6}\b", subject)
                                if match:
                                    code = match.group(0)
                                    log(f"üì© Nh·∫≠n ƒë∆∞·ª£c m√£ DropMail: {code}")
                                    return code
                        checks += 1
                        log(f"‚åõ Ch∆∞a c√≥ mail DropMail (l·∫ßn {checks}/{max_checks}), ch·ªù th√™m...")
                    except Exception as e:
                        checks += 1
                        log(f"‚ùå L·ªói khi ki·ªÉm tra DropMail (l·∫ßn {checks}/{max_checks}): {repr(e)}")
                    time.sleep(interval)
                log("‚õî Qu√° 5 l·∫ßn ki·ªÉm tra DropMail m√† ch∆∞a c√≥ m√£ ‚Äî b·ªè phi√™n.")
                return None


            # --- H√†m ƒë·ª£i TempMail V·ªöI GI·ªöI H·∫†N ---
            def wait_for_tempmail_code(email, max_checks=5, interval=5, overall_timeout=300):
                headers = {"accept": "application/json"}
                email_encoded = email.replace("@", "%40")
                mail_url = f"https://free.priyo.email/api/messages/{email_encoded}/7jkmE5NM2VS6GqJ9pzlI"
                start_time = time.time()
                checks = 0
                while (time.time() - start_time) < overall_timeout and checks < max_checks:
                    try:
                        resp = requests.get(mail_url, headers=headers, timeout=10)
                        if resp.status_code == 200:
                            messages = resp.json()
                            if messages:
                                subject = messages[0].get("subject", "")
                                log(f"üì¨ Subject email: {subject}")
                                match = re.search(r"\b\d{6}\b", subject)
                                if match:
                                    code = match.group(0)
                                    log(f"üî¢ Nh·∫≠n ƒë∆∞·ª£c m√£ TempMail: {code}")
                                    return code
                        checks += 1
                        log(f"‚åõ Ch∆∞a c√≥ mail TempMail (l·∫ßn {checks}/{max_checks}), ch·ªù th√™m...")
                    except Exception as e:
                        checks += 1
                        log(f"‚ùå L·ªói khi ki·ªÉm tra TempMail (l·∫ßn {checks}/{max_checks}): {repr(e)}")
                    time.sleep(interval)
                log("‚õî Qu√° 5 l·∫ßn ki·ªÉm tra TempMail m√† ch∆∞a c√≥ m√£ ‚Äî b·ªè phi√™n.")
                return None

            # --- ƒêi·ªÅn code mail ---
            try:
                if mail_var.get() == "drop":
                    code = wait_for_dropmail_code(session_id)
                elif mail_var.get() == "temp":
                    code = wait_for_tempmail_code(email)
                else:
                    code = None

                if not code:
                    log("‚õî Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ x√°c minh sau 5 l·∫ßn ki·ªÉm tra. ƒê√≥ng phi√™n hi·ªán t·∫°i v√† t·∫°o phi√™n m·ªõi.")
                    try:
                        warp_off()
                    except:
                        pass
                    try:
                        release_position(driver)   # ‚úÖ tr·∫£ ch·ªó
                        driver.quit()
                    except:
                        pass
                    driver = None
                    # (khuy√™n d√πng continue ƒë·ªÉ kh√¥ng nh√¢n th√™m thread)
                    log("üîÅ Restart phi√™n trong c√πng lu·ªìng.")
                    continue

                # N·∫øu c√≥ code -> nh·∫≠p v√† ti·∫øp t·ª•c nh∆∞ c≈©
                code_input = WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.XPATH, "//input[@placeholder='Confirmation Code']"))
                )
                type_text_slowly(code_input, code, delay=0.3)
                log(f"‚úÖ ƒê√£ nh·∫≠p m√£ x√°c minh: {code}")
                if is_warp_mode():
                    warp_change_ip()
                time.sleep(8)
                # Nh·∫•n n√∫t Next nhi·ªÅu l·∫ßn n·∫øu c√≤n
                # ·∫§n n√∫t Next t·ª´ng lu·ªìng c√°ch nhau 10 gi√¢y n·∫øu ch·∫°y nhi·ªÅu lu·ªìng
                if sync_barrier is not None and sync_barrier.parties > 1:
                    global next_press_lock
                    try:
                        next_press_lock
                    except NameError:
                        next_press_lock = threading.Lock()
                    for i in range(5):
                        with next_press_lock:
                            try:
                                next_btn = WebDriverWait(driver, 5).until(
                                    EC.element_to_be_clickable((By.XPATH, "//div[@role='button' and normalize-space(text())='Next']"))
                                )
                                driver.execute_script("arguments[0].click();", next_btn)
                                time.sleep(5)
                                log(f"üîÅ ·∫§n n√∫t Next l·∫ßn {i+1}")
                                time.sleep(2)
                            except:
                                log("‚úÖ Kh√¥ng c√≤n n√∫t Next, ti·∫øp t·ª•c quy tr√¨nh.")
                                break
                        time.sleep(18)
                else:
                    for i in range(5):
                        try:
                            next_btn = WebDriverWait(driver, 5).until(
                                EC.element_to_be_clickable((By.XPATH, "//div[@role='button' and normalize-space(text())='Next']"))
                            )
                            driver.execute_script("arguments[0].click();", next_btn)
                            time.sleep(5)
                            log(f"üîÅ ·∫§n n√∫t Next l·∫ßn {i+1}")
                            time.sleep(2)
                        except:
                            log("‚úÖ Kh√¥ng c√≤n n√∫t Next, ti·∫øp t·ª•c quy tr√¨nh.")
                            break

                time.sleep(20)

            except Exception as e:
                log(f"‚ùå L·ªói khi nh·∫≠p m√£ x√°c minh: {repr(e)}")

            # === CHECK LIVE/DIE ===
            try:
                global live_count, die_count
                profile_url = f"https://www.instagram.com/{username}/"
                log("üåê ƒêang ki·ªÉm tra tr·∫°ng th√°i Live/Die...")
                driver.get(profile_url)
                time.sleep(6)  # c√≥ th·ªÉ thay b·∫±ng WebDriverWait n·∫øu mu·ªën

                current_url = driver.current_url
                page_source = driver.page_source

                # M·∫∑c ƒë·ªãnh
                status_text = "Unknown"

                # Ph√¢n lo·∫°i tr·∫°ng th√°i
                if "/accounts/login/" in current_url or "Sorry, this page isn't available" in page_source:
                    status_text = "Die"
                elif "checkpoint" in current_url.lower() or "Confirm you're human" in page_source:
                    status_text = "Checkpoint"
                elif (f"@{username}" in page_source) or (f"instagram.com/{username}" in current_url):
                    status_text = "Live"
                else:
                    status_text = "Die"

                # C·∫≠p nh·∫≠t bi·∫øn ƒë·∫øm + log
                if status_text == "Live":
                    live_count += 1
                    live_var.set(str(live_count))
                    update_rate()
                    log("‚úÖ T√†i kho·∫£n Live")
                else:
                    die_count += 1
                    die_var.set(str(die_count))
                    update_rate()
                    log(f"‚ùå {status_text} ‚Äî t√≠nh l√† Die")

                # === L·∫•y Cookie ===
                try:
                    cookies = driver.get_cookies()
                    cookie_str = "; ".join([f"{c['name']}={c['value']}" for c in cookies]) if cookies else ""
                    log("üç™ Cookie hi·ªán t·∫°i:")
                    log(cookie_str if cookie_str else "(empty)")
                    time.sleep(3)
                except Exception as e:
                    cookie_str = ""
                    log(f"‚ùå L·ªói khi l·∫•y cookie: {repr(e)}")

                # N·∫øu KH√îNG ph·∫£i Live th√¨ insert ngay b√¢y gi·ªù
                if status_text.lower() in ("die", "checkpoint", "unknown"):
                    # n·∫øu c√≥ app (Tk root) th√¨:
                    try:
                        app.after(0, lambda: insert_to_tree("Die", username, password, email, cookie_str, two_fa_code=""))
                    except Exception:
                        insert_to_tree("Die", username, password, email, cookie_str, two_fa_code="")

                    # L∆∞u file (optional) ‚Äì c√≥ fallback cho save_format
                    try:
                        file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Die.txt")
                        info_map = {"Username": username, "Pass": password, "Mail": email, "Cookie": cookie_str, "2FA": ""}
                        fields = save_format if ('save_format' in globals() and isinstance(save_format, (list,tuple)) and save_format) \
                                else ["Username","Pass","Mail","Cookie","2FA"]
                        line = "|".join([info_map.get(field, "") for field in fields])
                        with open(file_path, "a", encoding="utf-8") as f:
                            f.write(line + "\n")
                        log(f"üíæ (Die early) ƒê√£ l∆∞u th√¥ng tin v√†o '{file_path}'")
                    except Exception as e:
                        log(f"‚ùå (Die early) L·ªói khi l∆∞u file: {repr(e)}")

                    # Quy·∫øt ƒë·ªãnh restart
                    try:
                        warp_off()
                        time.sleep(2)
                        release_position(driver)
                        driver.quit()
                    except:
                        pass
                    driver = None
                    log("üîÅ Kh·ªüi ch·∫°y l·∫°i phi√™n...")
                    continue
                else:
                    log("‚û°Ô∏è LIVE: Ti·∫øp t·ª•c B∆Ø·ªöC TI·∫æP THEO (Follow/‚Ä¶)")

            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi check live/die: {repr(e)}")
        except Exception as e:
            log(f"‚ùå L·ªói tr√¨nh duy·ªát: {repr(e)}")
            try:
                if is_warp_mode():
                    warp_off()
                release_position(driver)  # ‚úÖ tr·∫£ ch·ªó
                driver.quit()
            except:
                pass
            log("üîÑ ƒêang ch·∫°y l·∫°i t·ª´ ƒë·∫ßu sau l·ªói tr√¨nh duy·ªát...")
            # Khuy√™n: g·ªçi continue thay v√¨ run(thread_id) (tr√°nh nh√¢n thread)
            continue
        # === B∆Ø·ªöC 7: X·ª≠ l√Ω b·∫≠t 2FA ===
        if twofa_var.get():
            try:
                pause_event.wait()
                warp_off()
                log("üîê B·∫Øt ƒë·∫ßu b·∫≠t x√°c th·ª±c hai y·∫øu t·ªë (2FA)...")
                time.sleep(6)

                # Truy c·∫≠p trang b·∫≠t 2FA
                driver.get("https://accountscenter.instagram.com/password_and_security/two_factor/?theme=dark")
                WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                time.sleep(8)
                driver.execute_script(f"document.body.style.zoom='{int(scale*100)}%'")
                
                # Ch·ªçn t√†i kho·∫£n Instagram
                try:
                    account_btn = WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((
                            By.XPATH, "//div[@role='button' and descendant::div[contains(text(),'Instagram')]]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", account_btn)
                    time.sleep(1)
                    account_btn.click()
                    log("‚úÖ ƒê√£ ch·ªçn t√†i kho·∫£n Instagram")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ö†Ô∏è Kh√¥ng ch·ªçn ƒë∆∞·ª£c t√†i kho·∫£n: {repr(e)}")
                    return

                # Nh·∫•n n√∫t "Continue"
                try:
                    continue_btn = WebDriverWait(driver, 20).until(
                        EC.presence_of_element_located((
                            By.XPATH,
                            "//div[@role='button' and descendant::span[normalize-space(text())='Continue']]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", continue_btn)
                    time.sleep(3)
                    driver.execute_script("arguments[0].click();", continue_btn)
                    log("‚úÖ ƒê√£ click n√∫t Continue")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ùå Kh√¥ng th·ªÉ click n√∫t Continue: {repr(e)}")
                    return

                # L·∫•y m√£ 2FA secret
                try:
                    span_xpath = "//div[contains(@class,'x16grhtn')]//span"
                    span_elem = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, span_xpath))
                    )
                    two_fa_code = span_elem.text.strip().replace(" ", "")
                    log(f"üîê M√£ 2FA secret: {two_fa_code}")
                except Exception as e:
                    log(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ 2FA secret: {repr(e)}")
                    return
                time.sleep(3)
                # Nh·∫•n n√∫t Next ƒë·ªÉ chuy·ªÉn t·ªõi nh·∫≠p m√£ OTP
                try:
                    next_btn = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((
                            By.XPATH, "//div[@role='button' and descendant::span[normalize-space(text())='Next']]"
                        ))
                    )
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_btn)
                    time.sleep(1)
                    driver.execute_script("arguments[0].click();", next_btn)
                    log("‚úÖ ƒê√£ nh·∫•n n√∫t Next ƒë·ªÉ nh·∫≠p m√£ OTP")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ùå Kh√¥ng nh·∫•n ƒë∆∞·ª£c n√∫t Next sau m√£ secret: {repr(e)}")
                    return

                # Sinh m√£ OTP t·ª´ m√£ secret b·∫±ng pyotp
                otp_code = None
                try:
                    totp = pyotp.TOTP(two_fa_code)
                    otp_code = totp.now()
                    log(f"üî¢ M√£ OTP t·∫°o t·ª´ pyotp: {otp_code}")
                except Exception as e:
                    log(f"‚ùå L·ªói khi t·∫°o OTP t·ª´ pyotp: {repr(e)}")
                    return
                time.sleep(3)
                # Nh·∫≠p m√£ OTP v√†o √¥ nh·∫≠p
                if otp_code:
                    try:
                        otp_input = WebDriverWait(driver, 10).until(
                            EC.presence_of_element_located((By.XPATH, "//input[@type='text' and @maxlength='6']"))
                        )
                        otp_input.clear()
                        otp_input.send_keys(otp_code)
                        log("‚úÖ ƒê√£ nh·∫≠p m√£ OTP.")
                        time.sleep(2)
                    except Exception as e:
                        log(f"‚ùå L·ªói khi nh·∫≠p OTP: {repr(e)}")
                    # Nh·∫•n n√∫t Next cu·ªëi c√πng ƒë·ªÉ ho√†n t·∫•t b·∫≠t 2FA
                    try:
                        driver.execute_script("""
                            [...document.querySelectorAll("div[role='button']")].forEach(el => {
                                if (el.innerText.trim() === 'Next') el.click();
                            });
                        """)
                        log("‚úÖ ƒê√£ nh·∫•n n√∫t Next ƒë·ªÉ ho√†n t·∫•t b·∫≠t 2FA")
                        time.sleep(12)
                    except Exception as e:
                        log(f"‚ùå L·ªói khi nh·∫•n n√∫t Next ho√†n t·∫•t 2FA: {repr(e)}")
                        return
                    driver.execute_script("""
                    const btn = [...document.querySelectorAll("button, div[role=button]")]
                        .find(el => el.textContent.trim() === "Done");

                    if (btn) {
                        btn.click();
                        return true;
                    } else {
                        return false;
                    }
                    """)
            except Exception as e:
                log(f"‚ùå L·ªói to√†n b·ªô b∆∞·ªõc b·∫≠t 2FA: {repr(e)}")
            time.sleep(3)

        # === Insert v√†o Treeview ===
        tree_item_id = None
        try:
            status_tag = "LIVE" if status_text.lower() == "live" else "DIE"
            phone_val = locals().get("phone", "")
            token_val = locals().get("token", "")

            tree_item_id = insert_to_tree(status_text, username, password, email, cookie_str, locals().get("two_fa_code", ""))
            log(f"‚úÖ [Desktop] ƒê√£ th√™m v√†o TreeView v·ªõi ID: {tree_item_id}")
        except Exception as e:
            log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m v√†o Treeview: {repr(e)}")

        # === L∆ØU TH√îNG TIN ===
        try:
            file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Live.txt")

            info_map = {
                "Username": username,
                "Pass": password,
                "Mail": email,
                "Cookie": cookie_str if 'cookie_str' in locals() else '',
                "2FA": two_fa_code if 'two_fa_code' in locals() else '',
            }

            # d√πng tr·ª±c ti·∫øp save_format t·ª´ UI
            line = "|".join([info_map.get(field, "") for field in save_format])

            with open(file_path, "a", encoding="utf-8") as f:
                f.write(line + "\n")

            log(f"üíæ ƒê√£ l∆∞u th√¥ng tin v√†o '{file_path}'")
        except Exception as e:
            log(f"‚ùå L·ªói khi l∆∞u file: {repr(e)}")

        # === B∆Ø·ªöC 5: Follow ===
        if follow_var.get():
            if is_warp_mode():
                warp_change_ip()
                time.sleep(8)
            followed_count = 0
            try:
                pause_event.wait()
                log("üöÄ [Desktop] B·∫Øt ƒë·∫ßu follow c√°c link...")
                time.sleep(3)

                follow_links = [
                    "https://www.instagram.com/shx_pe06/",
                    "https://www.instagram.com/shxuy0bel421162._/",
                    "https://www.instagram.com/ductoan1103/",
                    "https://www.instagram.com/v.anh.26/",
                    "https://www.instagram.com/datgia172/",
                    "https://www.instagram.com/mhai_187/",
                    "https://www.instagram.com/valentin_otz/",
                    "https://www.instagram.com/ductoannn111/",
                    "https://www.instagram.com/nhd_305.nh/",
                    "https://www.instagram.com/ngockem_/",
                ]

                # L·∫•y s·ªë l∆∞·ª£ng follow t·ª´ √¥ nh·∫≠p Desktop
                try:
                    num_follow = int(desktop_follow_count_entry.get())
                except:
                    num_follow = 5
                num_follow = min(num_follow, len(follow_links))  

                selected_links = random.sample(follow_links, num_follow)

                for link in selected_links:
                    try:
                        driver.get(link)
                        log(f"üåê [Desktop] ƒê√£ m·ªü link: {link}")
                        time.sleep(6)
                        driver.execute_script(f"document.body.style.zoom='{int(scale*100)}%'")
                        # Check checkpoint or die after each follow
                        current_url = driver.current_url
                        page_source = driver.page_source
                        checkpoint_detected = False
                        if "checkpoint" in current_url.lower() or "Confirm you're human" in page_source or "/accounts/login/" in current_url or "Sorry, this page isn't available" in page_source:
                            checkpoint_detected = True

                        if checkpoint_detected:
                            log("‚ùå [Desktop] Ph√°t hi·ªán checkpoint ho·∫∑c Die trong qu√° tr√¨nh follow!")
                            # Update TreeView: LIVE -> DIE
                            if tree_item_id:
                                app.after(0, lambda: update_tree_column(tree_item_id, "STATUS", "DIE"))
                                app.after(0, lambda: update_tree_column(tree_item_id, "FOLLOW", "‚ùå"))
                            # Chuy·ªÉn file Live.txt sang Die.txt
                            try:
                                live_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Live.txt")
                                die_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Die.txt")
                                with open(live_path, "r", encoding="utf-8") as f:
                                    lines = f.readlines()
                                new_lines = []
                                moved_line = None
                                for line in lines:
                                    if username in line and moved_line is None:
                                        moved_line = line
                                    else:
                                        new_lines.append(line)
                                if moved_line:
                                    with open(live_path, "w", encoding="utf-8") as f:
                                        f.writelines(new_lines)
                                    with open(die_path, "a", encoding="utf-8") as f:
                                        f.write(moved_line)
                                    log(f"üîÑ ƒê√£ chuy·ªÉn t√†i kho·∫£n t·ª´ Live.txt sang Die.txt: {username}")
                            except Exception as e:
                                log(f"‚ùå L·ªói chuy·ªÉn file Live->Die: {repr(e)}")
                            # B√°o ƒë·ªè
                            log("üî¥ T√†i kho·∫£n ƒë√£ b·ªã checkpoint/DIE. Restart l·∫°i phi√™n...")
                            try:
                                warp_off()
                                time.sleep(2)
                                release_position(driver)
                                driver.quit()
                            except:
                                pass
                            driver = None
                            continue  # Restart l·∫°i phi√™n

                        follow_button = WebDriverWait(driver, 10).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Follow']"))
                        )
                        follow_button.click()
                        followed_count += 1
                        log(f"‚úÖ [Desktop] ƒê√£ follow: {link}")
                        # Update FOLLOW column
                        if tree_item_id:
                            follow_status = f"{followed_count}/{num_follow}"
                            app.after(0, lambda s=follow_status: update_tree_column(tree_item_id, "FOLLOW", s))
                            log(f"üìä [Desktop] C·∫≠p nh·∫≠t FOLLOW: {follow_status}")
                        time.sleep(6)
                    except Exception as e:
                        log(f"‚ùå [Desktop] Kh√¥ng th·ªÉ follow {link}: {repr(e)}")

            except Exception as e:
                log(f"‚ùå L·ªói trong qu√° tr√¨nh follow: {repr(e)}")
        else:
            log("‚è≠ B·ªè qua b∆∞·ªõc Follow")

        # === B∆Ø·ªöC 6: Upload avatar ·ªü giao di·ªán mobile ===
        if bioava_var.get():
            if is_warp_mode():
                warp_off()
                time.sleep(4)
        
        avatar_success = False
        gender_saved = False
        bio_saved = False
        post_shared = False
        try:
            log("üì± [Desktop] Chuy·ªÉn sang giao di·ªán Mobile (iPhone 15 Pro Max)...")
            driver.execute_cdp_cmd("Emulation.setDeviceMetricsOverride", {
                "mobile": True,
                "width": 390,
                "height": 844,
                "deviceScaleFactor": 3
            })
            driver.execute_cdp_cmd("Emulation.setUserAgentOverride", {
                "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Mobile/15E148 Safari/604.1"
            })
            driver.refresh()
            time.sleep(5)
            driver.execute_script(f"document.body.style.zoom='{int(scale*100)}%'")

            # ƒê√≥ng popup Not Now n·∫øu c√≥
            driver.execute_script("""
                let btn = [...document.querySelectorAll("span,button")]
                    .find(el => ["Not now", "Kh√¥ng ph·∫£i b√¢y gi·ªù"].includes(el.innerText.trim()));
                if (btn) btn.click();
            """)
            time.sleep(3)

            # M·ªü trang ch·ªânh s·ª≠a h·ªì s∆°
            log("üë§ [Desktop] M·ªü trang ch·ªânh s·ª≠a h·ªì s∆° ƒë·ªÉ upload avatar...")
            driver.get("https://www.instagram.com/accounts/edit/")
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.XPATH, "//input[@accept='image/jpeg,image/png']"))
            )
            time.sleep(8)

            # ==== CHECKPOINT CHECK 1 ====
            current_url = driver.current_url
            page_source = driver.page_source
            checkpoint_detected = False
            if "checkpoint" in current_url.lower() or "Confirm you're human" in page_source or "/accounts/login/" in current_url or "Sorry, this page isn't available" in page_source:
                checkpoint_detected = True
            if checkpoint_detected:
                log("‚ùå [Desktop] Ph√°t hi·ªán checkpoint ho·∫∑c Die khi m·ªü trang ch·ªânh s·ª≠a h·ªì s∆°!")
                if tree_item_id:
                    app.after(0, lambda: update_tree_column(tree_item_id, "STATUS", "DIE"))
                try:
                    live_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Live.txt")
                    die_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Die.txt")
                    with open(live_path, "r", encoding="utf-8") as f:
                        lines = f.readlines()
                    new_lines = []
                    moved_line = None
                    for line in lines:
                        if username in line and moved_line is None:
                            moved_line = line
                        else:
                            new_lines.append(line)
                    if moved_line:
                        with open(live_path, "w", encoding="utf-8") as f:
                            f.writelines(new_lines)
                        with open(die_path, "a", encoding="utf-8") as f:
                            f.write(moved_line)
                        log(f"üîÑ ƒê√£ chuy·ªÉn t√†i kho·∫£n t·ª´ Live.txt sang Die.txt: {username}")
                except Exception as e:
                    log(f"‚ùå L·ªói chuy·ªÉn file Live->Die: {repr(e)}")
                log("üî¥ T√†i kho·∫£n checkpoint/DIE. Restart l·∫°i phi√™n...")
                try:
                    warp_off()
                    time.sleep(2)
                    release_position(driver)
                    driver.quit()
                except:
                    pass
                driver = None
                return  # d·ª´ng b∆∞·ªõc 6

            # Nh·∫•n Prefer not to say
            driver.execute_script("""
                const preferEl = document.evaluate(
                    "//div[span[normalize-space(text())='Prefer not to say']]",
                    document,
                    null,
                    XPathResult.FIRST_ORDERED_NODE_TYPE,
                    null
                ).singleNodeValue;
                if (preferEl) {
                    preferEl.click();
                } else {
                    console.warn("‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ 'Prefer not to say'");
                }
                """)
            time.sleep(3)
            
            # Ch·ªçn female
            try:
                driver.execute_script("""
                    const femaleOption = document.evaluate(
                        "//span[normalize-space(text())='Female']",
                        document,
                        null,
                        XPathResult.FIRST_ORDERED_NODE_TYPE,
                        null
                    ).singleNodeValue;
                    if (femaleOption) {
                        femaleOption.click();
                    } else {
                        console.warn("‚ùå Kh√¥ng t√¨m th·∫•y option 'Female'");
                    }
                    """)
                time.sleep(3)
                gender_saved = True
                if tree_item_id:
                    app.after(0, lambda: update_tree_column(tree_item_id, "GENDER", "‚úÖ"))
                    log("‚úÖ [Desktop] ƒê√£ ch·ªçn Gender: Female")
            except Exception as e:
                if tree_item_id:
                    app.after(0, lambda: update_tree_column(tree_item_id, "GENDER", "‚ùå"))
                log(f"‚ùå [Desktop] L·ªói ch·ªçn Gender: {repr(e)}")

            # ƒêi·ªÅn Bio
            try:
                driver.execute_script("""
                (function(val){
                    const el = document.querySelector("textarea[name='biography'], #pepBio, textarea[aria-label='Bio'], textarea[aria-label='Ti·ªÉu s·ª≠']");
                    if (!el) { console.warn("‚ùå Kh√¥ng t√¨m th·∫•y √¥ Bio (#pepBio/biography)"); return; }
                    const proto  = el.tagName === 'TEXTAREA' ? HTMLTextAreaElement.prototype : HTMLInputElement.prototype;
                    const setter = Object.getOwnPropertyDescriptor(proto, 'value')?.set;
                    if (setter) setter.call(el, val); else el.value = val;
                    el.dispatchEvent(new Event('input',  {bubbles:true}));
                    el.dispatchEvent(new Event('change', {bubbles:true}));
                    el.blur();
                    console.log("‚úçÔ∏è ƒê√£ ƒëi·ªÅn Bio:", val);
                })(arguments[0]);
                """)
                log(f"‚úçÔ∏è [Desktop] ƒê√£ ƒëi·ªÅn Bio")
                time.sleep(1.5)
                bio_saved = True
            except Exception as e:
                log(f"‚ùå [Desktop] L·ªói ƒëi·ªÅn Bio: {repr(e)}")

            # ==== CHECKPOINT CHECK 2 ====
            current_url = driver.current_url
            page_source = driver.page_source
            checkpoint_detected = False
            if "checkpoint" in current_url.lower() or "Confirm you're human" in page_source or "/accounts/login/" in current_url or "Sorry, this page isn't available" in page_source:
                checkpoint_detected = True
            if checkpoint_detected:
                log("‚ùå [Desktop] Ph√°t hi·ªán checkpoint ho·∫∑c Die sau khi ƒëi·ªÅn Bio!")
                if tree_item_id:
                    app.after(0, lambda: update_tree_column(tree_item_id, "STATUS", "DIE"))
                    app.after(0, lambda: update_tree_column(tree_item_id, "BIO", "‚ùå"))
                try:
                    live_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Live.txt")
                    die_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Die.txt")
                    with open(live_path, "r", encoding="utf-8") as f:
                        lines = f.readlines()
                    new_lines = []
                    moved_line = None
                    for line in lines:
                        if username in line and moved_line is None:
                            moved_line = line
                        else:
                            new_lines.append(line)
                    if moved_line:
                        with open(live_path, "w", encoding="utf-8") as f:
                            f.writelines(new_lines)
                        with open(die_path, "a", encoding="utf-8") as f:
                            f.write(moved_line)
                        log(f"üîÑ ƒê√£ chuy·ªÉn t√†i kho·∫£n t·ª´ Live.txt sang Die.txt: {username}")
                except Exception as e:
                    log(f"‚ùå L·ªói chuy·ªÉn file Live->Die: {repr(e)}")
                log("üî¥ T√†i kho·∫£n checkpoint/DIE. Restart l·∫°i phi√™n...")
                try:
                    warp_off()
                    time.sleep(2)
                    release_position(driver)
                    driver.quit()
                except:
                    pass
                driver = None
                return

            # Nh·∫•n Submit
            driver.execute_script("""
            (function(){
                const xps = [
                "//div[@role='button' and normalize-space(text())='Submit']",
                "//button[normalize-space()='Submit']",
                "//button[normalize-space()='Save']",
                "//button[normalize-space()='L∆∞u']",
                "//div[@role='button' and .//span[normalize-space(text())='Submit']]"
                ];
                for (const xp of xps) {
                const el = document.evaluate(xp, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                if (el) { el.scrollIntoView({block:'center'}); el.click(); console.log("‚û°Ô∏è ƒê√£ click Submit/Save"); return; }
                }
                console.warn("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Submit/Save");
            })();
            """)
            time.sleep(2)
            
            # Update BIO column
            if tree_item_id:
                if bio_saved:
                    app.after(0, lambda: update_tree_column(tree_item_id, "BIO", "‚úÖ"))
                    log("‚úÖ [Desktop] Bio ƒë√£ l∆∞u th√†nh c√¥ng")
                else:
                    app.after(0, lambda: update_tree_column(tree_item_id, "BIO", "‚ùå"))
                    log("‚ùå [Desktop] Bio l∆∞u th·∫•t b·∫°i")

            # L·∫•y ·∫£nh v√† upload
            try:
                if not ava_folder_path or not os.path.exists(ava_folder_path):
                    log("‚ùå [Desktop] Ch∆∞a ch·ªçn th∆∞ m·ª•c ·∫£nh ho·∫∑c th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i.")
                    if tree_item_id:
                        app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚ùå"))
                else:
                    image_files = [f for f in os.listdir(ava_folder_path) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
                    if image_files:
                        selected_path = os.path.join(ava_folder_path, random.choice(image_files))
                        driver.find_element(By.XPATH, "//input[@accept='image/jpeg,image/png']").send_keys(selected_path)
                        log(f"‚úÖ [Desktop] ƒê√£ upload avatar: {os.path.basename(selected_path)}")
                        time.sleep(3)
                        
                        # L∆∞u avatar
                        WebDriverWait(driver, 15).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[text()='Save']"))
                        ).click()
                        log("üíæ [Desktop] ƒê√£ l∆∞u avatar")
                        avatar_success = True
                        if tree_item_id:
                            app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚úÖ"))
                        time.sleep(12)

                        # N·∫øu c√≥ n√∫t Post th√¨ click
                        try:
                            post_btn = WebDriverWait(driver, 5).until(
                                EC.element_to_be_clickable((By.XPATH, "//button[contains(@class,'_a9--') and text()='Post']"))
                            )
                            driver.execute_script("arguments[0].click();", post_btn)
                            log("‚úÖ [Desktop] ƒê√£ click Post")
                            post_shared = True
                            if tree_item_id:
                                app.after(0, lambda: update_tree_column(tree_item_id, "POST", "‚úÖ"))
                            time.sleep(12)
                        except:
                            log("‚Ñπ [Desktop] Kh√¥ng th·∫•y n√∫t Post, b·ªè qua.")
                            if tree_item_id:
                                app.after(0, lambda: update_tree_column(tree_item_id, "POST", "‚ùå"))
                    else:
                        log("‚ùå [Desktop] Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá trong th∆∞ m·ª•c.")
                        if tree_item_id:
                            app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚ùå"))
            except Exception as e:
                log(f"‚ùå [Desktop] L·ªói upload avatar: {repr(e)}")
                if tree_item_id:
                    app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚ùå"))

            # ==== CHECKPOINT CHECK 3 ====
            current_url = driver.current_url
            page_source = driver.page_source
            checkpoint_detected = False
            if "checkpoint" in current_url.lower() or "Confirm you're human" in page_source or "/accounts/login/" in current_url or "Sorry, this page isn't available" in page_source:
                checkpoint_detected = True
            if checkpoint_detected:
                log("‚ùå [Desktop] Ph√°t hi·ªán checkpoint ho·∫∑c Die sau khi upload avatar!")
                if tree_item_id:
                    app.after(0, lambda: update_tree_column(tree_item_id, "STATUS", "DIE"))
                    app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚ùå"))
                try:
                    live_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Live.txt")
                    die_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "Die.txt")
                    with open(live_path, "r", encoding="utf-8") as f:
                        lines = f.readlines()
                    new_lines = []
                    moved_line = None
                    for line in lines:
                        if username in line and moved_line is None:
                            moved_line = line
                        else:
                            new_lines.append(line)
                    if moved_line:
                        with open(live_path, "w", encoding="utf-8") as f:
                            f.writelines(new_lines)
                        with open(die_path, "a", encoding="utf-8") as f:
                            f.write(moved_line)
                        log(f"üîÑ ƒê√£ chuy·ªÉn t√†i kho·∫£n t·ª´ Live.txt sang Die.txt: {username}")
                except Exception as e:
                    log(f"‚ùå L·ªói chuy·ªÉn file Live->Die: {repr(e)}")
                log("üî¥ T√†i kho·∫£n checkpoint/DIE. Restart l·∫°i phi√™n...")
                try:
                    warp_off()
                    time.sleep(2)
                    release_position(driver)
                    driver.quit()
                    driver = None
                except:
                    pass
                return
                    
        except Exception as e:
            log(f"‚ùå [Desktop] L·ªói B∆∞·ªõc 6: {repr(e)}")
            if tree_item_id:
                if not gender_saved:
                    app.after(0, lambda: update_tree_column(tree_item_id, "GENDER", "‚ùå"))
                if not bio_saved:
                    app.after(0, lambda: update_tree_column(tree_item_id, "BIO", "‚ùå"))
                if not avatar_success:
                    app.after(0, lambda: update_tree_column(tree_item_id, "AVATAR", "‚ùå"))
                if not post_shared:
                    app.after(0, lambda: update_tree_column(tree_item_id, "POST", "‚ùå"))

        # Quay l·∫°i giao di·ªán Desktop
        log("üñ• Quay l·∫°i giao di·ªán Desktop...")
        driver.execute_cdp_cmd("Emulation.clearDeviceMetricsOverride", {})
        driver.execute_cdp_cmd("Emulation.setUserAgentOverride", {
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
        })
        driver.refresh()
        time.sleep(10)

        # === B·∫¨T CH·∫æ ƒê·ªò CHUY√äN NGHI·ªÜP (Creator -> Personal blog) ===
        if pro_mode_var.get():
            professional_success = False
            try:
                pause_event.wait()
                log("üíº [Desktop] ƒêang b·∫≠t ch·∫ø ƒë·ªô chuy√™n nghi·ªáp (Creator -> Personal blog)...")
                driver.get("https://www.instagram.com/accounts/convert_to_professional_account/")
                WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                time.sleep(10)
                driver.execute_script(f"document.body.style.zoom='{int(scale*100)}%'")
                # 1) Ch·ªçn Creator
                account_type = pro_type_var.get()
                if account_type == "Creator":
                    selector = "IGDSRadioButtonmedia_creator"
                else:
                    selector = "IGDSRadioButtonbusiness"
                try:
                    radio = WebDriverWait(driver, 8).until(
                        EC.element_to_be_clickable((By.ID, selector))
                    )
                    radio.click()
                    log(f"‚úÖ [Desktop] ƒê√£ ch·ªçn {account_type}")
                    time.sleep(3)
                except Exception as e:
                    log(f"‚ö†Ô∏è [Desktop] Kh√¥ng t√¨m th·∫•y n√∫t ch·ªçn {account_type}: {repr(e)}")
                    if tree_item_id:
                        app.after(0, lambda: update_tree_column(tree_item_id, "PROFESSIONAL", "‚ùå"))
                    raise

                # 2) Nh·∫•n Next qua 2 m√†n h√¨nh gi·ªõi thi·ªáu
                for i in range(2):
                    try:
                        next_btn = WebDriverWait(driver, 5).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='Next' or normalize-space()='Ti·∫øp']"))
                        )
                        next_btn.click()
                        log(f"‚û°Ô∏è [Desktop] ƒê√£ nh·∫•n Next {i+1}")
                        time.sleep(1.5)
                    except Exception as e:
                        log(f"‚ÑπÔ∏è [Desktop] Kh√¥ng t√¨m th·∫•y Next {i+1}: {repr(e)}")
                        break
                
                # 3) Tick Show category on profile
                driver.execute_script("""
                    document.querySelectorAll('input[type="checkbox"][aria-label="Show category on profile"]').forEach(el => { 
                        if (el.getAttribute("aria-checked") === "false") {
                            el.click();
                        }
                    });
                """)
                time.sleep(3)

                # 4) Tick Category theo l·ª±a ch·ªçn GUI
                category = category_var.get()
                category_map = {
                    "Personal blog": "2700",
                    "Product/service": "2201",
                    "Art": "2903",
                    "Musician/band": "180164648685982",
                    "Shopping & retail": "200600219953504",
                    "Health/beauty": "2214",
                    "Grocery Store": "150108431712141"
                }
                cat_code = category_map.get(category)
                if cat_code:
                    js = f'document.querySelector(\'input[type="radio"][aria-label="{cat_code}"]\').click();'
                    driver.execute_script(js)
                    log(f"‚úÖ [Desktop] ƒê√£ ch·ªçn Category: {category}")
                    time.sleep(3)
                else:
                    log(f"‚ö†Ô∏è [Desktop] Kh√¥ng t√¨m th·∫•y m√£ category cho {category}")
                    if tree_item_id:
                        app.after(0, lambda: update_tree_column(tree_item_id, "PROFESSIONAL", "‚ùå"))
                    raise Exception(f"Category not found: {category}")

                # 5) Nh·∫•n Done 
                driver.execute_script("""
                    document.querySelectorAll('button[type="button"]').forEach(el => {
                        if (el.innerText.trim() === 'Done') el.click();
                    });
                """)
                time.sleep(3)
                
                # 6) X√°c nh·∫≠n popup Switch to Professional Account
                driver.execute_script("""
                    document.querySelectorAll('button').forEach(el => { 
                        if (el.innerText.trim() === 'Continue' || el.innerText.trim() === 'Ti·∫øp t·ª•c') {
                            el.click();
                        }
                    });
                """)
                time.sleep(15)
                
                # 7) Nh·∫•n Done ƒë·ªÉ ho√†n th√†nh 
                driver.execute_script("document.querySelector('button._aswp._aswr._aswu._aswy._asw_._asx2').click()")
                time.sleep(5)
                
                professional_success = True
                if tree_item_id:
                    app.after(0, lambda: update_tree_column(tree_item_id, "PROFESSIONAL", "‚úÖ"))
                log("‚úÖ [Desktop] ƒê√£ b·∫≠t ch·∫ø ƒë·ªô chuy√™n nghi·ªáp th√†nh c√¥ng")
                
            except Exception as e:
                log(f"‚ùå [Desktop] L·ªói khi b·∫≠t ch·∫ø ƒë·ªô chuy√™n nghi·ªáp: {repr(e)}")
                if tree_item_id:
                    app.after(0, lambda: update_tree_column(tree_item_id, "PROFESSIONAL", "‚ùå"))

            # === K·∫æT TH√öC PHI√äN ===
            try:
                if is_warp_mode():
                    warp_off()
                    time.sleep(2)
                release_position(driver)       # ‚úÖ tr·∫£ ch·ªó
                driver.quit()
                log("üëã ƒê√£ ƒë√≥ng tr√¨nh duy·ªát (driver.quit()).")
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói khi quit driver: {repr(e)}")

# === Giao di·ªán TKinter c√≥ n·ªÅn ===
def open_file_da_reg():
    file_path = "Live.txt"
    if os.path.exists(file_path):
        try:
            os.startfile(file_path)  # M·ªü b·∫±ng ch∆∞∆°ng tr√¨nh m·∫∑c ƒë·ªãnh tr√™n Windows
        except Exception as e:
            log(f"‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c file: {repr(e)}")
    else:
        log("‚ö†Ô∏è File 'Live.txt' ch∆∞a t·ªìn t·∫°i.")

def show_intro(app, main_func):
    intro = tk.Toplevel(app)
    intro.overrideredirect(True)
    intro.attributes("-topmost", True)

    from PIL import Image, ImageTk
    img = Image.open("Autointro.png").convert("RGBA")
    new_w, new_h = 900, 440
    img = img.resize((new_w, new_h), Image.LANCZOS)
    logo = ImageTk.PhotoImage(img)

    sw = intro.winfo_screenwidth()
    sh = intro.winfo_screenheight()
    x = (sw - new_w) // 2
    y = (sh - new_h) // 2
    intro.geometry(f"{new_w}x{new_h}+{x}+{y}")

    trans_color = "magenta"
    intro.config(bg=trans_color)
    lbl = tk.Label(intro, image=logo, bg=trans_color, border=0)
    lbl.image = logo
    lbl.pack(fill="both", expand=True)

    try:
        intro.wm_attributes("-transparentcolor", trans_color)
    except Exception:
        pass

    def fade_in(alpha=0):
        if alpha <= 100:
            intro.attributes("-alpha", alpha / 100)
            intro.after(25, fade_in, alpha + 8)
        else:
            intro.after(1500, fade_out, 100)

    def fade_out(alpha=100):
        if alpha >= 0:
            intro.attributes("-alpha", alpha / 100)
            intro.after(25, fade_out, alpha - 8)
        else:
            try:
                intro.destroy()
            except:
                pass
            main_func()

    intro.attributes("-alpha", 0.0)
    fade_in()

app = tk.Tk()
app.withdraw() 
app.title("Instagram Auto Creator")
# --- Center window on screen ---
window_width = 1366
window_height = 830
screen_width = app.winfo_screenwidth()
screen_height = app.winfo_screenheight()
x = int((screen_width - window_width) / 2)
y = int((screen_height - window_height) / 2)
app.geometry(f"{window_width}x{window_height}+{x}+{y}")
app.resizable(True, True)

# --- Bi·∫øn ƒë·∫øm Live/Die/Rate ---
live_var = tk.StringVar(value="0")
die_var  = tk.StringVar(value="0")
rate_var = tk.StringVar(value="0%")

# t·∫°o StringVar sau khi app ƒë√£ t·ªìn t·∫°i
scrcpy_path_var = tk.StringVar(value="(ch∆∞a ch·ªçn scrcpy.exe)")

# ===== WARP CONTROLLER MANAGEMENT =====
warp_controller_process = None
warp_controller_path = ""

def select_warp_controller():
    """Ch·ªçn ƒë∆∞·ªùng d·∫´n ƒë·∫øn WARP Controller"""
    global warp_controller_path
    path = filedialog.askopenfilename(
        title="Ch·ªçn file WARP Controller (warp_controller.py ho·∫∑c .exe)",
        filetypes=[("Python files", "*.py"), ("Executable", "*.exe"), ("All files", "*.*")]
    )
    if path:
        warp_controller_path = path
        save_warp_controller_path(path)
        log(f"‚úÖ ƒê√£ ch·ªçn WARP Controller: {path}")
        return path
    return warp_controller_path

def save_warp_controller_path(path):
    """L∆∞u ƒë∆∞·ªùng d·∫´n WARP Controller v√†o config.json"""
    global warp_controller_path
    warp_controller_path = path
    save_config()

def load_warp_controller_path():
    """Load ƒë∆∞·ªùng d·∫´n WARP Controller t·ª´ config.json"""
    return globals().get("warp_controller_path", "")

def open_warp_controller():
    """M·ªü WARP Controller n·∫øu ch∆∞a m·ªü"""
    global warp_controller_process, warp_controller_path
    
    # Ki·ªÉm tra xem ƒë√£ m·ªü ch∆∞a
    if warp_controller_process is not None:
        try:
            # Ki·ªÉm tra process c√≤n ch·∫°y kh√¥ng
            if warp_controller_process.poll() is None:
                log("‚ö†Ô∏è WARP Controller ƒë√£ ƒëang ch·∫°y!")
                return True
        except:
            pass
    
    # N·∫øu ch∆∞a c√≥ path, th·ª≠ load t·ª´ config
    if not warp_controller_path:
        warp_controller_path = load_warp_controller_path()
    
    # N·∫øu v·∫´n kh√¥ng c√≥ path, y√™u c·∫ßu ch·ªçn
    if not warp_controller_path or not os.path.exists(warp_controller_path):
        messagebox.showwarning("Ch∆∞a ch·ªçn WARP Controller", 
                             "Vui l√≤ng ch·ªçn ƒë∆∞·ªùng d·∫´n ƒë·∫øn WARP Controller!")
        select_warp_controller()
        if not warp_controller_path or not os.path.exists(warp_controller_path):
            return False
    
    # M·ªü WARP Controller
    try:
        if warp_controller_path.endswith('.py'):
            # Ch·∫°y file Python
            warp_controller_process = subprocess.Popen(['python', warp_controller_path])
        else:
            # Ch·∫°y file exe
            warp_controller_process = subprocess.Popen([warp_controller_path])
        
        log(f"‚úÖ ƒê√£ m·ªü WARP Controller: {warp_controller_path}")
        return True
    except Exception as e:
        log(f"‚ùå L·ªói khi m·ªü WARP Controller: {e}")
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü WARP Controller:\n{e}")
        return False

# Load path khi kh·ªüi ƒë·ªông
warp_controller_path = load_warp_controller_path()

# bi·∫øn to√†n c·ª•c cho tu·ª≥ ch·ªçn k·∫øt n·ªëi
phone_net_mode = tk.StringVar(value="wifi")

# ƒë·ªçc config ƒë·ªÉ l·∫•y path ƒë√£ l∆∞u (ch·ªâ g√°n v√†o bi·∫øn thu·∫ßn scrcpy_path)
load_scrcpy_config()

# n·∫øu c√≥ path th√¨ ƒë∆∞a l√™n UI
if scrcpy_path:
    scrcpy_path_var.set(scrcpy_path)

# Background (optional) - ƒë√£ b·ªè load ·∫£nh n·ªÅn
canvas = tk.Canvas(app, width=1050, height=550, bg="white")
canvas.pack(fill="both", expand=True)

# ========================= TAB SYSTEM =========================
current_tab = tk.StringVar(value="INSTAGRAM")

# ===== THANH TR√äN ƒêEN - Hi·ªÉn th·ªã t√™n tab hi·ªán t·∫°i =====
top_bar = tk.Frame(app, bg="black", height=50)
top_bar.place(x=0, y=0, relwidth=1, height=50)

tab_title_label = tk.Label(top_bar, textvariable=current_tab, bg="black", fg="white", 
                           font=("ROG Fonts STRIX SCAR", 20, "bold"))
tab_title_label.pack(expand=True)

# ===== THANH TR√ÅI ƒêEN - Menu chuy·ªÉn tab =====
left_menu = tk.Frame(app, bg="black", width=150)
left_menu.place(x=0, y=50, width=150, relheight=1)

menu_font = ("ROG Fonts STRIX SCAR", 11, "bold")

def switch_tab(tab_name):
    """Chuy·ªÉn tab v√† c·∫≠p nh·∫≠t n·ªôi dung"""
    current_tab.set(tab_name)
    
    # ·∫®n t·∫•t c·∫£ c√°c tab content
    instagram_content.place_forget()
    checklive_content.place_forget()
    history_content.place_forget()
    guide_content.place_forget()
    utilities_content.place_forget()
    menu_content.place_forget()
    
    # Hi·ªán tab ƒë∆∞·ª£c ch·ªçn
    if tab_name == "INSTAGRAM":
        instagram_content.place(x=150, y=50, relwidth=1, width=-150, relheight=1, height=-50)
    elif tab_name == "CHECK LIVE":
        checklive_content.place(x=150, y=50, relwidth=1, width=-150, relheight=1, height=-50)
    elif tab_name == "HISTORY":
        history_content.place(x=150, y=50, relwidth=1, width=-150, relheight=1, height=-50)
    elif tab_name == "GUIDE":
        guide_content.place(x=150, y=50, relwidth=1, width=-150, relheight=1, height=-50)
    elif tab_name == "UTILITIES":
        utilities_content.place(x=150, y=50, relwidth=1, width=-150, relheight=1, height=-50)
    elif tab_name == "MENU":
        menu_content.place(x=150, y=50, relwidth=1, width=-150, relheight=1, height=-50)

# Frame ch·ª©a c√°c n√∫t ch√≠nh ·ªü tr√™n
buttons_container = tk.Frame(left_menu, bg="black")
buttons_container.place(relx=0.5, rely=0.35, anchor="center")

# 5 n√∫t menu ch√≠nh v·ªõi kho·∫£ng c√°ch nh·ªè h∆°n
tk.Button(buttons_container, text="INSTAGRAM", bg="black", fg="white", font=menu_font,
          command=lambda: switch_tab("INSTAGRAM"), bd=0, activebackground="#333", 
          activeforeground="white", width=15, height=2).pack(pady=5, padx=10)

tk.Button(buttons_container, text="CHECK LIVE", bg="black", fg="white", font=menu_font,
          command=lambda: switch_tab("CHECK LIVE"), bd=0, activebackground="#333", 
          activeforeground="white", width=15, height=2).pack(pady=5, padx=10)

tk.Button(buttons_container, text="HISTORY", bg="black", fg="white", font=menu_font,
          command=lambda: switch_tab("HISTORY"), bd=0, activebackground="#333", 
          activeforeground="white", width=15, height=2).pack(pady=5, padx=10)

tk.Button(buttons_container, text="GUIDE", bg="black", fg="white", font=menu_font,
          command=lambda: switch_tab("GUIDE"), bd=0, activebackground="#333", 
          activeforeground="white", width=15, height=2).pack(pady=5, padx=10)

tk.Button(buttons_container, text="UTILITIES", bg="black", fg="white", font=menu_font,
          command=lambda: switch_tab("UTILITIES"), bd=0, activebackground="#333", 
          activeforeground="white", width=15, height=2).pack(pady=5, padx=10)

# N√∫t MENU ·ªü d∆∞·ªõi c√πng (position c·ªë ƒë·ªãnh)
menu_button = tk.Button(left_menu, text="MENU", bg="#1a1a1a", fg="white", 
                        font=("ROG Fonts STRIX SCAR", 12, "bold"),
                        command=lambda: switch_tab("MENU"), bd=0, activebackground="#333", 
                        activeforeground="white", width=13, height=2)
menu_button.place(relx=0.5, rely=0.92, anchor="center")

# ========================= TAB CONTENTS =========================

# ===== TAB 1: INSTAGRAM (N·ªôi dung ch√≠nh hi·ªán t·∫°i) =====
instagram_content = tk.Frame(app, bg="white", width=900, height=500)
instagram_content.place(relx=0.5, rely=0.5, anchor="center")

center_frame = tk.Frame(instagram_content, bg="white")
center_frame.place(relx=0.5, y=0, anchor="n")

# ========================= KH·ªêI TR√ÅI (b√¢y gi·ªù n·∫±m trong instagram_content) =========================
left_frame = tk.Frame(center_frame, bg="white")
left_frame.pack()

rog_font = ("ROG Fonts STRIX SCAR", 13, "bold")

# ========================= SAVE STATE MANAGEMENT =========================
is_saved = False
settings_hash = None

def calculate_settings_hash():
    """T√≠nh hash c·ªßa t·∫•t c·∫£ settings hi·ªán t·∫°i"""
    mode = ui_mode_var.get().strip().lower()
    
    settings_str = f"{mode}|"
    
    if mode == "desktop":
        settings_str += f"{save_format}|{desktop_threads_entry.get()}|{desktop_follow_count_entry.get()}|{proxy_entry.get()}|"
        settings_str += f"{mail_var.get()}|{follow_var.get()}|{bioava_var.get()}|{pro_mode_var.get()}|{twofa_var.get()}|"
        settings_str += f"{category_var.get()}|{pro_type_var.get()}|{network_mode_var.get()}"
    elif mode == "mobile":
        settings_str += f"{save_format}|{mobile_threads_entry.get()}|{mobile_follow_count_entry.get()}|{proxy_mobile_entry.get() if proxy_mobile_entry else ''}|"
        settings_str += f"{mail_mobile_var.get()}|{enable_follow.get()}|{enable_avatar.get()}|"
        settings_str += f"{enable_Chuyen_nghiep.get()}|{enable_2fa.get()}|{network_mode_mobile_var.get()}"
    elif mode == "phone":
        settings_str += f"{save_format_phone}|{proxy_phone_entry.get()}|{phone_follow_count_var.get()}|"
        settings_str += f"{phone_net_mode.get()}|{proxy_format_var.get()}|{phone_ig_app_var.get()}|"
        settings_str += f"{mail_phone_var.get()}|{enable_2faphone.get()}|{enable_uppost.get()}|"
        settings_str += f"{enable_editprofile.get()}|{enable_autofollow.get()}|{enable_proaccount.get()}|"
        settings_str += f"{pro_category_var.get()}|{pro_type_var.get()}"
    
    return hashlib.md5(settings_str.encode()).hexdigest()

def save_settings():
    """L∆∞u settings v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i"""
    global is_saved, settings_hash
    
    mode = ui_mode_var.get().strip().lower()
    mode_name = {"desktop": "DESKTOP", "mobile": "MOBILE", "phone": "PHONE"}.get(mode, mode.upper())
    
    try:
        save_config()
        settings_hash = calculate_settings_hash()
        is_saved = True
        
        # Ki·ªÉm tra n·∫øu ch·ªçn WARP-SPIN th√¨ m·ªü WARP Controller
        if mode == "desktop" and network_mode_var.get() == "warp-spin":
            open_warp_controller()
        elif mode == "mobile" and network_mode_mobile_var.get() == "warp-spin":
            open_warp_controller()
        
        messagebox.showinfo("L∆∞u th√†nh c√¥ng", f"‚úÖ ƒê√£ l∆∞u c√†i ƒë·∫∑t giao di·ªán {mode_name}!")
        log(f"üíæ ƒê√£ l∆∞u settings giao di·ªán {mode_name}")
    except Exception as e:
        messagebox.showerror("L·ªói", f"‚ùå Kh√¥ng th·ªÉ l∆∞u: {e}")
        log(f"‚ùå L·ªói khi l∆∞u settings: {e}")

def check_settings_changed():
    """Ki·ªÉm tra xem settings c√≥ thay ƒë·ªïi sau khi save kh√¥ng"""
    if not is_saved:
        return True
    current_hash = calculate_settings_hash()
    return current_hash != settings_hash

# ===== H√ÄNG 1: RESTART | START | FILE REG =====
row1 = tk.Frame(left_frame, bg="white")
row1.pack(pady=(8,4), anchor="center")

def safe_start_process():
    """Wrapper cho start_process v·ªõi ki·ªÉm tra save"""
    global is_saved
    
    if not is_saved:
        messagebox.showwarning("Ch∆∞a l∆∞u", "‚ö†Ô∏è B·∫°n ch∆∞a l∆∞u c√†i ƒë·∫∑t!\nVui l√≤ng nh·∫•n SAVE tr∆∞·ªõc khi START.")
        log("‚ö†Ô∏è Ch∆∞a l∆∞u c√†i ƒë·∫∑t. Vui l√≤ng nh·∫•n SAVE tr∆∞·ªõc.")
        return
    
    if check_settings_changed():
        messagebox.showwarning("C√†i ƒë·∫∑t ƒë√£ thay ƒë·ªïi", "‚ö†Ô∏è C√†i ƒë·∫∑t ƒë√£ thay ƒë·ªïi sau l·∫ßn SAVE cu·ªëi!\nVui l√≤ng SAVE l·∫°i tr∆∞·ªõc khi START.")
        log("‚ö†Ô∏è C√†i ƒë·∫∑t ƒë√£ thay ƒë·ªïi. Vui l√≤ng SAVE l·∫°i.")
        return
    
    # N·∫øu ƒë√£ save v√† kh√¥ng thay ƒë·ªïi, cho ph√©p start
    start_process()

btn_restart = tk.Button(row1, text="RESTART", width=18, height=1, bg="black", fg="white", font=rog_font, command=restart_tool)
btn_start = tk.Button(row1, text="START", width=18, height=1, bg="black", fg="white", font=rog_font, command=safe_start_process)
btn_file_reg = tk.Button(row1, text="FILE REG", width=18, height=1, bg="black", fg="white", font=rog_font, command=open_file_da_reg)

btn_restart.pack(side="left", padx=4)
btn_start.pack(side="left", padx=4, anchor="center")
btn_file_reg.pack(side="left", padx=4)

# ===== H√ÄNG 2: CHOOSE AVATAR | SAVE | CHOOSE CHROME =====
row2 = tk.Frame(left_frame, bg="white")
row2.pack(pady=4, anchor="center")

tk.Button(row2, text="CHOOSE AVATAR", width=18, height=1, bg="black", fg="white", font=rog_font, 
          command=select_ava_folder).pack(side="left", padx=4)
tk.Button(row2, text="SAVE", width=18, height=1, bg="black", fg="white", font=rog_font, 
          command=save_settings).pack(side="left", padx=4)
tk.Button(row2, text="CHOOSE CHROME", width=18, height=1, bg="black", fg="white", font=rog_font, 
          command=select_chrome).pack(side="left", padx=4)

# ===== H√ÄNG 3: ƒê√£ x√≥a WARP ON (chuy·ªÉn xu·ªëng Desktop Settings) =====
row3 = tk.Frame(left_frame, bg="white")
row3.pack(pady=3, fill="x")

# ===== KHUNG GIAO DI·ªÜN =====
ui_mode_var = tk.StringVar(value="desktop")

def set_ui_mode(mode):
    global is_saved
    ui_mode_var.set(mode)
    # Khi ƒë·ªïi giao di·ªán, ƒë√°nh d·∫•u l√† ch∆∞a save
    is_saved = False
    # update_settings_visibility() s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c g·ªçi qua trace_add

giao_dien_frame = tk.LabelFrame(left_frame, text="GIAO DI·ªÜN", bg="white", 
                                 font=("ROG Fonts STRIX SCAR", 11, "bold"), bd=2, relief="solid")
giao_dien_frame.pack(pady=(10,8), fill="x", padx=5)

# 3 n√∫t giao di·ªán x·∫øp ngang
btn_container = tk.Frame(giao_dien_frame, bg="white")
btn_container.pack(pady=2, padx=8, anchor="center")

tk.Button(btn_container, text="DESKTOP", width=18, height=1, bg="black", fg="white", font=rog_font,
          command=lambda: set_ui_mode("desktop")).pack(side="left", padx=5)
tk.Button(btn_container, text="MOBILE", width=18, height=1, bg="black", fg="white", font=rog_font,
          command=lambda: set_ui_mode("mobile")).pack(side="left", padx=5)
tk.Button(btn_container, text="PHONE", width=18, height=1, bg="black", fg="white", font=rog_font,
          command=lambda: set_ui_mode("phone")).pack(side="left", padx=5)

# ===== AVATAR FOLDER SELECTION (fix indentation and undefined references) =====
def save_ava_folder_to_config(folder):
    """L∆∞u ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c avatar v√†o config.json"""
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
    except Exception:
        config = {}
    config["ava_folder_path"] = folder
    with open("config.json", "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

def load_ava_folder_from_config():

# Khi kh·ªüi ƒë·ªông, load l·∫°i t·ª´ config.json:
    """ƒê·ªçc ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c avatar t·ª´ config.json"""
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
        return config.get("ava_folder_path", "")
    except Exception:
        return ""
ava_folder_path = load_ava_folder_from_config()

# ========================= KH·ªêI GI·ªÆA: Desktop Settings =========================
desktop_settings = tk.LabelFrame(instagram_content, text="Desktop Settings", bg="white", font=("ROG Fonts STRIX SCAR", 11, "bold"))
hidden_chrome_var = tk.BooleanVar(value=False)

def _position_desktop_settings():
    """ƒê·∫∑t Desktop Settings ·ªü v·ªã tr√≠ c·ªë ƒë·ªãnh gi·ªØa giao di·ªán."""
    instagram_content.update_idletasks()
    desktop_settings.place(relx=0.5, y=250, anchor="n")

# app.after(60, _position_desktop_settings)  # ·∫®N khi m·ªü app

# ========================= B·ªê C·ª§C DESKTOP SETTINGS =========================
rog_font_small = ("ROG Fonts STRIX SCAR", 9, "bold")
rog_font_tiny = ("ROG Fonts STRIX SCAR", 8, "bold")

# H√ÄNG 1: ƒê·ªãnh d·∫°ng l∆∞u
row_format = tk.Frame(desktop_settings, bg="white")
row_format.pack(fill="x", padx=6, pady=(4,2))

tk.Label(row_format, text="ƒê·ªãnh d·∫°ng l∆∞u:", bg="white", font=rog_font_small).pack(side="left", padx=(0,4))
format_fields = ["Username","Pass","Mail","Cookie","2FA","Proxy","UID"]
save_format = []
format_boxes = []

def update_save_format(*_):
    global save_format
    save_format = [cb.get() for cb in format_boxes if cb.get()]
    try:
        save_config()
        log(f"üíæ ƒê·ªãnh d·∫°ng l∆∞u: {'|'.join(save_format)}")
    except Exception:
        pass

wanted = ["Username","Pass","Mail","Cookie","2FA"]
for i in range(5):
    cb = ttk.Combobox(row_format, values=format_fields, state="readonly", width=9)
    cb.set(save_format[i] if i < len(save_format) else wanted[i])
    cb.pack(side="left", padx=2)
    cb.bind("<<ComboboxSelected>>", update_save_format)
    format_boxes.append(cb)

# H√ÄNG 2: S·ªê LU·ªíNG + S·ªê FOLLOW + Proxy
row_threads = tk.Frame(desktop_settings, bg="white")
row_threads.pack(fill="x", padx=6, pady=2)

tk.Label(row_threads, text="NUMBER THREAD", bg="white", font=rog_font_small).pack(side="left", padx=(0,2))
desktop_threads_entry = tk.Entry(row_threads, width=6, justify="center")
desktop_threads_entry.insert(0, "1")
desktop_threads_entry.pack(side="left", padx=2)

tk.Label(row_threads, text="FOLLOW COUNT", bg="white", font=rog_font_small).pack(side="left", padx=(10,2))
desktop_follow_count_entry = tk.Entry(row_threads, width=6, justify="center")
desktop_follow_count_entry.insert(0, "5")
desktop_follow_count_entry.pack(side="left", padx=2)

tk.Label(row_threads, text="Proxy (IP:PORT)", bg="white", font=rog_font_small).pack(side="left", padx=(10,2))
proxy_entry = tk.Entry(row_threads, width=18, bg="lightgray", justify="center")
proxy_entry.insert(0, "")
proxy_entry.pack(side="left", padx=2)

# H√ÄNG 3: MAIL
row_mail = tk.Frame(desktop_settings, bg="white")
row_mail.pack(fill="x", padx=6, pady=2)

tk.Label(row_mail, text="MAIL:", bg="white", font=rog_font_small).pack(side="left", padx=(0,6))
mail_var = tk.StringVar(value="temp")
tk.Radiobutton(row_mail, text="temp-mail.asia", variable=mail_var, value="temp", bg="white").pack(side="left", padx=4)
tk.Radiobutton(row_mail, text="DropMail.me", variable=mail_var, value="drop", bg="white").pack(side="left", padx=4)

# H√ÄNG 4: JOB (Checkboxes)
row_job = tk.Frame(desktop_settings, bg="white")
row_job.pack(fill="x", padx=6, pady=2)

tk.Label(row_job, text="JOB:", bg="white", font=rog_font_small).pack(side="left", padx=(0,6))
follow_var = tk.BooleanVar(value=True)
bioava_var = tk.BooleanVar(value=True)
pro_mode_var = tk.BooleanVar(value=True)
twofa_var = tk.BooleanVar(value=True)

tk.Checkbutton(row_job, text="Follow", variable=follow_var, bg="white").pack(side="left", padx=4)
tk.Checkbutton(row_job, text="Gi·ªõi t√≠nh + Bio + Ava + Post", variable=bioava_var, bg="white").pack(side="left", padx=4)
tk.Checkbutton(row_job, text="B·∫≠t Chuy√™n nghi·ªáp", variable=pro_mode_var, bg="white").pack(side="left", padx=4)
tk.Checkbutton(row_job, text="B·∫≠t 2FA", variable=twofa_var, bg="white").pack(side="left", padx=4)

# H√ÄNG 5: PROFESSIONAL + CATEGORY + BIO
row_pro = tk.Frame(desktop_settings, bg="white")
row_pro.pack(fill="x", padx=6, pady=4)

# PROFESSIONAL
col_pro = tk.Frame(row_pro, bg="white")
col_pro.pack(side="left", padx=(0,10))
tk.Label(col_pro, text="PROFESSIONAL:", bg="white", font=rog_font_small).pack(anchor="w")

grp_cat = tk.Frame(col_pro, bg="white")
grp_cat.pack(anchor="w", pady=2)
tk.Label(grp_cat, text="Category:", bg="white", font=rog_font_tiny).grid(row=0, column=0, sticky="w", padx=(0,4))

category_var = tk.StringVar(value="Personal blog")
categories = ["Personal blog", "Art", "Shopping & retail", "Grocery Store",
              "Product/service", "Musician/band", "Health/beauty"]

row_idx = 0
col_idx = 1
for i, cat in enumerate(categories):
    tk.Radiobutton(grp_cat, text=cat, variable=category_var, value=cat, bg="white").grid(row=row_idx, column=col_idx, sticky="w", padx=2)
    col_idx += 1
    if col_idx > 3:  # 3 c·ªôt
        col_idx = 1
        row_idx += 1

grp_type = tk.Frame(col_pro, bg="white")
grp_type.pack(anchor="w", pady=(4,0))
tk.Label(grp_type, text="Lo·∫°i t√†i kho·∫£n:", bg="white", font=rog_font_tiny).pack(side="left", padx=(0,4))
pro_type_var = tk.StringVar(value="Creator")
tk.Radiobutton(grp_type, text="Creator", variable=pro_type_var, value="Creator", bg="white").pack(side="left", padx=4)
tk.Radiobutton(grp_type, text="Business", variable=pro_type_var, value="Business", bg="white").pack(side="left", padx=4)

# === CHROME SETTINGS ===
col_chrome = tk.Frame(row_pro, bg="white")
col_chrome.pack(side="left")
tk.Label(col_chrome, text="CHROME SETTINGS:", bg="white", font=rog_font_small).pack(anchor="w")

chrome_size_frame = tk.LabelFrame(col_chrome, text="Chrome Size", bg="white", font=rog_font_tiny, bd=1)
chrome_size_frame.pack(fill="x", pady=2)

# === Danh s√°ch k√≠ch th∆∞·ªõc c√≥ s·∫µn (t·ª´ nh·ªè ƒë·∫øn l·ªõn) ===
size_list = [
    "100x100",
    "150x150",
    "200x200",
    "240x320",
    "320x480",
    "400x400",
    "480x800",
    "640x360",
    "800x600",
    "1024x768",
    "1280x720",
    "1366x768",
    "1440x900",
    "1600x900",
    "1680x1050",
    "1920x1080"
]

row_wh = tk.Frame(chrome_size_frame, bg="white")
row_wh.pack(anchor="w", pady=1)

tk.Label(row_wh, text="Chrome Window Size:", bg="white").pack(side="left", padx=2)
desktop_size_combo = ttk.Combobox(row_wh, values=size_list, width=12, state="readonly", justify="center")
desktop_size_combo.set("320x480")  # m·∫∑c ƒë·ªãnh
desktop_size_combo.pack(side="left", padx=2)

row_scale = tk.Frame(chrome_size_frame, bg="white")
row_scale.pack(anchor="w", pady=1)
tk.Label(row_scale, text="Scale(%):", bg="white").pack(side="left", padx=2)
desktop_entry_scale = tk.Entry(row_scale, width=6, justify="center")
desktop_entry_scale.insert(0, "100")
desktop_entry_scale.pack(side="left", padx=2)

tk.Checkbutton(col_chrome, text="·∫®n Chrome (Headless)", variable=hidden_chrome_var, bg="white").pack(anchor="w", pady=2)

# H√ÄNG 7: NETWORK MODE (RadioButton: WIFI | WARP | WARP-SPIN | PROXY)
row_network = tk.Frame(desktop_settings, bg="white")
row_network.pack(fill="x", padx=6, pady=(4,6))

tk.Label(row_network, text="WIFI:", bg="white", font=rog_font_small).pack(side="left", padx=(0,6))

# Bi·∫øn l∆∞u ch·∫ø ƒë·ªô m·∫°ng (m·∫∑c ƒë·ªãnh l√† wifi)
network_mode_var = tk.StringVar(value="wifi")

tk.Radiobutton(row_network, text="WIFI", variable=network_mode_var, value="wifi", bg="white", 
               font=rog_font_tiny).pack(side="left", padx=4)
tk.Radiobutton(row_network, text="WARP", variable=network_mode_var, value="warp", bg="white", 
               font=rog_font_tiny).pack(side="left", padx=4)
tk.Radiobutton(row_network, text="WARP-SPIN", variable=network_mode_var, value="warp-spin", bg="white", 
               font=rog_font_tiny).pack(side="left", padx=4)
tk.Radiobutton(row_network, text="PROXY", variable=network_mode_var, value="proxy", bg="white", 
               font=rog_font_tiny).pack(side="left", padx=4)

# N√∫t ch·ªçn WARP Controller
tk.Button(row_network, text="üìÅ WARP Controller", bg="black", fg="white", 
          font=("ROG Fonts STRIX SCAR", 8, "bold"), command=select_warp_controller,
          width=18).pack(side="left", padx=10)

# ========================= MOBILE SETTINGS (mirror Desktop) =========================
mobile_settings = tk.LabelFrame(instagram_content, text="Mobile Settings", bg="white", font=("ROG Fonts STRIX SCAR", 11, "bold"))

def _position_mobile_settings():
    """ƒê·∫∑t Mobile Settings ·ªü v·ªã tr√≠ c·ªë ƒë·ªãnh gi·ªØa giao di·ªán (gi·ªëng Desktop)."""
    instagram_content.update_idletasks()
    mobile_settings.place(relx=0.5, y=250, anchor="n")

# app.after(120, _position_mobile_settings)  # ·∫®N khi m·ªü app

# ===== L·∫•y m·∫∑c ƒë·ªãnh t·ª´ Desktop n·∫øu c√≥ =====
def _get_bool(v, fallback=False):
    try: return bool(v.get())
    except: return fallback

def _get_str(v, fallback=""):
    try: return str(v.get())
    except: return fallback

_follow_def   = _get_bool(globals().get("follow_var", None), True)
_fullpack_def = _get_bool(globals().get("gender_bio_ava_post_var", None), True)
_pro_mode_def = _get_bool(globals().get("pro_mode_var", None), True)
_twofa_def    = _get_bool(globals().get("twofa_var", None), True)
_pro_type_def = _get_str(globals().get("pro_type_var", None), "Creator")
_category_def = _get_str(globals().get("category_var", None), "Personal blog")

# ===== Bi·∫øn Mobile =====
enable_follow        = tk.BooleanVar(value=_follow_def)
enable_avatar        = tk.BooleanVar(value=_fullpack_def)
enable_Chuyen_nghiep = tk.BooleanVar(value=_pro_mode_def)
enable_2fa           = tk.BooleanVar(value=_twofa_def)

pro_type_mobile = tk.StringVar(value=_pro_type_def)
category_mobile = tk.StringVar(value=_category_def)

# Mobile format boxes (separate from Desktop)
mobile_format_boxes = []
mail_mobile_var = tk.StringVar(value="temp")
proxy_mobile_entry = None
threads_entry = None
mobile_follow_count_entry = None
entry_width_m = None
entry_height_m = None
entry_scale_m = None

# H√ÄNG 1: ƒê·ªãnh d·∫°ng l∆∞u (5 comboboxes ngang)
row_format_mobile = tk.Frame(mobile_settings, bg="white")
row_format_mobile.pack(fill="x", padx=6, pady=(4,2))

tk.Label(row_format_mobile, text="ƒê·ªãnh d·∫°ng l∆∞u:", bg="white", font=rog_font_small).pack(side="left", padx=(0,6))

def update_mobile_save_format():
    global save_format
    save_format = [cb.get() for cb in mobile_format_boxes if cb.get()]
    save_config()
    log(f"üíæ [Mobile] ƒê·ªãnh d·∫°ng l∆∞u: {'|'.join(save_format)}")

wanted = ["Username", "Pass", "Mail", "Cookie", "2FA"]
for i in range(5):
    cb = ttk.Combobox(row_format_mobile, values=format_fields, state="readonly", width=10)
    cb.set(save_format[i] if i < len(save_format) else wanted[i])
    cb.pack(side="left", padx=2)
    cb.bind("<<ComboboxSelected>>", lambda e: update_mobile_save_format())
    mobile_format_boxes.append(cb)

# H√ÄNG 2: S·ªê LU·ªíNG + S·ªê FOLLOW + Proxy
row_counts_mobile = tk.Frame(mobile_settings, bg="white")
row_counts_mobile.pack(fill="x", padx=6, pady=2)

tk.Label(row_counts_mobile, text="NUMBER THREAD", bg="white", font=rog_font_small).pack(side="left", padx=(0,4))
mobile_threads_entry = tk.Entry(row_counts_mobile, width=6, justify="center", font=rog_font_tiny)
mobile_threads_entry.insert(0, "1")
mobile_threads_entry.pack(side="left", padx=(0,10))

tk.Label(row_counts_mobile, text="FOLLOW COUNT", bg="white", font=rog_font_small).pack(side="left", padx=(0,4))
mobile_follow_count_entry = tk.Entry(row_counts_mobile, width=6, justify="center", font=rog_font_tiny)
mobile_follow_count_entry.insert(0, "5")
mobile_follow_count_entry.pack(side="left", padx=(0,10))

tk.Label(row_counts_mobile, text="Proxy (IP:PORT)", bg="white", font=rog_font_small).pack(side="left", padx=(0,4))
proxy_mobile_entry = tk.Entry(row_counts_mobile, width=20, bg="lightgray", justify="center", font=rog_font_tiny)
proxy_mobile_entry.pack(side="left")

# H√ÄNG 3: MAIL SERVICE
row_mail_mobile = tk.Frame(mobile_settings, bg="white")
row_mail_mobile.pack(fill="x", padx=6, pady=2)

tk.Label(row_mail_mobile, text="MAIL:", bg="white", font=rog_font_small).pack(side="left", padx=(0,6))
tk.Radiobutton(row_mail_mobile, text="temp-mail.asia", variable=mail_mobile_var, value="temp", 
               bg="white").pack(side="left", padx=6)
tk.Radiobutton(row_mail_mobile, text="DropMail.me", variable=mail_mobile_var, value="drop", 
               bg="white").pack(side="left", padx=6)

# H√ÄNG 4: JOB CHECKBOXES
row_job_mobile = tk.Frame(mobile_settings, bg="white")
row_job_mobile.pack(fill="x", padx=6, pady=2)

tk.Label(row_job_mobile, text="JOB:", bg="white", font=rog_font_small).pack(side="left", padx=(0,6))
tk.Checkbutton(row_job_mobile, text="Follow (Mobile)", variable=enable_follow, bg="white").pack(side="left", padx=6)
tk.Checkbutton(row_job_mobile, text="Avatar (Mobile)", variable=enable_avatar, bg="white").pack(side="left", padx=6)
tk.Checkbutton(row_job_mobile, text="B·∫≠t Chuy√™n nghi·ªáp (Mobile)", variable=enable_Chuyen_nghiep, bg="white",
               command=lambda: _sync_pro_mobile_state()).pack(side="left", padx=6)
tk.Checkbutton(row_job_mobile, text="B·∫≠t 2FA (Mobile)", variable=enable_2fa, bg="white").pack(side="left", padx=6)

# H√ÄNG 5: 3 COLUMNS (PROFESSIONAL | BIO | CHROME SETTINGS)
row_3cols_mobile = tk.Frame(mobile_settings, bg="white")
row_3cols_mobile.pack(fill="x", padx=6, pady=4)

# COL 1: PROFESSIONAL
col_pro_mobile = tk.LabelFrame(row_3cols_mobile, text="PROFESSIONAL:", bg="white", font=rog_font_tiny, 
                               relief="solid", borderwidth=1)
col_pro_mobile.pack(side="left", padx=(0,4), fill="both", expand=True)

# Category Grid
tk.Label(col_pro_mobile, text="Category:", bg="white", font=rog_font_tiny).pack(anchor="w", padx=4, pady=(2,0))
cat_grid_mobile = tk.Frame(col_pro_mobile, bg="white")
cat_grid_mobile.pack(fill="x", padx=4, pady=2)

CAT_OPTIONS = [
    "Personal blog", "Product/service", "Art", "Musician/band",
    "Shopping & retail", "Health/beauty", "Grocery Store"
]
for i, cat_name in enumerate(CAT_OPTIONS):
    row_idx = i // 2
    col_idx = i % 2
    tk.Radiobutton(cat_grid_mobile, text=cat_name, variable=category_mobile, value=cat_name, 
                   bg="white").grid(row=row_idx, column=col_idx, sticky="w", padx=2, pady=1)

# Account Type
tk.Label(col_pro_mobile, text="Lo·∫°i t√†i kho·∫£n:", bg="white").pack(anchor="w", padx=4, pady=(4,0))
acc_type_frame_mobile = tk.Frame(col_pro_mobile, bg="white")
acc_type_frame_mobile.pack(anchor="w", padx=4, pady=2)
tk.Radiobutton(acc_type_frame_mobile, text="Creator", variable=pro_type_mobile, value="Creator", 
               bg="white").pack(anchor="w")
tk.Radiobutton(acc_type_frame_mobile, text="Business", variable=pro_type_mobile, value="Business", 
               bg="white").pack(anchor="w")

# COL 3: CHROME SETTINGS (MOBILE)
col_chrome_mobile = tk.LabelFrame(row_3cols_mobile, text="CHROME SETTINGS:", bg="white",
                                  font=rog_font_tiny, relief="solid", borderwidth=1)
col_chrome_mobile.pack(side="left", fill="both", expand=True)

# --- Chrome Size (Mobile) ---
chrome_size_frame = tk.LabelFrame(col_chrome_mobile, text="Chrome Size", bg="white", font=rog_font_tiny)
chrome_size_frame.pack(fill="x", padx=4, pady=4)

# === Danh s√°ch k√≠ch th∆∞·ªõc c√≥ s·∫µn (t·ª´ nh·ªè ƒë·∫øn l·ªõn, gi·ªëng desktop) ===
mobile_size_list = [
    "100x100",
    "150x150",
    "200x200",
    "240x320",
    "320x480",
    "400x400",
    "480x800",
    "640x360",
    "800x600",
    "1024x768",
    "1280x720",
    "1366x768",
    "1440x900",
    "1600x900",
    "1680x1050",
    "1920x1080"
]

row_wh_m = tk.Frame(chrome_size_frame, bg="white")
row_wh_m.pack(anchor="w", pady=2)

tk.Label(row_wh_m, text="Chrome Window Size:", bg="white", font=rog_font_tiny).pack(side="left", padx=2)
mobile_size_combo = ttk.Combobox(row_wh_m, values=mobile_size_list, width=12, state="readonly", justify="center")
mobile_size_combo.set("375x667")  # m·∫∑c ƒë·ªãnh gi·ªëng iPhone 8
mobile_size_combo.pack(side="left", padx=2)

# --- Chrome Scale ---
row_scale_m = tk.Frame(chrome_size_frame, bg="white")
row_scale_m.pack(anchor="w", pady=2)

tk.Label(row_scale_m, text="Scale(%):", bg="white", font=rog_font_tiny).pack(side="left", padx=2)
mobile_entry_scale = tk.Entry(row_scale_m, width=6, justify="center")
mobile_entry_scale.insert(0, "100")
mobile_entry_scale.pack(side="left", padx=2)

hidden_chrome_mobile_var = tk.BooleanVar(value=False)
tk.Checkbutton(col_chrome_mobile, text="·∫®n Chrome (Headless)", variable=hidden_chrome_mobile_var, 
               bg="white").pack(anchor="w", pady=2, padx=4)

# ---- Khi b·∫≠t/t·∫Øt chuy√™n nghi·ªáp ----
def _sync_pro_mobile_state(*_):
    on = enable_Chuyen_nghiep.get()
    try:
        state_val = "normal" if on else "disabled"
        # Update Professional section widgets
        for w in col_pro_mobile.winfo_children():
            if isinstance(w, (tk.Label, tk.LabelFrame)):
                continue
            elif isinstance(w, tk.Frame):
                for child in w.winfo_children():
                    try: 
                        child.configure(state=state_val)
                    except: 
                        pass
            else:
                try:
                    w.configure(state=state_val)
                except:
                    pass
        col_pro_mobile.configure(fg=("black" if on else "#888"))
    except Exception:
        pass

_sync_pro_mobile_state()
enable_Chuyen_nghiep.trace_add("write", _sync_pro_mobile_state)

# ---- Gom c·∫•u h√¨nh Mobile ----
def collect_mobile_profile_config():
    return {
        "follow": bool(enable_follow.get()),
        "avatar": bool(enable_avatar.get()),
        "pro_mode": bool(enable_Chuyen_nghiep.get()),
        "pro_type": str(pro_type_mobile.get()),
        "twofa": bool(enable_2fa.get()),
        "category": str(category_mobile.get()),
    }

# H√ÄNG 7: NETWORK MODE (RadioButton: WIFI | WARP | WARP-SPIN | PROXY)
row_network_mobile = tk.Frame(mobile_settings, bg="white")
row_network_mobile.pack(fill="x", padx=6, pady=(4,6))

tk.Label(row_network_mobile, text="WIFI:", bg="white", font=rog_font_small).pack(side="left", padx=(0,6))

# Bi·∫øn l∆∞u ch·∫ø ƒë·ªô m·∫°ng Mobile (m·∫∑c ƒë·ªãnh l√† wifi)
network_mode_mobile_var = tk.StringVar(value="wifi")

tk.Radiobutton(row_network_mobile, text="WIFI", variable=network_mode_mobile_var, value="wifi", bg="white", 
               font=rog_font_tiny).pack(side="left", padx=6)
tk.Radiobutton(row_network_mobile, text="WARP", variable=network_mode_mobile_var, value="warp", bg="white", 
               font=rog_font_tiny).pack(side="left", padx=6)
tk.Radiobutton(row_network_mobile, text="WARP-SPIN", variable=network_mode_mobile_var, value="warp-spin", bg="white", 
               font=rog_font_tiny).pack(side="left", padx=6)
tk.Radiobutton(row_network_mobile, text="PROXY", variable=network_mode_mobile_var, value="proxy", bg="white", 
               font=rog_font_tiny).pack(side="left", padx=6)

# N√∫t ch·ªçn WARP Controller
tk.Button(row_network_mobile, text="üìÅ WARP Controller", bg="black", fg="white", 
          font=("ROG Fonts STRIX SCAR", 8, "bold"), command=select_warp_controller,
          width=18).pack(side="left", padx=10)

# ========================= PHONE SETTINGS (SCROLLABLE) =========================
PHONE_PADX = 6
PHONE_PADY = 6
PHONE_WRAP_W = 400     # r·ªông khung hi·ªÉn th·ªã (ch·ªânh tu·ª≥ √Ω)
PHONE_WRAP_H = 520     # cao khung hi·ªÉn th·ªã (ch·ªânh tu·ª≥ √Ω)

# ƒë·∫£m b·∫£o c√°c bi·∫øn state cho Phone c√≥ m·∫∑t v√† tr·ªè ƒë√∫ng master
def ensure_phone_vars():
    global phone_net_mode, phone_ig_app_var
    try:
        phone_net_mode
    except NameError:
        phone_net_mode = tk.StringVar(master=app, value="wifi")          # wifi|warp|proxy|sim
    try:
        phone_ig_app_var
    except NameError:
        phone_ig_app_var = tk.StringVar(master=app, value="instagram")   # instagram|instagram_lite

# g·ªçi sau khi app = tk.Tk() ƒë√£ c√≥
ensure_phone_vars()

# --- Vars m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ ---
try:
    phone_net_mode
except NameError:
    phone_net_mode = tk.StringVar(value="wifi")  # wifi | warp | proxy | sim

try:
    phone_ig_app_var
except NameError:
    phone_ig_app_var = tk.StringVar(master=app, value="instagram")

# ====== ƒê∆Ø·ªúNG D·∫™N & C·∫§U H√åNH ======
PROXY_TXT  = os.path.join(os.getcwd(), "Proxy.txt")

# ============= WRAPPER ƒë·∫∑t b·∫±ng .place (KH√îNG C√ì SCROLLBAR) =============
phone_settings = tk.LabelFrame(instagram_content, text="Phone Settings", bg="white", font=("ROG Fonts STRIX SCAR", 11, "bold"))

def _position_phone_settings():
    """ƒê·∫∑t Phone Settings ·ªü v·ªã tr√≠ c·ªë ƒë·ªãnh gi·ªØa giao di·ªán (gi·ªëng Desktop)."""
    instagram_content.update_idletasks()
    phone_settings.place(relx=0.5, y=250, anchor="n")

# app.after(180, _position_phone_settings)  # ·∫®N khi m·ªü app

# --- H√ÄNG 1: ƒê·ªãnh d·∫°ng l∆∞u (ngang) + Proxy + S·ªë l∆∞·ª£ng follow ---
top_bar_phone = tk.Frame(phone_settings, bg="white")
top_bar_phone.pack(fill="x", padx=6, pady=(4,6))

# ƒê·ªãnh d·∫°ng l∆∞u
tk.Label(top_bar_phone, text="ƒê·ªãnh d·∫°ng l∆∞u:", bg="white", font=rog_font_small).grid(row=0, column=0, sticky="w", padx=(0,6))

format_fields = ["Username","Pass","Mail","Cookie","2FA","Proxy","UID"]
save_format_phone = []
format_boxes_phone = []

def update_save_format_phone(*_):
    global save_format_phone
    save_format_phone = [cb.get() for cb in format_boxes_phone if cb.get()]
    try:
        save_config()
        log(f"üíæ [Phone] ƒê·ªãnh d·∫°ng l∆∞u: {'|'.join(save_format_phone)}")
    except Exception:
        pass

wanted_phone = ["Username","Pass","Mail","Cookie","2FA"]
for i in range(5):
    cb = ttk.Combobox(top_bar_phone, values=format_fields, state="readonly", width=10)
    cb.set(save_format_phone[i] if i < len(save_format_phone) else wanted_phone[i])
    cb.grid(row=0, column=i+1, padx=2)
    cb.bind("<<ComboboxSelected>>", update_save_format_phone)
    format_boxes_phone.append(cb)

# H√ÄNG 2: Proxy (IP:PORT) + S·ªë l∆∞·ª£ng follow
row2_phone = tk.Frame(phone_settings, bg="white")
row2_phone.pack(fill="x", padx=6, pady=(0,6))

# Proxy
proxy_phone_frame_inline = tk.Frame(row2_phone, bg="white")
proxy_phone_frame_inline.pack(side="left", padx=(0,10))
tk.Label(proxy_phone_frame_inline, text="Proxy (IP:PORT)", bg="white", font=rog_font_small).pack(side="left", padx=(0,4))
proxy_phone_entry = tk.Entry(proxy_phone_frame_inline, width=20, bg="lightgray", justify="center")
proxy_phone_entry.pack(side="left")
proxy_phone_entry.insert(0, "")

# S·ªë l∆∞·ª£ng follow
follow_phone_frame = tk.Frame(row2_phone, bg="white")
follow_phone_frame.pack(side="left")
phone_follow_count_var = tk.IntVar(value=10)
tk.Label(follow_phone_frame, text="FOLLOW COUNT:", bg="white", font=rog_font_small).pack(side="left", padx=(0,4))
ttk.Spinbox(follow_phone_frame, from_=1, to=30, textvariable=phone_follow_count_var, width=5).pack(side="left")

# ====================== B·∫¢NG THI·∫æT B·ªä 3 C·ªòT ======================
ttk.Label(phone_settings, text="Thi·∫øt b·ªã ADB (ch·ªçn 1 ho·∫∑c nhi·ªÅu):", background="white")\
   .pack(anchor="w", padx=8, pady=(8, 2))

cols = ("udid", "view", "pick", "status")
phone_device_tree = ttk.Treeview(phone_settings, columns=cols, show="headings", height=6)
phone_device_tree.heading("udid", text="DEVICE UDID")
phone_device_tree.heading("view", text="VIEW")
phone_device_tree.heading("pick", text="CH·ªåN")
phone_device_tree.heading("status", text="STATUS")
phone_device_tree.column("udid", width=220, anchor="w")
phone_device_tree.column("view", width=60, anchor="center")
phone_device_tree.column("pick", width=60, anchor="center")
phone_device_tree.column("status", width=100, anchor="center")
phone_device_tree.pack(fill="both", expand=True, padx=8)

try:
    phone_device_tree.bind("<Button-1>", _toggle_cell)
except Exception:
    pass

# ========== Th√™m/Vi·∫øt l·∫°i: Context menu cho phone_device_tree (Right-click) ==========
def _update_tree_tick_for_udid(udid: str):
    """C·∫≠p nh·∫≠t hi·ªÉn th·ªã tick tr√™n tree theo device_state."""
    try:
        st = device_state.get(udid, {"view": False, "pick": False})
        if phone_device_tree is not None and udid in phone_device_tree.get_children():
            phone_device_tree.set(udid, column="view", value=_tick(st.get("view", False)))
            phone_device_tree.set(udid, column="pick", value=_tick(st.get("pick", False)))
    except Exception:
        pass

def phone_select_all_devices():
    """Ch·ªçn to√†n b·ªô thi·∫øt b·ªã (c·ªôt CH·ªåN)."""
    try:
        for ud in list(device_state.keys()):
            device_state.setdefault(ud, {})["pick"] = True
            _update_tree_tick_for_udid(ud)
        log("‚úÖ ƒê√£ ch·ªçn to√†n b·ªô thi·∫øt b·ªã (CH·ªåN).")
    except Exception as e:
        log(f"‚ö†Ô∏è L·ªói khi ch·ªçn to√†n b·ªô thi·∫øt b·ªã: {e}")

def phone_select_all_view():
    """Ch·ªçn to√†n b·ªô view (c·ªôt VIEW)."""
    try:
        for ud in list(device_state.keys()):
            device_state.setdefault(ud, {})["view"] = True
            _update_tree_tick_for_udid(ud)
        log("‚úÖ ƒê√£ ch·ªçn to√†n b·ªô View.")
    except Exception as e:
        log(f"‚ö†Ô∏è L·ªói khi ch·ªçn to√†n b·ªô View: {e}")

def phone_deselect_all_devices():
    """B·ªè ch·ªçn to√†n b·ªô thi·∫øt b·ªã (c·ªôt CH·ªåN)."""
    try:
        for ud in list(device_state.keys()):
            device_state.setdefault(ud, {})["pick"] = False
            _update_tree_tick_for_udid(ud)
        log("‚úÖ ƒê√£ b·ªè ch·ªçn to√†n b·ªô thi·∫øt b·ªã.")
    except Exception as e:
        log(f"‚ö†Ô∏è L·ªói khi b·ªè ch·ªçn to√†n b·ªô thi·∫øt b·ªã: {e}")

def phone_deselect_all_view():
    """B·ªè ch·ªçn to√†n b·ªô view (c·ªôt VIEW)."""
    try:
        for ud in list(device_state.keys()):
            device_state.setdefault(ud, {})["view"] = False
            _update_tree_tick_for_udid(ud)
        log("‚úÖ ƒê√£ b·ªè ch·ªçn to√†n b·ªô View.")
    except Exception as e:
        log(f"‚ö†Ô∏è L·ªói khi b·ªè ch·ªçn to√†n b·ªô View: {e}")

def phone_select_selected_devices():
    """Ch·ªçn (tick CH·ªåN) cho c√°c thi·∫øt b·ªã ƒëang ƒë∆∞·ª£c b√¥i ƒëen (selected)."""
    try:
        sel = phone_device_tree.selection()
        if not sel:
            log("‚ÑπÔ∏è Ch∆∞a b√¥i ƒëen thi·∫øt b·ªã n√†o ƒë·ªÉ ch·ªçn.")
            return
        for ud in sel:
            device_state.setdefault(ud, {})["pick"] = True
            _update_tree_tick_for_udid(ud)
        log(f"‚úÖ ƒê√£ ch·ªçn {len(sel)} thi·∫øt b·ªã ƒëang b√¥i ƒëen.")
    except Exception as e:
        log(f"‚ö†Ô∏è L·ªói khi ch·ªçn thi·∫øt b·ªã ƒëang b√¥i ƒëen: {e}")

# ------------------- Connect / Disconnect TCP/IP helpers -------------------
def _resolve_device_ip(device_id: str) -> str | None:
    """C·ªë g·∫Øng l·∫•y IP c·ªßa device (wlan0 ho·∫∑c ip route)."""
    try:
        ip_info = subprocess.check_output(
            ["adb", "-s", device_id, "shell", "ip", "addr", "show", "wlan0"],
            encoding="utf-8", errors="ignore"
        )
        lines = [line.strip() for line in ip_info.splitlines() if "inet " in line]
        if lines:
            return lines[0].split()[1].split("/")[0]
    except Exception:
        pass
    try:
        route_out = subprocess.check_output(
            ["adb", "-s", device_id, "shell", "ip", "route"], encoding="utf-8", errors="ignore"
        )
        m = re.search(r"src\s+(\d+\.\d+\.\d+\.\d+)", route_out)
        if m:
            return m.group(1)
    except Exception:
        pass
    return None

def connect_tcp(device_id: str, port: int = 5555):
    """K·∫øt n·ªëi thi·∫øt b·ªã adb qua TCP/IP (m·∫∑c ƒë·ªãnh port=5555)."""
    try:
        ip = _resolve_device_ip(device_id)
        if not ip:
            raise Exception("Kh√¥ng t√¨m th·∫•y IP (thi·∫øt b·ªã ch∆∞a b·∫≠t Wi-Fi?).")

        subprocess.run(["adb", "-s", device_id, "tcpip", str(port)], check=True)
        subprocess.run(["adb", "connect", f"{ip}:{port}"], check=True)
        log(f"‚úÖ ƒê√£ k·∫øt n·ªëi {device_id} qua {ip}:{port}")
    except Exception as e:
        log(f"‚ùå K·∫øt n·ªëi TCP/IP th·∫•t b·∫°i cho {device_id}: {e}")

def disconnect_tcp(device_id: str, port: int = 5555):
    """Ng·∫Øt k·∫øt n·ªëi ADB TCP/IP cho thi·∫øt b·ªã."""
    try:
        ip = _resolve_device_ip(device_id)
        if ip:
            subprocess.run(["adb", "disconnect", f"{ip}:{port}"], check=False)
            subprocess.run(["adb", "disconnect", ip], check=False)
            log(f"‚õî ƒê√£ ng·∫Øt k·∫øt n·ªëi {device_id} ({ip}:{port})")
        else:
            subprocess.run(["adb", "disconnect", device_id], check=False)
            log(f"‚õî ƒê√£ g·ª≠i l·ªánh disconnect cho {device_id}")
    except Exception as e:
        log(f"‚ö†Ô∏è Ng·∫Øt TCP/IP th·∫•t b·∫°i cho {device_id}: {e}")

# --- song song nhi·ªÅu thi·∫øt b·ªã (theo tick CH·ªåN) ---
def phone_connect_tcp_prompt():
    """K·∫øt n·ªëi TCP/IP song song cho c√°c thi·∫øt b·ªã ƒë∆∞·ª£c tick (CH·ªåN)."""
    try:
        sel = get_checked_udids("pick")  # l·∫•y danh s√°ch tick CH·ªåN
        if not sel:
            messagebox.showinfo("TCP/IP", "Vui l√≤ng tick (CH·ªåN) √≠t nh·∫•t 1 thi·∫øt b·ªã trong danh s√°ch.")
            return

        port = 5555
        for ud in list(sel):
            threading.Thread(target=connect_tcp, args=(ud, port), daemon=True).start()

        log(f"üîå ƒêang th·ª±c hi·ªán k·∫øt n·ªëi TCP/IP cho {len(sel)} thi·∫øt b·ªã ...")
    except Exception as e:
        log(f"‚ö†Ô∏è L·ªói phone_connect_tcp_prompt: {e}")

def phone_disconnect_tcp():
    """Ng·∫Øt k·∫øt n·ªëi TCP/IP song song cho c√°c thi·∫øt b·ªã ƒë∆∞·ª£c tick (CH·ªåN)."""
    try:
        sel = get_checked_udids("pick")
        if not sel:
            messagebox.showinfo("Disconnect TCP/IP", "Vui l√≤ng tick (CH·ªåN) √≠t nh·∫•t 1 thi·∫øt b·ªã trong danh s√°ch.")
            return

        port = 5555
        for ud in list(sel):
            threading.Thread(target=disconnect_tcp, args=(ud, port), daemon=True).start()

        log(f"‚õî ƒêang ng·∫Øt k·∫øt n·ªëi TCP/IP cho {len(sel)} thi·∫øt b·ªã ...")
    except Exception as e:
        log(f"‚ö†Ô∏è L·ªói phone_disconnect_tcp: {e}")

# T·∫°o Menu chu·ªôt ph·∫£i (c·∫≠p nh·∫≠t c√°c m·ª•c)
phone_tree_menu = tk.Menu(app, tearoff=0)
phone_tree_menu.add_command(label="‚úÖ Ch·ªçn thi·∫øt b·ªã ƒëang b√¥i ƒëen", command=phone_select_selected_devices)
phone_tree_menu.add_command(label="‚úÖ Ch·ªçn to√†n b·ªô thi·∫øt b·ªã", command=phone_select_all_devices)
phone_tree_menu.add_command(label="‚úÖ Ch·ªçn to√†n b·ªô View", command=phone_select_all_view)
phone_tree_menu.add_separator()
phone_tree_menu.add_command(label="üîå Connect TCP/IP (CH·ªåN)", command=phone_connect_tcp_prompt)
phone_tree_menu.add_command(label="‚õî Disconnect TCP/IP (CH·ªåN)", command=phone_disconnect_tcp)
phone_tree_menu.add_separator()
phone_tree_menu.add_command(label="‚ùå B·ªè ch·ªçn to√†n b·ªô Thi·∫øt b·ªã", command=phone_deselect_all_devices)
phone_tree_menu.add_command(label="‚ùå B·ªè ch·ªçn to√†n b·ªô View", command=phone_deselect_all_view)
phone_tree_menu.add_separator()
phone_tree_menu.add_command(label="üîÑ Refresh ADB Devices", command=refresh_adb_devices_table)
phone_tree_menu.add_command(label="üõë Kill ADB & Reload", command=lambda: threading.Thread(target=kill_adb_and_reload, daemon=True).start())
phone_tree_menu.add_command(label="üóëÔ∏è Delete Pictures & Reboot (CH·ªåN)", command=lambda: threading.Thread(target=delete_pictures_and_reboot, daemon=True).start())
def _show_phone_tree_menu(event):
    try:
        row = phone_device_tree.identify_row(event.y)
        if row and row not in phone_device_tree.selection():
            phone_device_tree.selection_set(row)
        phone_tree_menu.tk_popup(event.x_root, event.y_root)
    finally:
        phone_tree_menu.grab_release()

# Bind chu·ªôt ph·∫£i (Windows/Linux) + fallback macOS middle button
try:
    phone_device_tree.bind("<Button-3>", _show_phone_tree_menu)
    phone_device_tree.bind("<Button-2>", _show_phone_tree_menu)
except Exception:
    pass

# ---- Th√™m: Ctrl+A ƒë·ªÉ ch·ªçn t·∫•t c·∫£ h√†ng trong Treeview ----
def phone_select_all_rows(event=None):
    try:
        all_items = phone_device_tree.get_children()
        phone_device_tree.selection_set(all_items)
    except Exception:
        pass
    return "break"

try:
    phone_device_tree.bind("<Control-a>", phone_select_all_rows)
    phone_device_tree.bind("<Control-A>", phone_select_all_rows)
except Exception:
    pass

# H√ÄNG N√öT: Refresh | Kill ADB | S·∫Øp x·∫øp | K√≠ch th∆∞·ªõc
buttons_row = tk.Frame(phone_settings, bg="white")
buttons_row.pack(fill="x", padx=8, pady=(4,6))

ttk.Button(buttons_row, text="REFRESH ADB DEVICES", command=refresh_adb_devices_table)\
   .pack(side="left", padx=(0,4))

ttk.Button(buttons_row, text="KILL ADB & RELOAD", 
           command=lambda: threading.Thread(target=kill_adb_and_reload, daemon=True).start())\
    .pack(side="left", padx=(0,4))

ttk.Button(buttons_row, text="ARRANGE PHONE VIEW", command=open_and_arrange)\
    .pack(side="left", padx=(0,4))

combo_res = ttk.Combobox(
    buttons_row,
    values=["360x640", "540x960", "720x1280", "1080x1920"],
    state="readonly",
    width=12
)
combo_res.set("360x640")
combo_res.bind("<<ComboboxSelected>>", change_resolution)
combo_res.pack(side="left")

ttk.Button(buttons_row, text="DELETE PIC",
           command=lambda: threading.Thread(target=delete_pictures_and_reboot, daemon=True).start())\
    .pack(side="left", padx=(0,4))

# ======================= HANDLERS / CONFIG =======================
photo_folder_phone = ""

def open_proxy_txt():
    try:
        if not os.path.exists(PROXY_TXT):
            with open(PROXY_TXT, "w", encoding="utf-8") as f:
                f.write("")
        if os.name == "nt":
            os.startfile(PROXY_TXT)
        elif sys.platform == "darwin":
            subprocess.Popen(["open", PROXY_TXT])
        else:
            subprocess.Popen(["xdg-open", PROXY_TXT])
        log(f"üìù ƒê√£ m·ªü: {PROXY_TXT}")
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng m·ªü ƒë∆∞·ª£c Proxy.txt:\n{e}")

def choose_photo_folder_phone():
    global photo_folder_phone
    path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ·∫£nh (Phone)")
    if path:
        photo_folder_phone = path
        save_phone_paths()
        log(f"üìÇ ƒê√£ ch·ªçn folder ·∫£nh (Phone): {path}")
    else:
        log("‚ö†Ô∏è Ch∆∞a ch·ªçn folder ·∫£nh (Phone).")

def load_phone_paths():
    load_config()

def save_phone_paths():
    save_config()

def get_random_photo_from_folder():
    folder = globals().get("photo_folder_phone", "")
    if not folder or not os.path.isdir(folder):
        log("‚ö†Ô∏è Ch∆∞a ch·ªçn folder ·∫£nh (Phone).")
        return None
    pics = [f for f in os.listdir(folder) if f.lower().endswith((".jpg",".jpeg",".png"))]
    if not pics:
        log("‚ö†Ô∏è Folder ·∫£nh kh√¥ng c√≥ file h·ª£p l·ªá.")
        return None
    return os.path.join(folder, random.choice(pics))

def push_photo_for_phone(udid=None, remote_dir="/sdcard/Pictures/AutoPhone"):
    """Push 1 ·∫£nh ng·∫´u nhi√™n v√†o ƒëi·ªán tho·∫°i & g·ª≠i MEDIA_SCANNER"""
    local_path = get_random_photo_from_folder()
    if not local_path:
        return None
    file_name = os.path.basename(local_path)
    remote_path = f"{remote_dir}/{file_name}"
    try:
        adb_mkdir(udid, remote_dir)
        adb_push(udid, local_path, remote_path)
        adb_media_scan(udid, remote_path)
        log(f"‚úÖ ƒê√£ push & scan ·∫£nh: {remote_path}")
        return (local_path, remote_path)
    except Exception as e:
        log(f"‚ùå L·ªói push ·∫£nh: {e}")
        return None

# n·∫°p ngay khi kh·ªüi ƒë·ªông
load_phone_paths()

# ======================= H√ÄNG N√öT: M·ªü Proxy.txt | Ch·ªçn folder | scrcpy | M·ªü View =======================
actions_buttons = tk.Frame(phone_settings, bg="white")
actions_buttons.pack(fill="x", padx=PHONE_PADX, pady=(4, PHONE_PADY))

ttk.Button(actions_buttons, text="OPEN Proxy.txt", command=open_proxy_txt)\
   .pack(side="left", padx=(0, 3))
ttk.Button(actions_buttons, text="CHOOSE PHOTO FOLDER", command=choose_photo_folder_phone)\
   .pack(side="left", padx=(0, 3))
ttk.Button(actions_buttons, text="CHOOSE scrcpy.exe", command=choose_scrcpy_path)\
   .pack(side="left", padx=(0, 3))
ttk.Button(actions_buttons, text="OPEN VIEW PHONE",
           command=lambda: open_scrcpy_for_list(get_checked_udids("view")))\
   .pack(side="left")

# ======================= Network Mode =======================
net_label_frame = tk.Frame(phone_settings, bg="white")
net_label_frame.pack(fill="x", padx=PHONE_PADX, pady=(4, PHONE_PADY))

tk.Label(net_label_frame, text="CHOOSE WIFI:", bg="white", font=("ROG Fonts STRIX SCAR", 9, "bold")).pack(side="left", padx=(0,8))
ttk.Radiobutton(net_label_frame, text="WiFi", value="wifi", variable=phone_net_mode).pack(side="left", padx=4)
ttk.Radiobutton(net_label_frame, text="WARP", value="warp", variable=phone_net_mode).pack(side="left", padx=4)
ttk.Radiobutton(net_label_frame, text="PROXY", value="proxy", variable=phone_net_mode).pack(side="left", padx=4)
ttk.Radiobutton(net_label_frame, text="SIM 4G", value="sim", variable=phone_net_mode).pack(side="left", padx=4)
ttk.Radiobutton(net_label_frame, text="1.1.1.1", value="1.1.1.1", variable=phone_net_mode).pack(side="left", padx=4)

# ======================= Proxy Type =======================
proxy_format_var = tk.StringVar(value="ip_port")

try:
    proxy_format_var.trace_add('write', lambda *args: save_config())
except Exception:
    pass

proxy_type_frame = tk.Frame(phone_settings, bg="white")
proxy_type_frame.pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))

tk.Label(proxy_type_frame, text="PROXY:", bg="white", font=("ROG Fonts STRIX SCAR", 9, "bold")).pack(side="left", padx=(0,8))
ttk.Radiobutton(proxy_type_frame, text="IP:PORT", variable=proxy_format_var, value="ip_port").pack(side="left", padx=4)
ttk.Radiobutton(proxy_type_frame, text="IP:PORT:USER:PASS", variable=proxy_format_var, value="ip_port_userpass").pack(side="left", padx=4)

# ======================= App Instagram =======================
def _persist_ig_choice():
    try:
        save_phone_paths()
    except Exception:
        pass

app_select_frame = tk.Frame(phone_settings, bg="white")
app_select_frame.pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))

tk.Label(app_select_frame, text="APP:", bg="white", font=("ROG Fonts STRIX SCAR", 9, "bold")).pack(side="left", padx=(0,8))
ttk.Radiobutton(app_select_frame, text="INSTAGRAM", value="instagram",
                variable=phone_ig_app_var, command=_persist_ig_choice).pack(side="left", padx=4)
ttk.Radiobutton(app_select_frame, text="INSTAGRAM LITE", value="instagram_lite",
                variable=phone_ig_app_var, command=_persist_ig_choice).pack(side="left", padx=4)
ttk.Radiobutton(app_select_frame, text="CHROME", value="chrome",
                variable=phone_ig_app_var, command=_persist_ig_choice).pack(side="left", padx=4)
# ======================= MAIL SERVICE =======================
mail_frame = tk.Frame(phone_settings, bg="white")
mail_frame.pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))

tk.Label(mail_frame, text="MAIL:", bg="white", font=("ROG Fonts STRIX SCAR", 9, "bold")).pack(side="left", padx=(0,8))
mail_phone_var = tk.StringVar(value="temp")
tk.Radiobutton(mail_frame, text="temp-mail.asia", variable=mail_phone_var, value="temp", bg="white").pack(side="left", padx=4)
tk.Radiobutton(mail_frame, text="DropMail.me", variable=mail_phone_var, value="drop", bg="white").pack(side="left", padx=4)

# ======================= JOB (Checkboxes) =======================
job_frame = tk.Frame(phone_settings, bg="white")
job_frame.pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))

tk.Label(job_frame, text="JOB INSTAGRAM:", bg="white", font=("ROG Fonts STRIX SCAR", 9, "bold")).pack(side="left", padx=(0,8))

enable_2faphone    = tk.BooleanVar(value=False)
enable_uppost      = tk.BooleanVar(value=False)
enable_editprofile = tk.BooleanVar(value=False)
enable_autofollow  = tk.BooleanVar(value=False)
enable_proaccount  = tk.BooleanVar(value=False)

ttk.Checkbutton(job_frame, text="2FA", variable=enable_2faphone).pack(side="left", padx=4)
ttk.Checkbutton(job_frame, text="UP POST", variable=enable_uppost).pack(side="left", padx=4)
ttk.Checkbutton(job_frame, text="EDIT PROFILE", variable=enable_editprofile).pack(side="left", padx=4)
ttk.Checkbutton(job_frame, text="FOLLOW", variable=enable_autofollow).pack(side="left", padx=4)
ttk.Checkbutton(job_frame, text="PROFESSIONAL", variable=enable_proaccount).pack(side="left", padx=4)

# ======================= PROFESSIONAL ACCOUNT =======================
pro_settings_frame = tk.Frame(phone_settings, bg="white")
pro_settings_frame.pack(fill="x", padx=PHONE_PADX, pady=(2, PHONE_PADY))

tk.Label(pro_settings_frame, text="PRO:", bg="white", font=("ROG Fonts STRIX SCAR", 9, "bold")).pack(side="left", padx=(0,8))

CATEGORIES = [
    "Artist", "Musician/band", "Blogger", "Clothing (Brand)",
    "Community", "Digital creator", "Education", "Entrepreneur",
    "Health/beauty", "Editor", "Writer", "Personal blog",
    "Product/service", "Gamer", "Restaurant",
    "Beauty, cosmetic & personal care", "Grocery Store",
    "Photographer", "Shopping & retail", "Reel creator"
]
pro_category_var = tk.StringVar(value="Reel creator")
pro_type_var = tk.StringVar(value="Creator")

tk.Label(pro_settings_frame, text="Category:", bg="white").pack(side="left", padx=(0,4))
ttk.Combobox(pro_settings_frame, textvariable=pro_category_var, values=CATEGORIES, width=20, state="readonly").pack(side="left", padx=(0,10))

tk.Label(pro_settings_frame, text="Type:", bg="white").pack(side="left", padx=(0,4))
ttk.Combobox(pro_settings_frame, textvariable=pro_type_var, values=["Creator", "Business"], width=10, state="readonly").pack(side="left")

# ========================= ·∫®N/HI·ªÜN 3 B·∫¢NG SETTINGS THEO CH·∫æ ƒê·ªò =========================
def update_settings_visibility(*_):
    """·∫®n/hi·ªán Desktop - Mobile - Phone Settings t√πy theo ch·∫ø ƒë·ªô GIAO DI·ªÜN."""
    mode = ui_mode_var.get().strip().lower()
    try:
        # ·∫®n t·∫•t c·∫£ tr∆∞·ªõc
        desktop_settings.place_forget()
        mobile_settings.place_forget()
        phone_settings.place_forget()
        
        # Hi·ªán v√† ENABLE frame t∆∞∆°ng ·ª©ng
        if mode == "desktop":
            _position_desktop_settings()
            _set_container_enabled(desktop_settings, enabled=True)
            _set_container_enabled(mobile_settings, enabled=False)
            _set_container_enabled(phone_settings, enabled=False)
        elif mode == "mobile":
            _position_mobile_settings()
            _set_container_enabled(desktop_settings, enabled=False)
            _set_container_enabled(mobile_settings, enabled=True)
            _set_container_enabled(phone_settings, enabled=False)
        elif mode == "phone":
            _position_phone_settings()
            _set_container_enabled(desktop_settings, enabled=False)
            _set_container_enabled(mobile_settings, enabled=False)
            _set_container_enabled(phone_settings, enabled=True)
        # else: kh√¥ng hi·ªán g√¨ c·∫£ (ƒë·ªÉ tr·ªëng)
    except Exception as e:
        print("‚ö†Ô∏è L·ªói update_settings_visibility:", e)

# G·∫Øn s·ª± ki·ªán cho radio "GIAO DI·ªÜN"
ui_mode_var.trace_add("write", lambda *_: update_settings_visibility())

# ======================= QU√âT THI·∫æT B·ªä L·∫¶N ƒê·∫¶U =======================
try:
    refresh_adb_devices_table()
except Exception:
    pass

# ========================= TAB 2 & 3 CONTENT =========================
# ===== TAB 2: CHECK LIVE =====
checklive_content = tk.Frame(app, bg="white")

# Status bar (LIVE/DIE/RATE) cho Check Live
checklive_status_frame = tk.Frame(checklive_content, bg="white")
checklive_status_frame.pack(side="top", anchor="w", pady=5, padx=5)

checklive_live_var = tk.StringVar(value="0")
checklive_die_var = tk.StringVar(value="0")
checklive_rate_var = tk.StringVar(value="0%")

rog_font_checklive = ("ROG Fonts STRIX SCAR", 13, "bold")
tk.Label(checklive_status_frame, text="LIVE:", fg="green", bg="white", font=rog_font_checklive).grid(row=0, column=0, padx=5)
tk.Label(checklive_status_frame, textvariable=checklive_live_var, fg="green", bg="white", font=rog_font_checklive).grid(row=0, column=1, padx=5)
tk.Label(checklive_status_frame, text="DIE:",  fg="red",   bg="white", font=rog_font_checklive).grid(row=0, column=2, padx=5)
tk.Label(checklive_status_frame, textvariable=checklive_die_var,  fg="red",   bg="white", font=rog_font_checklive).grid(row=0, column=3, padx=5)
tk.Label(checklive_status_frame, text="RATE:", fg="blue",  bg="white", font=rog_font_checklive).grid(row=0, column=6, padx=5)
tk.Label(checklive_status_frame, textvariable=checklive_rate_var, fg="blue",  bg="white", font=rog_font_checklive).grid(row=0, column=7, padx=5)

# Main frame cho Tree v√† Logs
checklive_main_frame = tk.Frame(checklive_content, bg="white")
checklive_main_frame.pack(fill="both", expand=True, padx=10, pady=10)

# Tree Frame
checklive_tree_frame = tk.LabelFrame(checklive_main_frame, text="Accounts", bg="white", font=("Arial", 10, "bold"))
checklive_tree_frame.pack(side="top", fill="both", expand=True, padx=5, pady=(0,5))

checklive_cols = ["STT","TR·∫†NG TH√ÅI","USERNAME","PASS","MAIL","PHONE","COOKIE","2FA","TOKEN","IP","PROXY","LIVE","DIE","FOLLOW","POST","AVATAR","GENDER","BIO","PROFESSIONAL"]
checklive_tree = ttk.Treeview(checklive_tree_frame, columns=checklive_cols, show="headings", height=12)

# Scrollbars cho Tree
checklive_vsb = ttk.Scrollbar(checklive_tree_frame, orient="vertical", command=checklive_tree.yview)
checklive_tree.configure(yscrollcommand=checklive_vsb.set)
checklive_vsb.pack(side="right", fill="y")

checklive_hsb = ttk.Scrollbar(checklive_tree_frame, orient="horizontal", command=checklive_tree.xview)
checklive_tree.configure(xscrollcommand=checklive_hsb.set)
checklive_hsb.pack(side="bottom", fill="x")

checklive_tree.pack(fill="both", expand=True)

# C·∫•u h√¨nh columns v√† headings
for col in checklive_cols:
    checklive_tree.heading(col, text=col, anchor="center")
    checklive_tree.column(col, width=120, anchor="center")

# Tags cho LIVE/DIE
checklive_tree.tag_configure("LIVE", background="lightgreen")
checklive_tree.tag_configure("DIE", background="tomato")

# ===== CH·ª®C NƒÇNG CTRL+A V√Ä CONTEXT MENU CHO CHECK LIVE TREE =====

# H√†m ch·ªçn t·∫•t c·∫£ items trong Tree (Ctrl+A)
def select_all_checklive(event=None):
    """Ch·ªçn t·∫•t c·∫£ items trong b·∫£ng Check Live Tree"""
    items = checklive_tree.get_children()
    for item in items:
        checklive_tree.selection_add(item)
    return "break"  # NgƒÉn kh√¥ng cho event lan truy·ªÅn

# Bind Ctrl+A cho Tree
checklive_tree.bind("<Control-a>", select_all_checklive)
checklive_tree.bind("<Control-A>", select_all_checklive)

# H√†m x√≥a items ƒë√£ ch·ªçn
def delete_selected_checklive():
    """X√≥a c√°c items ƒë√£ ch·ªçn trong b·∫£ng Check Live"""
    selected = checklive_tree.selection()
    if not selected:
        messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 t√†i kho·∫£n ƒë·ªÉ x√≥a!")
        return
    
    confirm = messagebox.askyesno("X√°c nh·∫≠n", 
                                  f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a {len(selected)} t√†i kho·∫£n ƒë√£ ch·ªçn?")
    if confirm:
        for item in selected:
            checklive_tree.delete(item)
        
        # C·∫≠p nh·∫≠t l·∫°i STT
        remaining_items = checklive_tree.get_children()
        for idx, item in enumerate(remaining_items, start=1):
            values = list(checklive_tree.item(item, "values"))
            values[0] = idx  # C·∫≠p nh·∫≠t STT
            checklive_tree.item(item, values=values)
        
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a {len(selected)} t√†i kho·∫£n!")

# H√†m x√≥a t·∫•t c·∫£ items
def delete_all_checklive():
    """X√≥a t·∫•t c·∫£ items trong b·∫£ng Check Live"""
    items = checklive_tree.get_children()
    if not items:
        messagebox.showinfo("Th√¥ng b√°o", "B·∫£ng ƒëang tr·ªëng!")
        return
    
    confirm = messagebox.askyesno("X√°c nh·∫≠n", 
                                  f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a T·∫§T C·∫¢ {len(items)} t√†i kho·∫£n?")
    if confirm:
        for item in items:
            checklive_tree.delete(item)
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a t·∫•t c·∫£ t√†i kho·∫£n!")

# T·∫°o Context Menu (Right-click menu)
checklive_context_menu = tk.Menu(app, tearoff=0, bg="white", fg="black", 
                                 font=("Arial", 10), activebackground="#0078D7", 
                                 activeforeground="white")

checklive_context_menu.add_command(label="‚ûï Th√™m t√†i kho·∫£n", 
                                   command=lambda: open_add_account_window())
checklive_context_menu.add_separator()
checklive_context_menu.add_command(label="üóëÔ∏è X√≥a ƒë√£ ch·ªçn", 
                                   command=delete_selected_checklive)
checklive_context_menu.add_command(label="üóëÔ∏è X√≥a t·∫•t c·∫£", 
                                   command=delete_all_checklive)
checklive_context_menu.add_separator()
checklive_context_menu.add_command(label="‚úÖ Ch·ªçn t·∫•t c·∫£ (Ctrl+A)", 
                                   command=select_all_checklive)

# H√†m hi·ªÉn th·ªã context menu
def show_checklive_context_menu(event):
    """Hi·ªÉn th·ªã context menu khi chu·ªôt ph·∫£i"""
    try:
        checklive_context_menu.tk_popup(event.x_root, event.y_root)
    finally:
        checklive_context_menu.grab_release()

# Bind chu·ªôt ph·∫£i cho Tree
checklive_tree.bind("<Button-3>", show_checklive_context_menu)

# H√†m m·ªü c·ª≠a s·ªï ADD ACCOUNT
def open_add_account_window():
    """M·ªü c·ª≠a s·ªï ƒë·ªÉ th√™m t√†i kho·∫£n v√†o b·∫£ng Check Live"""
    add_window = tk.Toplevel(app)
    add_window.title("Add Account")
    add_window.geometry("700x500")
    add_window.configure(bg="white")
    add_window.resizable(False, False)
    
    # Title
    title_label = tk.Label(add_window, text="TH√äM T√ÄI KHO·∫¢N", 
                           font=("ROG Fonts STRIX SCAR", 16, "bold"), 
                           bg="white", fg="black")
    title_label.pack(pady=10)
    
    # Frame cho ƒë·ªãnh d·∫°ng
    format_frame = tk.LabelFrame(add_window, text="ƒê·ªãnh d·∫°ng t√†i kho·∫£n", 
                                 bg="white", font=("Arial", 10, "bold"))
    format_frame.pack(fill="x", padx=20, pady=(10, 5))
    
    # Dropdown ch·ªçn ƒë·ªãnh d·∫°ng
    format_options = [
        "Username|Pass",
        "Username|Pass|Mail",
        "Username|Pass|Mail|Cookie",
        "Username|Pass|Mail|Cookie|2FA",
        "Username|Pass|Mail|2FA",
        "Mail|Pass",
        "Cookie"
    ]
    
    format_var = tk.StringVar(value="Username|Pass|Mail")
    
    tk.Label(format_frame, text="Ch·ªçn ƒë·ªãnh d·∫°ng:", bg="white", 
             font=("Arial", 10)).pack(side="left", padx=10, pady=10)
    format_combo = ttk.Combobox(format_frame, textvariable=format_var, 
                                values=format_options, state="readonly", width=35)
    format_combo.pack(side="left", padx=10, pady=10)
    
    # Frame cho nh·∫≠p t√†i kho·∫£n
    input_frame = tk.LabelFrame(add_window, text="Nh·∫≠p t√†i kho·∫£n (m·ªói d√≤ng 1 t√†i kho·∫£n)", 
                               bg="white", font=("Arial", 10, "bold"))
    input_frame.pack(fill="both", expand=True, padx=20, pady=5)
    
    # Text widget ƒë·ªÉ nh·∫≠p nhi·ªÅu d√≤ng
    account_text = scrolledtext.ScrolledText(input_frame, width=70, height=15, 
                                             bg="lightyellow", fg="black", 
                                             font=("Consolas", 10))
    account_text.pack(fill="both", expand=True, padx=10, pady=10)
    
    # Placeholder text
    placeholder = "V√≠ d·ª•:\nusername1|password1|email1@gmail.com\nusername2|password2|email2@gmail.com\n..."
    account_text.insert("1.0", placeholder)
    account_text.config(fg="gray")
    
    # X√≥a placeholder khi focus
    def on_focus_in(event):
        if account_text.get("1.0", "end-1c") == placeholder:
            account_text.delete("1.0", "end")
            account_text.config(fg="black")
    
    def on_focus_out(event):
        if not account_text.get("1.0", "end-1c").strip():
            account_text.insert("1.0", placeholder)
            account_text.config(fg="gray")
    
    account_text.bind("<FocusIn>", on_focus_in)
    account_text.bind("<FocusOut>", on_focus_out)
    
    # H√†m th√™m t√†i kho·∫£n v√†o Tree
    def add_accounts_to_tree():
        text_content = account_text.get("1.0", "end-1c").strip()
        
        if not text_content or text_content == placeholder:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p t√†i kho·∫£n!")
            return
        
        lines = text_content.split("\n")
        added_count = 0
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
            
            parts = line.split("|")
            selected_format = format_var.get()
            
            # Parse theo ƒë·ªãnh d·∫°ng ƒë√£ ch·ªçn
            username = parts[0] if len(parts) > 0 else ""
            password = ""
            mail = ""
            cookie = ""
            twofa = ""
            
            if "Username|Pass|Mail|Cookie|2FA" in selected_format:
                password = parts[1] if len(parts) > 1 else ""
                mail = parts[2] if len(parts) > 2 else ""
                cookie = parts[3] if len(parts) > 3 else ""
                twofa = parts[4] if len(parts) > 4 else ""
            elif "Username|Pass|Mail|Cookie" in selected_format:
                password = parts[1] if len(parts) > 1 else ""
                mail = parts[2] if len(parts) > 2 else ""
                cookie = parts[3] if len(parts) > 3 else ""
            elif "Username|Pass|Mail|2FA" in selected_format:
                password = parts[1] if len(parts) > 1 else ""
                mail = parts[2] if len(parts) > 2 else ""
                twofa = parts[3] if len(parts) > 3 else ""
            elif "Username|Pass|Mail" in selected_format:
                password = parts[1] if len(parts) > 1 else ""
                mail = parts[2] if len(parts) > 2 else ""
            elif "Username|Pass" in selected_format:
                password = parts[1] if len(parts) > 1 else ""
            elif "Mail|Pass" in selected_format:
                mail = username  # D√≤ng ƒë·∫ßu l√† mail
                password = parts[1] if len(parts) > 1 else ""
                username = mail.split("@")[0] if "@" in mail else mail
            elif "Cookie" in selected_format:
                cookie = username
                username = ""
            
            # L·∫•y STT ti·∫øp theo
            current_items = checklive_tree.get_children()
            stt = len(current_items) + 1
            
            # Th√™m v√†o Tree v·ªõi 19 c·ªôt
            values = [
                stt,              # STT
                "Ch∆∞a check",     # TR·∫†NG TH√ÅI
                username,         # USERNAME
                password,         # PASS
                mail,             # MAIL
                "",               # PHONE
                cookie,           # COOKIE
                twofa,            # 2FA
                "",               # TOKEN
                "",               # IP
                "",               # PROXY
                "",               # LIVE
                "",               # DIE
                "",               # FOLLOW
                "",               # POST
                "",               # AVATAR
                "",               # GENDER
                "",               # BIO
                ""                # PROFESSIONAL
            ]
            
            checklive_tree.insert("", "end", values=values)
            added_count += 1
        
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m {added_count} t√†i kho·∫£n v√†o b·∫£ng!")
        account_text.delete("1.0", "end")
        account_text.insert("1.0", placeholder)
        account_text.config(fg="gray")
    
    # Button frame
    btn_frame = tk.Frame(add_window, bg="white")
    btn_frame.pack(side="bottom", pady=15)
    
    # N√∫t Th√™m
    add_btn = tk.Button(btn_frame, text="‚úÖ TH√äM T√ÄI KHO·∫¢N", 
                       font=("ROG Fonts STRIX SCAR", 12, "bold"),
                       bg="#4CAF50", fg="white", 
                       command=add_accounts_to_tree,
                       padx=20, pady=10, cursor="hand2")
    add_btn.pack(side="left", padx=5)
    
    # N√∫t ƒê√≥ng
    close_btn = tk.Button(btn_frame, text="‚ùå ƒê√ìNG", 
                         font=("ROG Fonts STRIX SCAR", 12, "bold"),
                         bg="#f44336", fg="white",
                         command=add_window.destroy,
                         padx=20, pady=10, cursor="hand2")
    close_btn.pack(side="left", padx=5)

# Button frame cho c√°c n√∫t ƒëi·ªÅu khi·ªÉn
checklive_btn_frame = tk.Frame(checklive_content, bg="white")
checklive_btn_frame.pack(side="bottom", pady=10)

# N√∫t ADD ACCOUNT
add_account_btn = tk.Button(checklive_btn_frame, text="‚ûï ADD ACCOUNT",
                           font=("ROG Fonts STRIX SCAR", 11, "bold"),
                           bg="#2196F3", fg="white",
                           command=open_add_account_window,
                           padx=15, pady=8, cursor="hand2")
add_account_btn.pack(side="left", padx=5)
# N√∫t CHECK LIVE
def check_live_accounts():
    messagebox.showinfo("CHECK LIVE", "Ch·ª©c nƒÉng CHECK LIVE s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn ·ªü ƒë√¢y!")

check_live_btn = tk.Button(checklive_btn_frame, text="üîç CHECK LIVE",
                           font=("ROG Fonts STRIX SCAR", 11, "bold"),
                           bg="#00BFFF", fg="white",
                           command=check_live_accounts,
                           padx=15, pady=8, cursor="hand2")
check_live_btn.pack(side="left", padx=5)

# ===== TAB 3: HISTORY =====
history_content = tk.Frame(app, bg="white")
history_label = tk.Label(history_content, text="HISTORY CONTENT", 
                         font=("ROG Fonts STRIX SCAR", 16, "bold"), bg="white")
history_label.pack(expand=True)

# ===== TAB 4: GUIDE (H∆Ø·ªöNG D·∫™N) =====
guide_content = tk.Frame(app, bg="white")
guide_title = tk.Label(guide_content, text="USER GUIDE", 
                       font=("ROG Fonts STRIX SCAR", 18, "bold"), bg="white", fg="black")
guide_title.pack(pady=20)

# T·∫°o scrollable frame cho h∆∞·ªõng d·∫´n
guide_canvas = tk.Canvas(guide_content, bg="white", highlightthickness=0)
guide_scrollbar = tk.Scrollbar(guide_content, orient="vertical", command=guide_canvas.yview)
guide_frame = tk.Frame(guide_canvas, bg="white")

guide_frame.bind(
    "<Configure>",
    lambda e: guide_canvas.configure(scrollregion=guide_canvas.bbox("all"))
)

guide_canvas.create_window((0, 0), window=guide_frame, anchor="nw")
guide_canvas.configure(yscrollcommand=guide_scrollbar.set)

guide_canvas.pack(side="left", fill="both", expand=True, padx=20, pady=10)
guide_scrollbar.pack(side="right", fill="y")

# N·ªôi dung h∆∞·ªõng d·∫´n
guide_text = """
üìã INSTAGRAM AUTO CREATOR - USER GUIDE

1Ô∏è‚É£ INTERFACE SELECTION:
   ‚Ä¢ DESKTOP: Run on computer browser (Chrome)
   ‚Ä¢ MOBILE IPHONE 15: Simulate iPhone 15 device
   ‚Ä¢ PHONE (ANDROID): Control real Android devices via ADB

2Ô∏è‚É£ DESKTOP MODE:
   ‚Ä¢ Set number of threads and accounts to create
   ‚Ä¢ Configure proxy (IP:PORT format)
   ‚Ä¢ Choose mail service: temp-mail.asia or DropMail.me
   ‚Ä¢ Enable features: Follow, Bio+Ava+Post, 2FA, Professional account
   ‚Ä¢ Select network mode: WiFi, WARP, WARP-SPIN, or PROXY

3Ô∏è‚É£ MOBILE MODE:
   ‚Ä¢ Similar to Desktop but optimized for iPhone 15 simulation
   ‚Ä¢ Lighter settings for mobile browser automation

4Ô∏è‚É£ PHONE (ANDROID) MODE:
   ‚Ä¢ Connect Android devices via USB/WiFi ADB
   ‚Ä¢ Click "Refresh Device List" to detect devices
   ‚Ä¢ Select Instagram or Instagram Lite app
   ‚Ä¢ Configure network: WiFi, WARP, Proxy, or SIM 4G
   ‚Ä¢ Enable jobs: Follow, 2FA, Post, Edit Profile, Auto Follow, Professional

5Ô∏è‚É£ BEFORE STARTING:
   ‚ö†Ô∏è IMPORTANT: Click SAVE button before START!
   ‚Ä¢ The tool will warn you if settings are not saved
   ‚Ä¢ If you change settings, you must SAVE again before START

6Ô∏è‚É£ BUTTONS EXPLAINED:
   ‚Ä¢ RESTART: Restart the application
   ‚Ä¢ START: Begin account creation process
   ‚Ä¢ FILE REG: Open Live.txt to view created accounts
   ‚Ä¢ CHOOSE AVATAR: Select folder containing avatar images
   ‚Ä¢ SAVE: Save current settings (Required before START!)
   ‚Ä¢ CHOOSE CHROME: Select Chrome browser path

7Ô∏è‚É£ FILE REQUIREMENTS:
   ‚Ä¢ Live.txt: Output file for successful accounts
   ‚Ä¢ Die.txt: Output file for failed accounts
   ‚Ä¢ proxy.txt: List of proxies (one per line)
   ‚Ä¢ caption.txt: Bio text for accounts
   ‚Ä¢ Avatar folder: Contains profile images

8Ô∏è‚É£ PROFESSIONAL ACCOUNT:
   ‚Ä¢ Choose Category (Artist, Blogger, Creator, etc.)
   ‚Ä¢ Select Type: Creator or Business

9Ô∏è‚É£ NETWORK MODES:
   ‚Ä¢ WiFi: Use default internet connection
   ‚Ä¢ WARP: Use Cloudflare WARP VPN
   ‚Ä¢ WARP-SPIN: Rotate WARP connection for each account
   ‚Ä¢ PROXY: Use proxy list from proxy.txt
   ‚Ä¢ SIM 4G: Use mobile data (Phone mode only)

üîü TIPS & TRICKS:
   ‚Ä¢ Always test with 1 thread first
   ‚Ä¢ Use different proxies to avoid IP blocks
   ‚Ä¢ Enable 2FA for better account security
   ‚Ä¢ Regular accounts last longer than bulk-created ones
   ‚Ä¢ Phone mode is most reliable but slower

‚ö†Ô∏è TROUBLESHOOTING:
   ‚Ä¢ If START is blocked: Click SAVE button first!
   ‚Ä¢ Chrome not found: Use CHOOSE CHROME button
   ‚Ä¢ Proxy errors: Check proxy.txt format
   ‚Ä¢ Phone not detected: Enable USB Debugging on Android
   ‚Ä¢ ADB connection: Run "Refresh Device List"

üìû SUPPORT:
   ‚Ä¢ Check logs in the application for detailed error messages
   ‚Ä¢ Ensure all required files are in the correct directory
   ‚Ä¢ For Phone mode, make sure ADB is properly installed

‚úÖ REMEMBER: Always SAVE before START! ‚úÖ
"""

guide_label = tk.Label(guide_frame, text=guide_text, bg="white", 
                       font=("Consolas", 10), justify="left", anchor="w")
guide_label.pack(padx=20, pady=10, fill="both", expand=True)

# ===== TAB 5: UTILITIES (TI·ªÜN √çCH) =====
utilities_content = tk.Frame(app, bg="white")
utilities_title = tk.Label(
    utilities_content, text="UTILITIES",
    font=("ROG Fonts STRIX SCAR", 18, "bold"), bg="white", fg="black"
)
utilities_title.pack(pady=20)

# ----- Scrollable frame -----
util_canvas = tk.Canvas(utilities_content, bg="white", highlightthickness=0)
util_scrollbar = tk.Scrollbar(utilities_content, orient="vertical", command=util_canvas.yview)
util_frame = tk.Frame(util_canvas, bg="white")
util_frame.bind("<Configure>", lambda e: util_canvas.configure(scrollregion=util_canvas.bbox("all")))
util_canvas.create_window((0, 0), window=util_frame, anchor="nw")
util_canvas.configure(yscrollcommand=util_scrollbar.set)
util_canvas.pack(side="left", fill="both", expand=True, padx=20, pady=10)
util_scrollbar.pack(side="right", fill="y")

# ----- LOG AREA -----
tk.Label(
    util_frame, text="üìú LOG OUTPUT",
    font=("ROG Fonts STRIX SCAR", 14, "bold"),
    bg="white", fg="black"
).pack(anchor="w", pady=(0, 10))

log_frame = tk.Frame(util_frame, bg="black", bd=2, relief="sunken")
log_frame.pack(fill="both", expand=True)

log_box = tk.Text(
    log_frame, bg="black", fg="lime",
    insertbackground="white", font=("Consolas", 10), wrap="word"
)
log_box.pack(fill="both", expand=True)

def log_util(msg: str):
    log_box.insert(tk.END, msg + "\n")
    log_box.see(tk.END)

# ======================= Pinterest Downloader =======================
tk.Label(util_frame, text="T·∫£i ·∫£nh t·ª´ Pinterest", font=("ROG Fonts STRIX SCAR", 13, "bold"), bg="white", fg="black").pack(anchor="w", pady=(10,5))

# ----- ƒê·ªçc config -----
def load_config():
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_config(data):
    try:
        with open("config.json", "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

config = load_config()

# ----- Email v√† m·∫≠t kh·∫©u -----
row_email = tk.Frame(util_frame, bg="white"); row_email.pack(anchor="w", pady=2)
tk.Label(row_email, text="Email:", bg="white").pack(side="left", padx=(0,5))
pin_email_var = tk.StringVar(value=config.get("pinterest_email", ""))
email_entry = ttk.Entry(row_email, textvariable=pin_email_var, width=40)
email_entry.pack(side="left")

row_pass = tk.Frame(util_frame, bg="white"); row_pass.pack(anchor="w", pady=2)
tk.Label(row_pass, text="M·∫≠t kh·∫©u:", bg="white").pack(side="left", padx=(0,5))
pin_pass_var = tk.StringVar(value=config.get("pinterest_pass", ""))
pass_entry = ttk.Entry(row_pass, textvariable=pin_pass_var, width=40, show="*")
pass_entry.pack(side="left")

# ----- Danh s√°ch t·ª´ kh√≥a Pinterest -----
pinterest_keywords = [
    "·∫£nh g√°i xinh", "girl cute", "hot girl d·ªÖ th∆∞∆°ng", "pretty girl portrait",
    "asian beauty", "korean girl", "vietnamese girl", "japanese girl",
    "chinese girl portrait", "fashion girl pose", "girl selfie", "smiling girl",
    "outdoor portrait", "aesthetic girl", "street fashion girl",
    "landscape photography", "mountain view", "beach sunset", "forest trail",
    "night city lights", "tropical island", "sky clouds aesthetic", "flower garden",
    "desert dunes", "winter snow view",
    "minimalist art", "aesthetic wallpaper", "vintage film photo", "street photography",
    "cyberpunk neon city", "coffee shop aesthetic", "interior design modern",
    "workspace inspiration", "anime girl art", "digital painting portrait"
]

pin_url_var = tk.StringVar()

# ----- S·ªë l∆∞·ª£ng ·∫£nh -----
tk.Label(util_frame, text="S·ªë l∆∞·ª£ng ·∫£nh mu·ªën l∆∞u:", bg="white", font=("Consolas", 11)).pack(anchor="w", pady=(8,0))
ava_count_var = tk.IntVar(value=30)
ava_count_entry = ttk.Entry(util_frame, textvariable=ava_count_var, width=8)
ava_count_entry.pack(anchor="w", pady=(0,8))

# ----- Ch·ªçn th∆∞ m·ª•c l∆∞u -----
def select_ava_folder_util():
    folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ·∫£nh l∆∞u Pinterest")
    if folder:
        config = load_config()
        config["ava_folder_path"] = folder
        save_config(config)
        log_util(f"‚úÖ ƒê√£ ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh: {folder}")
    else:
        log_util("‚ö†Ô∏è Ch∆∞a ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh.")

# ----- H√†m t·∫°o URL -----
def build_pinterest_url(keyword):
    from urllib.parse import quote
    return f"https://www.pinterest.com/search/pins/?q={quote(keyword)}"

# ----- ƒêƒÉng nh·∫≠p -----
def pinterest_login(driver, email, password):
    driver.get("https://www.pinterest.com/login/")
    time.sleep(2)
    try:
        email_input = driver.find_element(By.NAME, "id")
        email_input.send_keys(email)
        driver.find_element(By.TAG_NAME, "button").click()
        time.sleep(2)
        pass_input = driver.find_element(By.NAME, "password")
        pass_input.send_keys(password)
        driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
        time.sleep(10)
        # Skip popup n·∫øu c√≥
        try:
            skip = driver.find_element(By.XPATH, "//div[text()='Skip for now']")
            skip.click()
            log_util("‚û°Ô∏è ƒê√£ b·ªè qua popup 'Skip for now'")
        except Exception:
            pass
    except Exception as e:
        log_util(f"‚ö†Ô∏è L·ªói ƒëƒÉng nh·∫≠p: {e}")

# ----- L·∫•y ·∫£nh -----
def collect_image_urls(driver, max_images=100, scroll_limit=30):
    urls, seen = [], set()
    last_height = driver.execute_script("return document.body.scrollHeight")
    scrolls = 0
    while len(urls) < max_images and scrolls < scroll_limit:
        imgs = driver.find_elements(By.TAG_NAME, "img")
        for img in imgs:
            src = img.get_attribute("src") or ""
            if src and not src.startswith("data:") and src not in seen:
                seen.add(src)
                urls.append(src)
                if len(urls) >= max_images:
                    break
        driver.execute_script("window.scrollBy(0, window.innerHeight);")
        time.sleep(1.5)
        new_height = driver.execute_script("return document.body.scrollHeight")
        scrolls = scrolls + 1 if new_height == last_height else 0
        last_height = new_height
    return urls[:max_images]

def download_image(session, url, folder, idx):
    try:
        r = session.get(url, timeout=10, stream=True)
        r.raise_for_status()
        ext = os.path.splitext(urlparse(url).path)[1] or ".jpg"
        path = os.path.join(folder, f"pinterest_{idx:04d}{ext}")
        with open(path, "wb") as f:
            for chunk in r.iter_content(8192):
                f.write(chunk)
        return True
    except Exception:
        return False

# ----- B·∫Øt ƒë·∫ßu t·∫£i -----
def start_pinterest_download():
    email = pin_email_var.get().strip()
    password = pin_pass_var.get().strip()
    if not (email and password):
        log_util("‚ö†Ô∏è H√£y nh·∫≠p Email v√† M·∫≠t kh·∫©u Pinterest.")
        return

    # L∆∞u l·∫°i email & pass
    config = load_config()
    config["pinterest_email"] = email
    config["pinterest_pass"] = password
    save_config(config)

    # Random t·ª´ kh√≥a
    keyword = random.choice(pinterest_keywords)
    url = build_pinterest_url(keyword)
    pin_url_var.set(url)
    log_util(f"\nüïí B·∫Øt ƒë·∫ßu l√∫c: {time.strftime('%H:%M:%S')}")
    log_util(f"üéØ T·ª´ kh√≥a ng·∫´u nhi√™n: {keyword}")
    log_util(f"üîó URL Pinterest: {url}")

    folder = config.get("ava_folder_path", "")
    if not folder or not os.path.isdir(folder):
        log_util("‚ö†Ô∏è Ch∆∞a ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh.")
        return

    max_images = ava_count_var.get()
    log_util(f"üöÄ ƒêang kh·ªüi ƒë·ªông Chrome (Pinterest)...")

    threading.Thread(target=_worker_pinterest, args=(email, password, url, max_images, folder), daemon=True).start()

def _worker_pinterest(email, password, url, max_images, folder):
    try:
        from webdriver_manager.chrome import ChromeDriverManager
        driver = se_webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=Options())
        driver.maximize_window()
        pinterest_login(driver, email, password)
        driver.get(url)
        log_util("üîç ƒêang cu·ªôn v√† thu th·∫≠p ·∫£nh...")
        urls = collect_image_urls(driver, max_images=max_images)
        driver.quit()
        if not urls:
            log_util("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh.")
            return
        session = requests.Session()
        total, ok = len(urls), 0
        for i, link in enumerate(urls, 1):
            log_util(f"‚¨áÔ∏è {i}/{total}: {link[:60]}...")
            if download_image(session, link, folder, i):
                ok += 1
        log_util(f"üèÅ Ho√†n t·∫•t. ƒê√£ l∆∞u {ok}/{total} ·∫£nh v√†o {folder}")
    except Exception as e:
        log_util(f"‚ùå L·ªói: {e}")

# ==== N√∫t ƒëi·ªÅu khi·ªÉn ====
start_btn = ttk.Button(util_frame, text="B·∫Øt ƒë·∫ßu t·∫£i Pinterest", command=start_pinterest_download, width=26)
start_btn.pack(pady=10)
ava_btn = ttk.Button(util_frame, text="Ava Folder (Ch·ªçn Folder)", command=select_ava_folder_util, width=24)
ava_btn.pack(pady=4)

# ===== TAB 6: MENU =====
menu_content = tk.Frame(app, bg="white")
menu_title = tk.Label(menu_content, text="MENU - QUICK ACCESS", 
                      font=("ROG Fonts STRIX SCAR", 18, "bold"), bg="white", fg="black")
menu_title.pack(pady=20)

# Container cho menu
menu_container = tk.Frame(menu_content, bg="white")
menu_container.pack(expand=True, fill="both", padx=40, pady=20)

menu_button_font = ("ROG Fonts STRIX SCAR", 12, "bold")


# Hi·ªÉn th·ªã tab m·∫∑c ƒë·ªãnh (INSTAGRAM)
switch_tab("INSTAGRAM")

load_config()

def open_main_app():
    try:
        app.deiconify()   # hi·ªán l·∫°i giao di·ªán ch√≠nh
    except Exception:
        pass

# g·ªçi intro tr∆∞·ªõc khi ch·∫°y main loop
show_intro(app, open_main_app)

app.mainloop()
